0.224 s: components

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
run_tests is a Catch v2.13.8 host application.
Run with -? for options

-------------------------------------------------------------------------------
componentsSparse
-------------------------------------------------------------------------------
/daphne/test/api/cli/algorithms/AlgorithmsTest.cpp:38
...............................................................................

/daphne/test/api/cli/Utils.h:258: FAILED:
  CHECK( status == exp )
with expansion:
  2 == 0

0.035 s: componentsSparse
0.078 s: kmeans
0.072 s: lm
-------------------------------------------------------------------------------
decisionTree_Wine_MaxV1
-------------------------------------------------------------------------------
/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:81
...............................................................................

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  CHECK( status == StatusCode::SUCCESS )
with expansion:
  -1 == 0

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  {Unknown expression after the reported line}
due to unexpected exception with message:
  stod

0.000 s: decisionTree_Wine_MaxV1
-------------------------------------------------------------------------------
decisionTree_Wine_MaxV05
-------------------------------------------------------------------------------
/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:86
...............................................................................

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  CHECK( status == StatusCode::SUCCESS )
with expansion:
  -1 == 0

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  {Unknown expression after the reported line}
due to unexpected exception with message:
  stod

0.000 s: decisionTree_Wine_MaxV05
-------------------------------------------------------------------------------
randomForestWine_MaxV1
-------------------------------------------------------------------------------
/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:90
...............................................................................

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  CHECK( status == StatusCode::SUCCESS )
with expansion:
  -1 == 0

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  {Unknown expression after the reported line}
due to unexpected exception with message:
  stod

0.000 s: randomForestWine_MaxV1
-------------------------------------------------------------------------------
randomForestWine_MaxV05
-------------------------------------------------------------------------------
/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:95
...............................................................................

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  CHECK( status == StatusCode::SUCCESS )
with expansion:
  -1 == 0

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  {Unknown expression after the reported line}
due to unexpected exception with message:
  stod

0.000 s: randomForestWine_MaxV05
-------------------------------------------------------------------------------
decisionTree_WineReg_MaxV1
-------------------------------------------------------------------------------
/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:99
...............................................................................

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  CHECK( status == StatusCode::SUCCESS )
with expansion:
  -1 == 0

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  {Unknown expression after the reported line}
due to unexpected exception with message:
  stod

0.000 s: decisionTree_WineReg_MaxV1
-------------------------------------------------------------------------------
decisionTree_WineReg_MaxV05
-------------------------------------------------------------------------------
/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:105
...............................................................................

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  CHECK( status == StatusCode::SUCCESS )
with expansion:
  -1 == 0

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  {Unknown expression after the reported line}
due to unexpected exception with message:
  stod

0.000 s: decisionTree_WineReg_MaxV05
-------------------------------------------------------------------------------
randomForestWineReg_MaxV1
-------------------------------------------------------------------------------
/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:110
...............................................................................

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  CHECK( status == StatusCode::SUCCESS )
with expansion:
  -1 == 0

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  {Unknown expression after the reported line}
due to unexpected exception with message:
  stod

0.000 s: randomForestWineReg_MaxV1
-------------------------------------------------------------------------------
randomForestWineReg_MaxV05
-------------------------------------------------------------------------------
/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:116
...............................................................................

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  CHECK( status == StatusCode::SUCCESS )
with expansion:
  -1 == 0

/daphne/test/api/cli/algorithms/DecisionTreeRandomForestTest.cpp:47: FAILED:
  {Unknown expression after the reported line}
due to unexpected exception with message:
  stod

0.000 s: randomForestWineReg_MaxV05
0.071 s: UserConfig.json
0.071 s: config success
0.062 s: test/parser/config/configFiles/UserConfig1.json
0.062 s: config success
0.061 s: test/parser/config/configFiles/UserConfig4.json
0.061 s: config success
0.059 s: test/parser/config/configFiles/UserConfig7.json
0.060 s: config success
0.009 s: test/parser/config/configFiles/UserConfig2.json
0.009 s: config failure
0.009 s: test/parser/config/configFiles/UserConfig3.txt
0.009 s: config failure
0.010 s: test/parser/config/configFiles/UserConfig5.json
0.010 s: config failure
0.009 s: test/parser/config/configFiles/UserConfig6.json
0.010 s: config failure
0.010 s: test/parser/config/configFiles/UserConfig8.json
0.010 s: config failure
0.011 s: test/parser/config/configFiles/UserConfig9.json
0.011 s: config failure
0.061 s: if_1.daphne
0.061 s: if
0.060 s: if_2.daphne
0.060 s: if
0.059 s: if_3.daphne
0.060 s: if
0.061 s: if_4.daphne
0.061 s: if
0.061 s: if_5.daphne
0.061 s: if
0.063 s: if_6.daphne
0.063 s: if
0.062 s: if_7.daphne
0.062 s: if
0.065 s: if_8.daphne
0.065 s: if
0.058 s: for_1.daphne
0.058 s: for
0.061 s: for_2.daphne
0.062 s: for
0.061 s: for_3.daphne
0.061 s: for
0.063 s: for_4.daphne
0.063 s: for
0.063 s: for_5.daphne
0.063 s: for
0.061 s: for_6.daphne
0.061 s: for
0.062 s: for_7.daphne
0.062 s: for
0.063 s: for_8.daphne
0.063 s: for
0.087 s: for_9.daphne
0.087 s: for
0.078 s: for_10.daphne
0.078 s: for
0.071 s: for_11.daphne
0.071 s: for
0.068 s: for_12.daphne
0.068 s: for
0.071 s: for_13.daphne
0.071 s: for
0.066 s: for_14.daphne
0.066 s: for
0.067 s: for_15.daphne
0.067 s: for
0.081 s: for_16.daphne
0.081 s: for
0.074 s: for_17.daphne
0.074 s: for
0.069 s: for_18.daphne
0.069 s: for
0.070 s: for_19.daphne
0.070 s: for
0.067 s: for_20.daphne
0.067 s: for
0.063 s: for_21.daphne
0.063 s: for
0.070 s: for_22.daphne
0.070 s: for
0.071 s: for_23.daphne
0.071 s: for
0.067 s: while_1.daphne
0.067 s: while
0.070 s: while_2.daphne
0.070 s: while
0.067 s: while_3.daphne
0.068 s: while
0.065 s: while_4.daphne
0.065 s: while
0.067 s: while_5.daphne
0.067 s: while
0.077 s: while_6.daphne
0.077 s: while
0.075 s: while_7.daphne
0.075 s: while
0.070 s: while_8.daphne
0.070 s: while
0.065 s: while_9.daphne
0.065 s: while
0.066 s: while_10.daphne
0.066 s: while
0.070 s: while_11.daphne
0.071 s: while
0.067 s: while_12.daphne
0.067 s: while
0.073 s: while_13.daphne
0.073 s: while
0.073 s: while_14.daphne
0.073 s: while
0.070 s: while_15.daphne
0.070 s: while
0.069 s: while_16.daphne
0.069 s: while
0.069 s: nested_1.daphne
0.069 s: nested
0.066 s: nested_2.daphne
0.066 s: nested
0.072 s: nested_3.daphne
0.072 s: nested
0.071 s: nested_4.daphne
0.071 s: nested
0.083 s: nested_5.daphne
0.083 s: nested
0.076 s: nested_6.daphne
0.077 s: nested
0.064 s: nested_7.daphne
0.064 s: nested
0.061 s: nested_8.daphne
0.062 s: nested
0.062 s: nested_9.daphne
0.062 s: nested
0.062 s: nested_10.daphne
0.062 s: nested
0.062 s: nested_11.daphne
0.062 s: nested
0.062 s: nested_12.daphne
0.062 s: nested
0.059 s: nested_13.daphne
0.060 s: nested
0.060 s: nested_14.daphne
0.061 s: nested
0.063 s: nested_15.daphne
0.063 s: nested
0.060 s: nested_16.daphne
0.060 s: nested
0.073 s: nested_17.daphne
0.073 s: nested
0.067 s: nested_18.daphne
0.067 s: nested
0.066 s: nested_19.daphne
0.066 s: nested
0.063 s: nested_20.daphne
0.063 s: nested
0.064 s: nested_21.daphne
0.064 s: nested
0.066 s: nested_22.daphne
0.066 s: nested
0.064 s: nested_23.daphne
0.064 s: nested
0.064 s: nested_24.daphne
0.064 s: nested
0.063 s: nested_25.daphne
0.064 s: nested
0.064 s: nested_26.daphne
0.064 s: nested
0.063 s: stop_1.daphne
0.063 s: stop, controlflow failure
0.059 s: stop_2.daphne
0.059 s: stop, controlflow failure
-------------------------------------------------------------------------------
Distributed runtime tests using gRPC
  Execution of scripts using distributed runtime (gRPC)
-------------------------------------------------------------------------------
/daphne/test/api/cli/distributed/DistributedTest.cpp:44
...............................................................................

/daphne/test/api/cli/distributed/DistributedTest.cpp:62: FAILED:
  CHECK( errDist.str() == "" )
with expansion:
  "terminate called after throwing an instance of 'std::runtime_error'
  terminate called recursively
    what():  failed to connect to all addresses
  daphne: ../nptl/pthread_mutex_lock.c:81: __pthread_mutex_cond_lock: Assertion
  `mutex->__data.__owner == 0' failed.
  "
  ==
  ""

/daphne/test/api/cli/distributed/DistributedTest.cpp:63: FAILED:
  REQUIRE( status == StatusCode::SUCCESS )
with expansion:
  -1 == 0

0.154 s: Execution of scripts using distributed runtime (gRPC)
0.000 s: Distributed runtime tests using gRPC
3.188 s: Distributed chunked messages (gRPC)
3.194 s: Distributed runtime tests using gRPC
0.065 s: cast_obj_obj_1.daphne
0.065 s: cast_obj_obj
0.065 s: cast_obj_sca_1.daphne
0.065 s: cast_obj_sca
0.062 s: cast_sca_obj_1.daphne
0.062 s: cast_sca_obj
0.077 s: cond_success_1.daphne
0.077 s: cond, success
0.084 s: cond_success_2.daphne
0.084 s: cond, success
0.062 s: cond_failure_1.daphne
0.062 s: cond, failure
0.063 s: cond_failure_2.daphne
0.063 s: cond, failure
0.027 s: cond_failure_3.daphne
0.027 s: cond, failure
0.026 s: cond_failure_4.daphne
0.026 s: cond, failure
0.065 s: frame_literal_success_1.daphne
0.066 s: frame_literal, success
0.063 s: frame_literal_success_2.daphne
0.064 s: frame_literal, success
0.068 s: frame_literal_success_3.daphne
0.068 s: frame_literal, success
0.067 s: frame_literal_success_4.daphne
0.067 s: frame_literal, success
0.069 s: frame_literal_success_5.daphne
0.069 s: frame_literal, success
0.069 s: frame_literal_success_6.daphne
0.069 s: frame_literal, success
0.025 s: frame_literal_failure_1.daphne
0.025 s: frame_literal, failure
0.024 s: frame_literal_failure_2.daphne
0.025 s: frame_literal, failure
0.024 s: frame_literal_failure_3.daphne
0.024 s: frame_literal, failure
0.066 s: matrix_literal_success_1.daphne
0.066 s: matrix_literal, success
0.065 s: matrix_literal_success_2.daphne
0.065 s: matrix_literal, success
0.062 s: matrix_literal_success_3.daphne
0.062 s: matrix_literal, success
0.062 s: matrix_literal_success_4.daphne
0.063 s: matrix_literal, success
0.063 s: matrix_literal_success_5.daphne
0.063 s: matrix_literal, success
0.067 s: matrix_literal_success_6.daphne
0.067 s: matrix_literal, success
0.096 s: matrix_literal_success_7.daphne
0.096 s: matrix_literal, success
0.023 s: matrix_literal_failure_1.daphne
0.023 s: matrix_literal, failure
0.025 s: matrix_literal_failure_2.daphne
0.025 s: matrix_literal, failure
0.717 s: extension_kernel
0.026 s: hint_kernel_failure_1.daphne
0.026 s: hint_kernel, failure
0.025 s: hint_kernel_failure_2.daphne
0.025 s: hint_kernel, failure
0.026 s: hint_kernel_failure_3.daphne
0.026 s: hint_kernel, failure
0.059 s: hint_kernel_success_1.daphne
0.059 s: hint_kernel, success
0.059 s: hint_kernel_success_2.daphne
0.059 s: hint_kernel, success
0.061 s: hint_kernel_success_3.daphne
0.061 s: hint_kernel, success
0.059 s: hint_kernel_success_1.daphne, hint presence
0.063 s: hint_kernel_success_2.daphne, hint presence
0.065 s: hint_kernel_success_3.daphne, hint presence
0.125 s: basic_1.daphne
0.125 s: basic
0.127 s: basic_2.daphne
0.128 s: basic
0.120 s: basic_3.daphne
0.121 s: basic
0.133 s: typed_1.daphne
0.133 s: typed
0.129 s: typed_2.daphne
0.130 s: typed
0.127 s: typed_3.daphne
0.127 s: typed
0.076 s: typed_4.daphne
0.076 s: typed
0.074 s: typed_5.daphne
0.074 s: typed
0.128 s: untyped_1.daphne
0.128 s: untyped
0.128 s: untyped_2.daphne
0.128 s: untyped
0.137 s: untyped_3.daphne
0.137 s: untyped
0.138 s: untyped_4.daphne
0.138 s: untyped
0.141 s: mixtyped_1.daphne
0.141 s: mixtyped
0.132 s: mixtyped_2.daphne
0.132 s: mixtyped
0.099 s: early_return_1.daphne
0.099 s: early_return
0.071 s: early_return_2.daphne
0.071 s: early_return
0.078 s: early_return_3.daphne
0.078 s: early_return
0.025 s: invalid_parser_1.daphne
0.025 s: invalid_parser
0.024 s: invalid_parser_2.daphne
0.024 s: invalid_parser
0.026 s: invalid_parser_3.daphne
0.026 s: invalid_parser
0.024 s: invalid_parser_4.daphne
0.024 s: invalid_parser
0.024 s: invalid_parser_5.daphne
0.024 s: invalid_parser
0.025 s: invalid_parser_6.daphne
0.025 s: invalid_parser
0.024 s: invalid_parser_7.daphne
0.024 s: invalid_parser
0.024 s: invalid_parser_8.daphne
0.025 s: invalid_parser
0.025 s: invalid_parser_9.daphne
0.025 s: invalid_parser
0.024 s: invalid_parser_10.daphne
0.024 s: invalid_parser
0.024 s: invalid_parser_11.daphne
0.024 s: invalid_parser
0.068 s: basic_recursion_1.daphne
0.068 s: basic_recursion
0.066 s: readFrameFromCSV
0.065 s: readMatrixFromCSV
0.122 s: writeMatrixCSV_Full
0.132 s: writeMatrixCSV_View
0.079 s: import_success_1.daphne
0.079 s: import, success
0.059 s: import_success_2.daphne
0.059 s: import, success
0.061 s: import_success_3.daphne
0.061 s: import, success
0.090 s: import_success_4.daphne
0.090 s: import, success
0.073 s: import_success_5.daphne
0.073 s: import, success
0.024 s: import_failure_1.daphne
0.024 s: import, failure
0.024 s: import_failure_2.daphne
0.024 s: import, failure
0.024 s: import_failure_3.daphne
0.024 s: import, failure
0.024 s: import_failure_4.daphne
0.024 s: import, failure
0.024 s: import_failure_5.daphne
0.024 s: import, failure
0.146 s: right_indexing_success_1.daphne
0.146 s: right_indexing, success
0.145 s: right_indexing_success_2.daphne
0.145 s: right_indexing, success
0.070 s: right_indexing_success_3.daphne
0.070 s: right_indexing, success
0.072 s: right_indexing_success_4.daphne
0.072 s: right_indexing, success
0.236 s: right_indexing_success_5.daphne
0.236 s: right_indexing, success
0.024 s: right_indexing_failure_1.daphne
0.024 s: right_indexing, failure
0.024 s: right_indexing_failure_2.daphne
0.024 s: right_indexing, failure
0.024 s: right_indexing_failure_3.daphne
0.024 s: right_indexing, failure
0.024 s: right_indexing_failure_4.daphne
0.025 s: right_indexing, failure
0.027 s: right_indexing_failure_5.daphne
0.027 s: right_indexing, failure
0.028 s: right_indexing_failure_6.daphne
0.028 s: right_indexing, failure
0.061 s: right_indexing_failure_7.daphne
0.061 s: right_indexing, failure
0.061 s: right_indexing_failure_8.daphne
0.061 s: right_indexing, failure
0.061 s: right_indexing_failure_9.daphne
0.061 s: right_indexing, failure
0.063 s: right_indexing_failure_10.daphne
0.063 s: right_indexing, failure
0.160 s: left_indexing_success_1.daphne
0.160 s: left_indexing, success
0.077 s: left_indexing_success_2.daphne
0.077 s: left_indexing, success
0.062 s: left_indexing_cow_success_1.daphne
0.062 s: left_indexing_cow, success
0.064 s: left_indexing_cow_success_2.daphne
0.064 s: left_indexing_cow, success
0.064 s: left_indexing_cow_success_3.daphne
0.064 s: left_indexing_cow, success
0.061 s: left_indexing_cow_success_4.daphne
0.061 s: left_indexing_cow, success
0.064 s: left_indexing_cow_success_5.daphne
0.064 s: left_indexing_cow, success
0.063 s: left_indexing_cow_success_6.daphne
0.063 s: left_indexing_cow, success
0.065 s: left_indexing_cow_success_7.daphne
0.065 s: left_indexing_cow, success
0.075 s: left_indexing_cow_success_8.daphne
0.075 s: left_indexing_cow, success
0.027 s: left_indexing_failure_1.daphne
0.028 s: left_indexing, failure
0.039 s: left_indexing_failure_2.daphne
0.039 s: left_indexing, failure
0.026 s: left_indexing_failure_3.daphne
0.026 s: left_indexing, failure
0.026 s: left_indexing_failure_4.daphne
0.026 s: left_indexing, failure
0.028 s: left_indexing_failure_5.daphne
0.029 s: left_indexing, failure
0.029 s: left_indexing_failure_6.daphne
0.029 s: left_indexing, failure
0.067 s: left_indexing_failure_7.daphne
0.067 s: left_indexing, failure
0.072 s: if_success_1.daphne
0.072 s: if, inference success
0.077 s: if_success_2.daphne
0.077 s: if, inference success
0.070 s: if_success_3.daphne
0.070 s: if, inference success
0.064 s: if_success_4.daphne
0.064 s: if, inference success
0.070 s: if_success_5.daphne
0.070 s: if, inference success
0.069 s: if_success_6.daphne
0.069 s: if, inference success
0.070 s: if_success_7.daphne
0.070 s: if, inference success
0.073 s: if_success_8.daphne
0.073 s: if, inference success
0.025 s: if_failure_1.daphne
0.025 s: if, inference failure
0.063 s: for_success_1.daphne
0.063 s: for, inference success
0.083 s: for_success_2.daphne
0.083 s: for, inference success
0.067 s: for_success_3.daphne
0.067 s: for, inference success
0.077 s: for_success_4.daphne
0.077 s: for, inference success
0.068 s: for_success_5.daphne
0.068 s: for, inference success
0.067 s: for_success_6.daphne
0.067 s: for, inference success
0.066 s: for_success_7.daphne
0.066 s: for, inference success
0.078 s: for_success_8.daphne
0.078 s: for, inference success
0.028 s: for_failure_1.daphne
0.028 s: for, inference failure
0.075 s: while_success_1.daphne
0.075 s: while, inference success
0.072 s: while_success_2.daphne
0.072 s: while, inference success
0.070 s: while_success_3.daphne
0.070 s: while, inference success
0.074 s: while_success_4.daphne
0.074 s: while, inference success
0.073 s: while_success_5.daphne
0.073 s: while, inference success
0.072 s: while_success_6.daphne
0.072 s: while, inference success
0.067 s: while_success_7.daphne
0.068 s: while, inference success
0.076 s: while_success_8.daphne
0.076 s: while, inference success
0.028 s: while_failure_1.daphne
0.028 s: while, inference failure
0.069 s: complex_success_1.daphne
0.069 s: complex, inference success
0.061 s: int_success_1.daphne
0.062 s: int
0.060 s: int_success_2.daphne
0.060 s: int
0.070 s: int_success_3.daphne
0.071 s: int
0.068 s: int_success_4.daphne
0.068 s: int
0.067 s: int_success_5.daphne
0.067 s: int
0.067 s: int_success_6.daphne
0.067 s: int
0.065 s: int_success_7.daphne
0.065 s: int
0.066 s: int_success_8.daphne
0.066 s: int
0.082 s: float_success_1.daphne
0.082 s: float
0.066 s: float_success_2.daphne
0.066 s: float
0.065 s: float_success_3.daphne
0.065 s: float
0.068 s: float_success_4.daphne
0.068 s: float
0.066 s: float_success_5.daphne
0.066 s: float
0.065 s: float_success_6.daphne
0.065 s: float
0.064 s: float_success_7.daphne
0.065 s: float
0.063 s: float_success_8.daphne
0.063 s: float
0.063 s: float_success_9.daphne
0.063 s: float
0.067 s: float_success_10.daphne
0.068 s: float
0.061 s: float_success_11.daphne
0.061 s: float
0.062 s: bool_success_1.daphne
0.062 s: bool
0.062 s: bool_success_2.daphne
0.062 s: bool
0.065 s: string_success_1.daphne
0.065 s: string
0.074 s: string_success_2.daphne
0.074 s: string
0.064 s: string_success_3.daphne
0.064 s: string
0.025 s: float_failure_1.daphne
0.025 s: float, failure
0.024 s: float_failure_2.daphne
0.024 s: float, failure
0.024 s: float_failure_3.daphne
0.024 s: float, failure
0.026 s: float_failure_4.daphne
0.026 s: float, failure
0.023 s: float_failure_5.daphne
0.023 s: float, failure
0.070 s: constantFolding_1.daphne
0.070 s: constantFolding
0.062 s: constantFolding_2.daphne
0.062 s: constantFolding
0.070 s: aggMax_1.daphne
0.070 s: aggMax
0.072 s: aggMin_1.daphne
0.072 s: aggMin
0.065 s: bin_1.daphne
0.066 s: bin
0.075 s: bin_2.daphne
0.075 s: bin
0.074 s: cbind_1.daphne
0.074 s: cbind
0.069 s: createFrame_1.daphne
0.069 s: createFrame
0.106 s: ctable_1.daphne
0.106 s: ctable
0.065 s: gemv_1.daphne
0.065 s: gemv
0.067 s: idxMax_1.daphne
0.067 s: idxMax
0.068 s: idxMin_1.daphne
0.068 s: idxMin
0.068 s: mean_1.daphne
0.068 s: mean
0.067 s: operator_at_1.daphne
0.067 s: operator_at
0.078 s: operator_at_2.daphne
0.078 s: operator_at
0.059 s: operator_eq_1.daphne
0.059 s: operator_eq
0.064 s: operator_eq_2.daphne
0.064 s: operator_eq
0.074 s: operator_minus_1.daphne
0.074 s: operator_minus
0.081 s: operator_plus_1.daphne
0.082 s: operator_plus
0.076 s: operator_plus_2.daphne
0.076 s: operator_plus
0.076 s: operator_slash_1.daphne
0.076 s: operator_slash
0.075 s: operator_times_1.daphne
0.075 s: operator_times
0.067 s: order_1.daphne
0.067 s: order
0.067 s: rbind_1.daphne
0.067 s: rbind
0.064 s: recode_1.daphne
0.064 s: recode
0.069 s: recode_2.daphne
0.069 s: recode
0.064 s: recode_3.daphne
0.064 s: recode
0.065 s: replace_1.daphne
0.065 s: replace
0.064 s: seq_1.daphne
0.064 s: seq
0.068 s: seq_2.daphne
0.068 s: seq
0.066 s: solve_1.daphne
0.066 s: solve
0.068 s: sqrt_1.daphne
0.068 s: sqrt
0.072 s: sum_1.daphne
0.073 s: sum
0.065 s: syrk_1.daphne
0.065 s: syrk
0.028 s: Parse file in DML, write and re-read as DaphneIR
0.000 s: Proper meta data file for Matrix
0.000 s: Proper meta data file for Frame
0.000 s: Meta data file mising "numRows" key
0.000 s: Meta data file mising "numCols" key
0.000 s: Matrix meta data file missing "valueType" key
0.000 s: Meta data file without "numNonZeros" key
0.000 s: A non existing meta data file passed to the method
0.000 s: Frame meta data file without "label" keys
0.000 s: Frame meta data file with default "valueType"
0.001 s: Write proper meta data file for Matrix - DenseMatrix<double>
0.000 s: Write proper meta data file for Matrix - CSRMatrix<double>
0.000 s: Write proper meta data file for Frame
0.059 s: block_success_1.daphne
0.059 s: block, success
0.061 s: block_success_2.daphne
0.061 s: block, success
0.063 s: block_success_3.daphne
0.063 s: block, success
0.024 s: block_failure_1.daphne
0.024 s: block, failure
0.024 s: block_failure_2.daphne
0.024 s: block, failure
0.024 s: if_failure_1.daphne
0.024 s: if, failure
0.024 s: if_failure_2.daphne
0.024 s: if, failure
0.024 s: if_failure_3.daphne
0.024 s: if, failure
0.024 s: for_failure_1.daphne
0.024 s: for, failure
0.025 s: for_failure_2.daphne
0.025 s: for, failure
0.025 s: while_failure_1.daphne
0.025 s: while, failure
0.025 s: while_failure_2.daphne
0.025 s: while, failure
0.249 s: Print single script argument
0.049 s: Missing script argument
0.061 s: Superfluous script argument
0.011 s: Duplicate script argument
0.062 s: only after script file
0.062 s: Ways of specifying script arguments
0.061 s: only via --args
0.061 s: Ways of specifying script arguments
0.062 s: mixed
0.062 s: Ways of specifying script arguments
0.070 s: map_1.daphne
0.070 s: map
0.068 s: map_2.daphne
0.069 s: map
0.454 s: map_3.daphne
0.454 s: map
0.028 s: map_failure_1.daphne
0.028 s: map, failure
0.027 s: map_failure_2.daphne
0.028 s: map, failure
0.029 s: map_failure_3.daphne
0.029 s: map, failure
0.027 s: map_failure_4.daphne
0.027 s: map, failure
0.032 s: map_failure_5.daphne
0.032 s: map, failure
0.076 s: basic_success_1.daphne
0.076 s: basic, success
0.070 s: basic_success_2.daphne
0.070 s: basic, success
0.075 s: basic_success_3.daphne
0.075 s: basic, success
0.069 s: basic_success_4.daphne
0.069 s: basic, success
0.027 s: basic_pass_failure_1.daphne
0.027 s: basic, pass failure
0.026 s: basic_pass_failure_2.daphne
0.026 s: basic, pass failure
0.026 s: basic_pass_failure_3.daphne
0.026 s: basic, pass failure
0.065 s: basic_execution_failure_1.daphne
0.065 s: basic, execution failure
0.067 s: cartesian_success_1.daphne
0.068 s: cartesian, success
0.077 s: cartesian_success_2.daphne
0.077 s: cartesian, success
0.069 s: where_success_1.daphne
0.069 s: where, success
0.070 s: where_success_2.daphne
0.071 s: where, success
0.071 s: where_success_3.daphne
0.071 s: where, success
0.070 s: where_success_4.daphne
0.070 s: where, success
0.070 s: join_success_1.daphne
0.070 s: join, success
0.073 s: group_success_1.daphne
0.073 s: group, success
0.077 s: group_success_2.daphne
0.077 s: group, success
0.072 s: group_success_3.daphne
0.072 s: group, success
0.027 s: group_pass_failure_1.daphne
0.027 s: group, pass failure
0.072 s: group_1.daphne
0.072 s: group
0.065 s: group_2.daphne
0.065 s: group
0.066 s: group_3.daphne
0.066 s: group
0.068 s: group_4.daphne
0.068 s: group
0.069 s: group_5.daphne
0.069 s: group
0.071 s: thetaJoin_equal_1.daphne
0.071 s: thetaJoin_equal
0.071 s: thetaJoin_equal_2.daphne
0.072 s: thetaJoin_equal
0.068 s: thetaJoin_equal_3.daphne
0.068 s: thetaJoin_equal
0.066 s: thetaJoin_equal_4.daphne
0.066 s: thetaJoin_equal
0.072 s: thetaJoin_greaterThan_1.daphne
0.072 s: thetaJoin_greaterThan
0.070 s: thetaJoin_greaterThan_2.daphne
0.070 s: thetaJoin_greaterThan
0.074 s: thetaJoin_greaterEqual_1.daphne
0.075 s: thetaJoin_greaterEqual
0.073 s: thetaJoin_greaterEqual_2.daphne
0.073 s: thetaJoin_greaterEqual
0.072 s: thetaJoin_lessThan_1.daphne
0.073 s: thetaJoin_lessThan
0.073 s: thetaJoin_lessThan_2.daphne
0.073 s: thetaJoin_lessThan
0.072 s: thetaJoin_lessEqual_1.daphne
0.072 s: thetaJoin_lessEqual
0.072 s: thetaJoin_lessEqual_2.daphne
0.072 s: thetaJoin_lessEqual
0.071 s: thetaJoin_notEqual_1.daphne
0.071 s: thetaJoin_notEqual
0.071 s: thetaJoin_notEqual_2.daphne
0.071 s: thetaJoin_notEqual
0.077 s: thetaJoin_combinedCompare_1.daphne
0.077 s: thetaJoin_combinedCompare
0.077 s: thetaJoin_combinedCompare_2.daphne
0.077 s: thetaJoin_combinedCompare
0.065 s: agg_avg_1.daphne
0.065 s: agg_avg
0.064 s: agg_count_1.daphne
0.064 s: agg_count
0.063 s: agg_max_1.daphne
0.063 s: agg_max
0.065 s: agg_max_2.daphne
0.065 s: agg_max
0.064 s: agg_min_1.daphne
0.064 s: agg_min
0.063 s: agg_min_2.daphne
0.063 s: agg_min
0.065 s: agg_multiple_1.daphne
0.065 s: agg_multiple
0.067 s: agg_multiple_2.daphne
0.067 s: agg_multiple
0.064 s: agg_sum_1.daphne
0.064 s: agg_sum
0.063 s: reuseString_1.daphne
0.063 s: reuseString
0.062 s: reuseString_2.daphne
0.062 s: reuseString
0.062 s: select_asterisk_1.daphne
0.062 s: select_asterisk
0.065 s: select_asterisk_2.daphne
0.065 s: select_asterisk
0.066 s: select_asterisk_3.daphne
0.066 s: select_asterisk
0.074 s: select_asterisk_4.daphne
0.074 s: select_asterisk
0.067 s: select_asterisk_5.daphne
0.067 s: select_asterisk
0.066 s: select_asterisk_6.daphne
0.066 s: select_asterisk
0.065 s: distinct_1.daphne
0.065 s: distinct
0.067 s: distinct_2.daphne
0.068 s: distinct
0.067 s: distinct_3.daphne
0.067 s: distinct
0.066 s: distinct_4.daphne
0.066 s: distinct
0.023 s: general_failure_1.daphne
0.023 s: general, invalid syntax
0.023 s: general_failure_2.daphne
0.023 s: general, invalid syntax
0.023 s: general_failure_3.daphne
0.023 s: general, invalid syntax
0.023 s: general_failure_4.daphne
0.024 s: general, invalid syntax
0.023 s: general_failure_5.daphne
0.023 s: general, invalid syntax
0.023 s: general_failure_6.daphne
0.023 s: general, invalid syntax
0.024 s: general_failure_7.daphne
0.024 s: general, invalid syntax
0.219 s: runMatMult
0.325 s: runEwUnary
2.083 s: runEwBinary
0.173 s: runEwBinarySparse
0.214 s: runRowAgg
0.208 s: runColAgg
0.077 s: runColAggSparse
0.265 s: runIndexing
0.460 s: runReorganization
0.355 s: runOther
0.203 s: test/api/cli/vectorized/pipeline_1.daphne
0.204 s: pipeline
0.204 s: test/api/cli/vectorized/pipeline_2.daphne
0.204 s: pipeline
-------------------------------------------------------------------------------
pipeline
  test/api/cli/vectorized/pipeline_3.daphne
-------------------------------------------------------------------------------
/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:68
...............................................................................

/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:47: FAILED:
  CHECK( statusVR == StatusCode::SUCCESS )
with expansion:
  2 == 0

/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:51: FAILED:
  CHECK( generalizeDataTypes(outNN.str()) == generalizeDataTypes(outVR.str()) )
with expansion:
  "<SomeMatrix>(3x3, double)
  2 2 2
  2 2 2
  2 2 2
  <SomeMatrix>(3x3, double)
  3 3 3
  3 3 3
  3 3 3
  "
  ==
  "[error]: Lowering pipeline error.[38;2;120;137;
  251mRewriteToCallKernelOpPass[0m failed with the following message [ [38;2;
  247;1;70mno kernel for operation `fill` available for the required input
  types `(f64, index, index)` and output types `(!daphne.Matrix<?x?xf64:rep
  [sparse]>)` for backend `CPP`, registered kernels for this op:
  KernelCatalog (150 ops, 1524 kernels)
  - operation `fill` (6 kernels)
    - kernel `_fill__<SomeMatrix>_float__float__size_t__size_t`: (f32, index,
  index) -> (!daphne.Matrix<?x?xf32>) for backend `CPP` (in `/daphne/bin/../
  lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_double__double__size_t__size_t`: (f64, index,
  index) -> (!daphne.Matrix<?x?xf64>) for backend `CPP` (in `/daphne/bin/../
  lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_int64_t__int64_t__size_t__size_t`: (si64,
  index, index) -> (!daphne.Matrix<?x?xsi64>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_uint64_t__uint64_t__size_t__size_t`: (ui64,
  index, index) -> (!daphne.Matrix<?x?xui64>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_uint8_t__uint8_t__size_t__size_t`: (ui8,
  index, index) -> (!daphne.Matrix<?x?xui8>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_bool__bool__size_t__size_t`: (i1, index,
  index) -> (!daphne.Matrix<?x?xi1>) for backend `CPP` (in `/daphne/bin/../lib/
  libAllKernels.so`)
  [0m ]
     [38;2;120;137;251m | [0mSource file -> "/daphne/test/api/cli/vectorized/
  pipeline_3.daphne":3:4
     [38;2;120;137;251m | [0m
  [38;2;120;137;251m  3 | [0mm = fill(1.0, 3, 3);
     [38;2;120;137;251m | [38;2;247;1;70m    ^~~[0m
  

  PassManager failed module lowering, responsible IR written to module_fail.
  log.
  
"

0.156 s: test/api/cli/vectorized/pipeline_3.daphne
0.156 s: pipeline
-------------------------------------------------------------------------------
pipeline
  test/api/cli/vectorized/pipeline_4.daphne
-------------------------------------------------------------------------------
/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:68
...............................................................................

/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:47: FAILED:
  CHECK( statusVR == StatusCode::SUCCESS )
with expansion:
  2 == 0

/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:51: FAILED:
  CHECK( generalizeDataTypes(outNN.str()) == generalizeDataTypes(outVR.str()) )
with expansion:
  "<SomeMatrix>(3x3, double)
  2 2 2
  2 2 2
  2 2 2
  <SomeMatrix>(3x3, double)
  3 3 3
  3 3 3
  3 3 3
  "
  ==
  "[error]: Lowering pipeline error.[38;2;120;137;
  251mRewriteToCallKernelOpPass[0m failed with the following message [ [38;2;
  247;1;70mno kernel for operation `fill` available for the required input
  types `(f64, index, index)` and output types `(!daphne.Matrix<?x?xf64:rep
  [sparse]>)` for backend `CPP`, registered kernels for this op:
  KernelCatalog (150 ops, 1524 kernels)
  - operation `fill` (6 kernels)
    - kernel `_fill__<SomeMatrix>_float__float__size_t__size_t`: (f32, index,
  index) -> (!daphne.Matrix<?x?xf32>) for backend `CPP` (in `/daphne/bin/../
  lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_double__double__size_t__size_t`: (f64, index,
  index) -> (!daphne.Matrix<?x?xf64>) for backend `CPP` (in `/daphne/bin/../
  lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_int64_t__int64_t__size_t__size_t`: (si64,
  index, index) -> (!daphne.Matrix<?x?xsi64>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_uint64_t__uint64_t__size_t__size_t`: (ui64,
  index, index) -> (!daphne.Matrix<?x?xui64>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_uint8_t__uint8_t__size_t__size_t`: (ui8,
  index, index) -> (!daphne.Matrix<?x?xui8>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_bool__bool__size_t__size_t`: (i1, index,
  index) -> (!daphne.Matrix<?x?xi1>) for backend `CPP` (in `/daphne/bin/../lib/
  libAllKernels.so`)
  [0m ]
     [38;2;120;137;251m | [0mSource file -> "/daphne/test/api/cli/vectorized/
  pipeline_4.daphne":3:4
     [38;2;120;137;251m | [0m
  [38;2;120;137;251m  3 | [0mm = fill(1.0, 3, 3);
     [38;2;120;137;251m | [38;2;247;1;70m    ^~~[0m
  

  PassManager failed module lowering, responsible IR written to module_fail.
  log.
  
"

0.160 s: test/api/cli/vectorized/pipeline_4.daphne
0.160 s: pipeline
-------------------------------------------------------------------------------
pipeline
  test/api/cli/vectorized/pipeline_5.daphne
-------------------------------------------------------------------------------
/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:68
...............................................................................

/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:47: FAILED:
  CHECK( statusVR == StatusCode::SUCCESS )
with expansion:
  2 == 0

/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:51: FAILED:
  CHECK( generalizeDataTypes(outNN.str()) == generalizeDataTypes(outVR.str()) )
with expansion:
  "<SomeMatrix>(3x3, double)
  124 124 124
  124 124 124
  124 124 124
  "
  ==
  "[error]: Lowering pipeline error.[38;2;120;137;
  251mRewriteToCallKernelOpPass[0m failed with the following message [ [38;2;
  247;1;70mno kernel for operation `fill` available for the required input
  types `(f64, index, index)` and output types `(!daphne.Matrix<?x?xf64:rep
  [sparse]>)` for backend `CPP`, registered kernels for this op:
  KernelCatalog (150 ops, 1524 kernels)
  - operation `fill` (6 kernels)
    - kernel `_fill__<SomeMatrix>_float__float__size_t__size_t`: (f32, index,
  index) -> (!daphne.Matrix<?x?xf32>) for backend `CPP` (in `/daphne/bin/../
  lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_double__double__size_t__size_t`: (f64, index,
  index) -> (!daphne.Matrix<?x?xf64>) for backend `CPP` (in `/daphne/bin/../
  lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_int64_t__int64_t__size_t__size_t`: (si64,
  index, index) -> (!daphne.Matrix<?x?xsi64>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_uint64_t__uint64_t__size_t__size_t`: (ui64,
  index, index) -> (!daphne.Matrix<?x?xui64>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_uint8_t__uint8_t__size_t__size_t`: (ui8,
  index, index) -> (!daphne.Matrix<?x?xui8>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_bool__bool__size_t__size_t`: (i1, index,
  index) -> (!daphne.Matrix<?x?xi1>) for backend `CPP` (in `/daphne/bin/../lib/
  libAllKernels.so`)
  [0m ]
     [38;2;120;137;251m | [0mSource file -> "/daphne/test/api/cli/vectorized/
  pipeline_5.daphne":2:4
     [38;2;120;137;251m | [0m
  [38;2;120;137;251m  2 | [0mx = fill(as.f64(123.0), 3, 3);
     [38;2;120;137;251m | [38;2;247;1;70m    ^~~[0m
  

  PassManager failed module lowering, responsible IR written to module_fail.
  log.
  
"

0.157 s: test/api/cli/vectorized/pipeline_5.daphne
0.157 s: pipeline
-------------------------------------------------------------------------------
pipeline
  test/api/cli/vectorized/pipeline_6.daphne
-------------------------------------------------------------------------------
/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:68
...............................................................................

/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:47: FAILED:
  CHECK( statusVR == StatusCode::SUCCESS )
with expansion:
  2 == 0

/daphne/test/api/cli/vectorized/VectorizedPipelineTest.cpp:51: FAILED:
  CHECK( generalizeDataTypes(outNN.str()) == generalizeDataTypes(outVR.str()) )
with expansion:
  "<SomeMatrix>(3x3, float)
  124 124 124
  124 124 124
  124 124 124
  "
  ==
  "[error]: Lowering pipeline error.[38;2;120;137;
  251mRewriteToCallKernelOpPass[0m failed with the following message [ [38;2;
  247;1;70mno kernel for operation `fill` available for the required input
  types `(f32, index, index)` and output types `(!daphne.Matrix<?x?xf32:rep
  [sparse]>)` for backend `CPP`, registered kernels for this op:
  KernelCatalog (150 ops, 1524 kernels)
  - operation `fill` (6 kernels)
    - kernel `_fill__<SomeMatrix>_float__float__size_t__size_t`: (f32, index,
  index) -> (!daphne.Matrix<?x?xf32>) for backend `CPP` (in `/daphne/bin/../
  lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_double__double__size_t__size_t`: (f64, index,
  index) -> (!daphne.Matrix<?x?xf64>) for backend `CPP` (in `/daphne/bin/../
  lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_int64_t__int64_t__size_t__size_t`: (si64,
  index, index) -> (!daphne.Matrix<?x?xsi64>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_uint64_t__uint64_t__size_t__size_t`: (ui64,
  index, index) -> (!daphne.Matrix<?x?xui64>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_uint8_t__uint8_t__size_t__size_t`: (ui8,
  index, index) -> (!daphne.Matrix<?x?xui8>) for backend `CPP` (in `/daphne/
  bin/../lib/libAllKernels.so`)
    - kernel `_fill__<SomeMatrix>_bool__bool__size_t__size_t`: (i1, index,
  index) -> (!daphne.Matrix<?x?xi1>) for backend `CPP` (in `/daphne/bin/../lib/
  libAllKernels.so`)
  [0m ]
     [38;2;120;137;251m | [0mSource file -> "/daphne/test/api/cli/vectorized/
  pipeline_6.daphne":2:4
     [38;2;120;137;251m | [0m
  [38;2;120;137;251m  2 | [0mx = fill(as.f32(123.0), 3, 3);
     [38;2;120;137;251m | [38;2;247;1;70m    ^~~[0m
  

  PassManager failed module lowering, responsible IR written to module_fail.
  log.
  
"

0.157 s: test/api/cli/vectorized/pipeline_6.daphne
0.157 s: pipeline
0.201 s: test/api/cli/vectorized/pipeline_7.daphne
0.201 s: pipeline
0.835 s: data_transfer_numpy_1.py
0.393 s: data_transfer_numpy_2.py
0.404 s: data_transfer_pandas_1.py
0.403 s: data_transfer_pandas_2.py
0.385 s: data_transfer_pandas_3_series.py
0.408 s: data_transfer_pandas_4_sparse_dataframe.py
0.427 s: data_transfer_pandas_5_categorical_dataframe.py
0.000 s: data_transfer_pytorch_1.py
0.000 s: data_transfer_tensorflow_1.py
0.432 s: frame_innerJoin.py
0.397 s: frame_setColLabels.py
0.399 s: frame_setColLabelsPrefix.py
0.387 s: frame_to_matrix.py
0.389 s: random_matrix_generation.py
0.394 s: random_matrix_sum.py
0.381 s: random_matrix_addition.py
0.387 s: random_matrix_subtraction.py
0.383 s: random_matrix_mult.py
0.380 s: random_matrix_div.py
0.449 s: random_matrix_functions.py
0.600 s: context_datagen.py
0.506 s: scalar_ops.py
1.105 s: scalar_ewunary.py
0.525 s: scalar_ewbinary.py
0.457 s: frame_dimensions.py
0.466 s: frame_reorg.py
0.397 s: frame_cartesian.py
0.449 s: matrix_dimensions.py
1.092 s: matrix_ewunary.py
1.614 s: matrix_ewbinary.py
0.973 s: matrix_outerbinary.py
1.309 s: matrix_agg.py
0.738 s: matrix_reorg.py
0.477 s: matrix_other.py
0.538 s: matrix_preprocessing.py
0.481 s: numpy_matrix_ops.py
0.523 s: numpy_matrix_ops_extended.py
0.407 s: numpy_matrix_ops_replace.py
0.429 s: if_else_simple.py, param=3.8
0.402 s: if_else_simple.py, param=0.1
0.402 s: if_only_simple.py, param=3.8
0.399 s: if_only_simple.py, param=0.1
0.396 s: if_else_2_outputs.py, param=3.8
0.393 s: if_else_2_outputs.py, param=0.1
0.391 s: if_else_complex.py, param=3.8
0.390 s: if_else_complex.py, param=10.0
0.413 s: for_loop_simple.py, param=1
0.403 s: for_loop_simple.py, param=10
0.403 s: for_loop_with_step.py, param=1
0.393 s: for_loop_with_step.py, param=2
0.387 s: for_loop_use_iterable.py, param=1
0.409 s: for_loop_use_iterable.py, param=10
0.407 s: for_loop_2_outputs.py, param=0
0.403 s: for_loop_2_outputs.py, param=1
0.403 s: while_loop_simple.py
0.411 s: while_loop_complex_cond.py
0.401 s: while_loop_2_outputs.py, param=0
0.390 s: while_loop_2_outputs.py, param=1
0.389 s: do_while_loop_simple.py
0.391 s: do_while_loop_complex_cond.py
0.396 s: do_while_loop_2_outputs.py, param=0
0.397 s: do_while_loop_2_outputs.py, param=1
0.403 s: nested_control_flow_1.py, param=0.1
0.395 s: nested_control_flow_1.py, param=3.8
0.397 s: nested_control_flow_2.py, param=0.1
0.405 s: nested_control_flow_2.py, param=3.8
0.404 s: nested_control_flow_3.py
0.402 s: user_def_func_simple.py
0.394 s: user_def_func_1_input_3_outputs.py, param=0
0.397 s: user_def_func_1_input_3_outputs.py, param=1
0.402 s: user_def_func_1_input_3_outputs.py, param=2
0.500 s: user_def_func_multiple_functions.py
0.489 s: user_def_func_multiple_calls.py
0.400 s: user_def_func_with_scalar.py
0.417 s: user_def_func_3_inputs.py
0.149 s: ewBinaryAddScalar
0.135 s: ewBinarySubScalar
0.136 s: ewBinaryMulScalar
0.135 s: ewBinaryDivScalar
0.135 s: ewBinaryPowScalar
0.130 s: ewBinaryAbsScalar
0.129 s: matmul
0.135 s: matmul vectorized
0.081 s: matmul tiled
0.091 s: matmul tiled and vectorized
0.147 s: matmul single
0.136 s: matmul si64
0.070 s: matmul ui64
0.141 s: matmul non square
0.138 s: matvec
0.134 s: ewloopfusion
0.122 s: aggAll
0.139 s: mapOp
0.313 s: codegen
0.840 s: matmul accuracy
0.749 s: matmul accuracy 576
0.012 s: TypeInferenceTraits
0.000 s: Proper config file from daphne root directory
0.001 s: Missing config file
0.000 s: Empty config file
0.001 s: Wrong JSON format in the config file
0.000 s: Wrong format of config file
0.000 s: Config file that contains only some keys
0.000 s: Unknown key in the config file
0.000 s: The unknown value of param in the config file
0.000 s: An adequate enum value set in the config file
0.000 s: An unknown enum value set in the config file
0.000 s: Integer set as enum value instead of the name of the enum value in string format in the config file
0.000 s:      Then: No filenames are returned
0.090 s:      When: Sending a task where no outputs are expected
0.090 s: Simple distributed worker functionality test - DenseMatrix<double>
0.000 s:      Then: The filename of the matrix is returned
0.036 s:      When: Sending simple random generation task
0.036 s: Simple distributed worker functionality test - DenseMatrix<double>
0.000 s:      Then: A Matrix is returned
0.044 s:      When: Sending a task with a read on the worker
0.044 s: Simple distributed worker functionality test - DenseMatrix<double>
0.000 s:      Then: A Matrix is returned with all elements doubled
0.042 s:      When: Sending a task with a read on the worker
0.042 s: Simple distributed worker functionality test - DenseMatrix<double>
0.000 s: CSRMatrix allocates enough space - int8_t
0.000 s: CSRMatrix allocates enough space - int32_t
0.000 s: CSRMatrix allocates enough space - int64_t
0.000 s: CSRMatrix allocates enough space - uint8_t
0.000 s: CSRMatrix allocates enough space - uint32_t
0.000 s: CSRMatrix allocates enough space - uint64_t
0.000 s: CSRMatrix allocates enough space - float
0.000 s: CSRMatrix allocates enough space - double
0.000 s: Freeing the original matrix first is fine
0.000 s: CSRMatrix sub-matrix works properly
0.000 s: Freeing the sub-matrix first is fine
0.000 s: CSRMatrix sub-matrix works properly
0.003 s: DenseMatrix allocates enough space - int8_t
0.017 s: DenseMatrix allocates enough space - int32_t
0.027 s: DenseMatrix allocates enough space - int64_t
0.003 s: DenseMatrix allocates enough space - uint8_t
0.010 s: DenseMatrix allocates enough space - uint32_t
0.023 s: DenseMatrix allocates enough space - uint64_t
0.011 s: DenseMatrix allocates enough space - float
0.021 s: DenseMatrix allocates enough space - double
0.000 s: Append
0.000 s: DenseMatrix for strings
0.000 s: Set
0.000 s: DenseMatrix for strings
0.000 s: Append + Set
0.000 s: DenseMatrix for strings
0.000 s: View
0.000 s: DenseMatrix for strings
0.000 s: Freeing the original matrix first is fine
0.000 s: DenseMatrix sub-matrix works properly
0.000 s: Freeing the sub-matrix first is fine
0.000 s: DenseMatrix sub-matrix works properly
0.000 s: Frame allocates enough space
0.000 s: Freeing the original frame first is fine
0.000 s: Frame sub-frame works properly
0.000 s: Freeing the sub-frame first is fine
0.000 s: Frame sub-frame works properly
0.000 s: implit labels
0.000 s: Frame columns can be accessed by label
0.000 s: explicit labels
0.000 s: Frame columns can be accessed by label
0.000 s: Frame cannot provide column for unknown label
0.000 s: Frame column labels must be unique
0.000 s: Freeing the original frame first is fine
0.000 s: Frame sub-frame for empty source frame works properly
0.000 s: Freeing the sub-frame first is fine
0.000 s: Frame sub-frame for empty source frame works properly
0.000 s: empty matrix
0.000 s: Matrix.get() - DenseMatrix<double>
0.000 s: sparse matrix
0.000 s: Matrix.get() - DenseMatrix<double>
0.000 s: full matrix
0.000 s: Matrix.get() - DenseMatrix<double>
0.000 s: empty matrix
0.000 s: Matrix.get() - DenseMatrix<uint32_t>
0.000 s: sparse matrix
0.000 s: Matrix.get() - DenseMatrix<uint32_t>
0.000 s: full matrix
0.000 s: Matrix.get() - DenseMatrix<uint32_t>
0.000 s: empty matrix
0.000 s: Matrix.get() - CSRMatrix<double>
0.000 s: sparse matrix
0.000 s: Matrix.get() - CSRMatrix<double>
0.000 s: full matrix
0.000 s: Matrix.get() - CSRMatrix<double>
0.000 s: empty matrix
0.000 s: Matrix.get() - CSRMatrix<uint32_t>
0.000 s: sparse matrix
0.000 s: Matrix.get() - CSRMatrix<uint32_t>
0.000 s: full matrix
0.000 s: Matrix.get() - CSRMatrix<uint32_t>
0.000 s: row range
0.000 s: Matrix.get() on view - DenseMatrix<double>
0.000 s: col range
0.000 s: Matrix.get() on view - DenseMatrix<double>
0.000 s: row/col range
0.000 s: Matrix.get() on view - DenseMatrix<double>
0.000 s: row range
0.000 s: Matrix.get() on view - DenseMatrix<uint32_t>
0.000 s: col range
0.000 s: Matrix.get() on view - DenseMatrix<uint32_t>
0.000 s: row/col range
0.000 s: Matrix.get() on view - DenseMatrix<uint32_t>
0.000 s: row range
0.000 s: Matrix.get() on view - CSRMatrix<double>
0.000 s: row range
0.000 s: Matrix.get() on view - CSRMatrix<uint32_t>
0.000 s: sorted coordinates
0.000 s: Matrix.set() for filling a matrix - DenseMatrix<double>
0.000 s: unsorted coordinates
0.000 s: Matrix.set() for filling a matrix - DenseMatrix<double>
0.000 s: sorted coordinates
0.000 s: Matrix.set() for filling a matrix - DenseMatrix<uint32_t>
0.000 s: unsorted coordinates
0.000 s: Matrix.set() for filling a matrix - DenseMatrix<uint32_t>
0.000 s: sorted coordinates
0.000 s: Matrix.set() for filling a matrix - CSRMatrix<double>
0.000 s: unsorted coordinates
0.000 s: Matrix.set() for filling a matrix - CSRMatrix<double>
0.000 s: sorted coordinates
0.000 s: Matrix.set() for filling a matrix - CSRMatrix<uint32_t>
0.000 s: unsorted coordinates
0.000 s: Matrix.set() for filling a matrix - CSRMatrix<uint32_t>
0.000 s: zero to zero
0.000 s: Matrix.set() for overwriting elements - DenseMatrix<double>
0.000 s: zero to non-zero
0.000 s: Matrix.set() for overwriting elements - DenseMatrix<double>
0.000 s: non-zero to zero
0.000 s: Matrix.set() for overwriting elements - DenseMatrix<double>
0.000 s: non-zero to non-zero
0.000 s: Matrix.set() for overwriting elements - DenseMatrix<double>
0.000 s: zero to zero
0.000 s: Matrix.set() for overwriting elements - DenseMatrix<uint32_t>
0.000 s: zero to non-zero
0.000 s: Matrix.set() for overwriting elements - DenseMatrix<uint32_t>
0.000 s: non-zero to zero
0.000 s: Matrix.set() for overwriting elements - DenseMatrix<uint32_t>
0.000 s: non-zero to non-zero
0.000 s: Matrix.set() for overwriting elements - DenseMatrix<uint32_t>
0.000 s: zero to zero
0.000 s: Matrix.set() for overwriting elements - CSRMatrix<double>
0.000 s: zero to non-zero
0.000 s: Matrix.set() for overwriting elements - CSRMatrix<double>
0.000 s: non-zero to zero
0.000 s: Matrix.set() for overwriting elements - CSRMatrix<double>
0.000 s: non-zero to non-zero
0.000 s: Matrix.set() for overwriting elements - CSRMatrix<double>
0.000 s: zero to zero
0.000 s: Matrix.set() for overwriting elements - CSRMatrix<uint32_t>
0.000 s: zero to non-zero
0.000 s: Matrix.set() for overwriting elements - CSRMatrix<uint32_t>
0.000 s: non-zero to zero
0.000 s: Matrix.set() for overwriting elements - CSRMatrix<uint32_t>
0.000 s: non-zero to non-zero
0.000 s: Matrix.set() for overwriting elements - CSRMatrix<uint32_t>
0.000 s: row range
0.000 s: Matrix.set() on view - DenseMatrix<double>
0.000 s: col range
0.000 s: Matrix.set() on view - DenseMatrix<double>
0.000 s: row/col range
0.000 s: Matrix.set() on view - DenseMatrix<double>
0.000 s: row range
0.000 s: Matrix.set() on view - DenseMatrix<uint32_t>
0.000 s: col range
0.000 s: Matrix.set() on view - DenseMatrix<uint32_t>
0.000 s: row/col range
0.000 s: Matrix.set() on view - DenseMatrix<uint32_t>
0.000 s: row range
0.000 s: Matrix.set() on view - CSRMatrix<double>
0.000 s: row range
0.000 s: Matrix.set() on view - CSRMatrix<uint32_t>
0.000 s: appending nothing
0.000 s: Matrix.append() - DenseMatrix<double>
0.000 s: appending one non-last element
0.000 s: Matrix.append() - DenseMatrix<double>
0.000 s: appending only last element
0.000 s: Matrix.append() - DenseMatrix<double>
0.000 s: appending multiple elements
0.000 s: Matrix.append() - DenseMatrix<double>
0.000 s: appending all elements
0.000 s: Matrix.append() - DenseMatrix<double>
0.000 s: appending nothing
0.000 s: Matrix.append() - DenseMatrix<uint32_t>
0.000 s: appending one non-last element
0.000 s: Matrix.append() - DenseMatrix<uint32_t>
0.000 s: appending only last element
0.000 s: Matrix.append() - DenseMatrix<uint32_t>
0.000 s: appending multiple elements
0.000 s: Matrix.append() - DenseMatrix<uint32_t>
0.000 s: appending all elements
0.000 s: Matrix.append() - DenseMatrix<uint32_t>
0.000 s: appending nothing
0.000 s: Matrix.append() - CSRMatrix<double>
0.000 s: appending one non-last element
0.000 s: Matrix.append() - CSRMatrix<double>
0.000 s: appending only last element
0.000 s: Matrix.append() - CSRMatrix<double>
0.000 s: appending multiple elements
0.000 s: Matrix.append() - CSRMatrix<double>
0.000 s: appending all elements
0.000 s: Matrix.append() - CSRMatrix<double>
0.000 s: appending nothing
0.000 s: Matrix.append() - CSRMatrix<uint32_t>
0.000 s: appending one non-last element
0.000 s: Matrix.append() - CSRMatrix<uint32_t>
0.000 s: appending only last element
0.000 s: Matrix.append() - CSRMatrix<uint32_t>
0.000 s: appending multiple elements
0.000 s: Matrix.append() - CSRMatrix<uint32_t>
0.000 s: appending all elements
0.000 s: Matrix.append() - CSRMatrix<uint32_t>
0.000 s: Matrix.append() on view - DenseMatrix<double>
0.000 s: Matrix.append() on view - DenseMatrix<uint32_t>
0.000 s: Matrix.append() on view - CSRMatrix<double>
0.000 s: Matrix.append() on view - CSRMatrix<uint32_t>
0.000 s: Task sequence
0.000 s: Queue size
0.000 s: EOF handling
0.002 s: Tensor Creation - double
0.002 s: Tensor Creation - float
0.002 s: Tensor Creation - uint32_t
0.002 s: Tensor Creation - uint64_t
0.002 s: Tensor Creation - int32_t
0.002 s: Tensor Creation - int64_t
0.000 s: Manual layout check
0.000 s: Tensor layout and accessors - double
0.000 s: .get()
0.000 s: Tensor layout and accessors - double
0.000 s: .set()
0.000 s: Tensor layout and accessors - double
0.000 s: Manual layout check
0.000 s: Tensor layout and accessors - float
0.000 s: .get()
0.000 s: Tensor layout and accessors - float
0.000 s: .set()
0.000 s: Tensor layout and accessors - float
0.000 s: Manual layout check
0.000 s: Tensor layout and accessors - uint32_t
0.000 s: .get()
0.000 s: Tensor layout and accessors - uint32_t
0.000 s: .set()
0.000 s: Tensor layout and accessors - uint32_t
0.000 s: Manual layout check
0.000 s: Tensor layout and accessors - uint64_t
0.000 s: .get()
0.000 s: Tensor layout and accessors - uint64_t
0.000 s: .set()
0.000 s: Tensor layout and accessors - uint64_t
0.000 s: Manual layout check
0.000 s: Tensor layout and accessors - int32_t
0.000 s: .get()
0.000 s: Tensor layout and accessors - int32_t
0.000 s: .set()
0.000 s: Tensor layout and accessors - int32_t
0.000 s: Manual layout check
0.000 s: Tensor layout and accessors - int64_t
0.000 s: .get()
0.000 s: Tensor layout and accessors - int64_t
0.000 s: .set()
0.000 s: Tensor layout and accessors - int64_t
0.000 s: .dice() and variants
0.000 s: Tensor dicing, rechunking and conversions - double
0.000 s: .rechunk()
0.000 s: Tensor dicing, rechunking and conversions - double
0.000 s: Converion: contiguous -> chunked
0.000 s: Tensor dicing, rechunking and conversions - double
0.000 s: Converion: DenseMatrix -> rank 2 ContiguousTensor
0.000 s: Tensor dicing, rechunking and conversions - double
0.000 s: Converion: rank 2 ContiguousTensor -> DenseMatrix
0.000 s: Tensor dicing, rechunking and conversions - double
0.000 s: .dice() and variants
0.000 s: Tensor dicing, rechunking and conversions - float
0.000 s: .rechunk()
0.000 s: Tensor dicing, rechunking and conversions - float
0.000 s: Converion: contiguous -> chunked
0.000 s: Tensor dicing, rechunking and conversions - float
0.000 s: Converion: DenseMatrix -> rank 2 ContiguousTensor
0.000 s: Tensor dicing, rechunking and conversions - float
0.000 s: Converion: rank 2 ContiguousTensor -> DenseMatrix
0.000 s: Tensor dicing, rechunking and conversions - float
0.000 s: .dice() and variants
0.000 s: Tensor dicing, rechunking and conversions - uint32_t
0.000 s: .rechunk()
0.000 s: Tensor dicing, rechunking and conversions - uint32_t
0.000 s: Converion: contiguous -> chunked
0.000 s: Tensor dicing, rechunking and conversions - uint32_t
0.000 s: Converion: DenseMatrix -> rank 2 ContiguousTensor
0.000 s: Tensor dicing, rechunking and conversions - uint32_t
0.000 s: Converion: rank 2 ContiguousTensor -> DenseMatrix
0.000 s: Tensor dicing, rechunking and conversions - uint32_t
0.000 s: .dice() and variants
0.000 s: Tensor dicing, rechunking and conversions - uint64_t
0.000 s: .rechunk()
0.000 s: Tensor dicing, rechunking and conversions - uint64_t
0.000 s: Converion: contiguous -> chunked
0.000 s: Tensor dicing, rechunking and conversions - uint64_t
0.000 s: Converion: DenseMatrix -> rank 2 ContiguousTensor
0.000 s: Tensor dicing, rechunking and conversions - uint64_t
0.000 s: Converion: rank 2 ContiguousTensor -> DenseMatrix
0.000 s: Tensor dicing, rechunking and conversions - uint64_t
0.000 s: .dice() and variants
0.000 s: Tensor dicing, rechunking and conversions - int32_t
0.000 s: .rechunk()
0.000 s: Tensor dicing, rechunking and conversions - int32_t
0.000 s: Converion: contiguous -> chunked
0.000 s: Tensor dicing, rechunking and conversions - int32_t
0.000 s: Converion: DenseMatrix -> rank 2 ContiguousTensor
0.000 s: Tensor dicing, rechunking and conversions - int32_t
0.000 s: Converion: rank 2 ContiguousTensor -> DenseMatrix
0.000 s: Tensor dicing, rechunking and conversions - int32_t
0.000 s: .dice() and variants
0.000 s: Tensor dicing, rechunking and conversions - int64_t
0.000 s: .rechunk()
0.000 s: Tensor dicing, rechunking and conversions - int64_t
0.000 s: Converion: contiguous -> chunked
0.000 s: Tensor dicing, rechunking and conversions - int64_t
0.000 s: Converion: DenseMatrix -> rank 2 ContiguousTensor
0.000 s: Tensor dicing, rechunking and conversions - int64_t
0.000 s: Converion: rank 2 ContiguousTensor -> DenseMatrix
0.000 s: Tensor dicing, rechunking and conversions - int64_t
0.000 s: ReadCsv - DenseMatrix<double>
0.000 s: ReadCsv - DenseMatrix<uint8_t>
0.000 s: ReadCsv, col + row ignore - DenseMatrix<int8_t>
0.000 s: ReadCsv, INF and NAN parsing - DenseMatrix<double>
0.000 s: ReadCsv, frame of floats
0.000 s: ReadCsv, frame of uint8s
0.000 s: ReadCsv, col + row ignore
0.000 s: ReadCsv, INF and NAN parsing
0.000 s: ReadCsv, varying columns
0.020 s: ReadParquet, Frame
0.000 s: ReadParquet, DenseMatrix - DenseMatrix<double>
0.000 s: ReadMM CIG - DenseMatrix<int32_t>
0.000 s: ReadMM AIG - DenseMatrix<int32_t>
0.012 s: ReadMM CRG - DenseMatrix<double>
0.001 s: ReadMM CRS - DenseMatrix<double>
0.001 s: ReadMM CRK - DenseMatrix<double>
0.000 s: ReadMM CPS - DenseMatrix<int32_t>
0.000 s: ReadMM AIK - DenseMatrix<int32_t>
0.000 s: ReadMM AIS - DenseMatrix<int32_t>
0.000 s: ReadMM CIG (CSR) - CSRMatrix<int32_t>
0.000 s: ReadMM AIG (CSR) - CSRMatrix<int32_t>
0.017 s: ReadMM CRG (CSR) - CSRMatrix<double>
0.001 s: ReadMM CRS (CSR) - CSRMatrix<double>
0.001 s: ReadMM CRK (CSR) - CSRMatrix<double>
0.000 s: ReadMM CPS (CSR) - CSRMatrix<int32_t>
0.000 s: ReadMM AIK (CSR) - CSRMatrix<int32_t>
0.000 s: ReadMM AIS (CSR) - CSRMatrix<int32_t>
0.000 s: ReadMM CIG (Frame)
0.000 s: ReadMM AIG (Frame)
0.013 s: ReadMM CRG (Frame)
0.002 s: ReadMM CRS (Frame)
0.001 s: ReadMM CRK (Frame)
0.000 s: ReadMM CPS (Frame)
0.000 s: ReadMM AIK (Frame)
0.000 s: ReadMM AIS (Frame)
0.000 s: WriteDaphne CIG - DenseMatrix<int32_t>
0.000 s: WriteDaphne AIG - DenseMatrix<int32_t>
0.017 s: WriteDaphne CRG - DenseMatrix<double>
0.001 s: WriteDaphne CRS - DenseMatrix<double>
0.001 s: WriteDaphne CRK - DenseMatrix<double>
0.000 s: WriteDaphne CPS - DenseMatrix<int32_t>
0.000 s: WriteDaphne AIK - DenseMatrix<int32_t>
0.000 s: WriteDaphne AIS - DenseMatrix<int32_t>
0.000 s: WriteDaphne CIG (CSR) - CSRMatrix<int32_t>
0.000 s: WriteDaphne AIG (CSR) - CSRMatrix<int32_t>
0.022 s: WriteDaphne CRG (CSR) - CSRMatrix<double>
0.002 s: WriteDaphne CRS (CSR) - CSRMatrix<double>
0.002 s: WriteDaphne CRK (CSR) - CSRMatrix<double>
0.000 s: WriteDaphne CPS (CSR) - CSRMatrix<int32_t>
0.000 s: WriteDaphne AIK (CSR) - CSRMatrix<int32_t>
0.000 s: WriteDaphne AIS (CSR) - CSRMatrix<int32_t>
0.000 s: WriteDaphne CIG (Frame)
0.000 s: WriteDaphne AIG (Frame)
0.022 s: WriteDaphne CRG (Frame)
0.002 s: WriteDaphne CRS (Frame)
0.002 s: WriteDaphne CRK (Frame)
0.000 s: WriteDaphne CPS (Frame)
0.000 s: WriteDaphne AIK (Frame)
0.000 s: WriteDaphne AIS (Frame)
0.000 s: ReadDaphne CIG - DenseMatrix<int32_t>
0.000 s: ReadDaphne AIG - DenseMatrix<int32_t>
0.001 s: ReadDaphne CRG - DenseMatrix<double>
0.000 s: ReadDaphne CRS - DenseMatrix<double>
0.000 s: ReadDaphne CRK - DenseMatrix<double>
0.000 s: ReadDaphne CPS - DenseMatrix<int32_t>
0.000 s: ReadDaphne AIK - DenseMatrix<int32_t>
0.000 s: ReadDaphne AIS - DenseMatrix<int32_t>
0.000 s: ReadDaphne CIG (CSR) - CSRMatrix<int32_t>
0.000 s: ReadDaphne AIG (CSR) - CSRMatrix<int32_t>
0.000 s: ReadDaphne CRG (CSR) - CSRMatrix<double>
0.000 s: ReadDaphne CRS (CSR) - CSRMatrix<double>
0.000 s: ReadDaphne CRK (CSR) - CSRMatrix<double>
0.000 s: ReadDaphne CPS (CSR) - CSRMatrix<int32_t>
0.000 s: ReadDaphne AIK (CSR) - CSRMatrix<int32_t>
0.000 s: ReadDaphne AIS (CSR) - CSRMatrix<int32_t>
0.000 s: ReadDaphne CIG (Frame)
0.000 s: ReadDaphne AIG (Frame)
0.005 s: ReadDaphne CRG (Frame)
0.001 s: ReadDaphne CRS (Frame)
0.002 s: ReadDaphne CRK (Frame)
0.000 s: ReadDaphne CPS (Frame)
0.000 s: ReadDaphne AIK (Frame)
0.000 s: ReadDaphne AIS (Frame)
0.000 s: DaphneSerializer serialize/deserialize - DenseMatrix<int8_t>
0.000 s: DaphneSerializer serialize/deserialize - DenseMatrix<int32_t>
0.000 s: DaphneSerializer serialize/deserialize - DenseMatrix<int64_t>
0.000 s: DaphneSerializer serialize/deserialize - DenseMatrix<uint8_t>
0.000 s: DaphneSerializer serialize/deserialize - DenseMatrix<uint32_t>
0.000 s: DaphneSerializer serialize/deserialize - DenseMatrix<uint64_t>
0.000 s: DaphneSerializer serialize/deserialize - DenseMatrix<float>
0.000 s: DaphneSerializer serialize/deserialize - DenseMatrix<double>
0.000 s: DaphneSerializer serialize/deserialize - CSRMatrix<int8_t>
0.000 s: DaphneSerializer serialize/deserialize - CSRMatrix<int32_t>
0.000 s: DaphneSerializer serialize/deserialize - CSRMatrix<int64_t>
0.000 s: DaphneSerializer serialize/deserialize - CSRMatrix<uint8_t>
0.000 s: DaphneSerializer serialize/deserialize - CSRMatrix<uint32_t>
0.000 s: DaphneSerializer serialize/deserialize - CSRMatrix<uint64_t>
0.000 s: DaphneSerializer serialize/deserialize - CSRMatrix<float>
0.000 s: DaphneSerializer serialize/deserialize - CSRMatrix<double>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - DenseMatrix<int8_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - DenseMatrix<int32_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - DenseMatrix<int64_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - DenseMatrix<uint8_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - DenseMatrix<uint32_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - DenseMatrix<uint64_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - DenseMatrix<float>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - DenseMatrix<double>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - CSRMatrix<int8_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - CSRMatrix<int32_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - CSRMatrix<int64_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - CSRMatrix<uint8_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - CSRMatrix<uint32_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - CSRMatrix<uint64_t>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - CSRMatrix<float>
0.000 s: DaphneSerializer serialize/deserialize in chunks out of order - CSRMatrix<double>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - DenseMatrix<int8_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - DenseMatrix<int32_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - DenseMatrix<int64_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - DenseMatrix<uint8_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - DenseMatrix<uint32_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - DenseMatrix<uint64_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - DenseMatrix<float>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - DenseMatrix<double>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - CSRMatrix<int8_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - CSRMatrix<int32_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - CSRMatrix<int64_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - CSRMatrix<uint8_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - CSRMatrix<uint32_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - CSRMatrix<uint64_t>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - CSRMatrix<float>
0.000 s: DaphneSerializer serialize/deserialize in order using iterator - CSRMatrix<double>
1.531 s: DaphneSerializer serialize/deserialize, large random input - DenseMatrix<int8_t>
1.707 s: DaphneSerializer serialize/deserialize, large random input - DenseMatrix<int32_t>
2.162 s: DaphneSerializer serialize/deserialize, large random input - DenseMatrix<int64_t>
1.495 s: DaphneSerializer serialize/deserialize, large random input - DenseMatrix<uint8_t>
1.685 s: DaphneSerializer serialize/deserialize, large random input - DenseMatrix<uint32_t>
2.131 s: DaphneSerializer serialize/deserialize, large random input - DenseMatrix<uint64_t>
0.808 s: DaphneSerializer serialize/deserialize, large random input - DenseMatrix<float>
1.704 s: DaphneSerializer serialize/deserialize, large random input - DenseMatrix<double>
0.565 s: DaphneSerializer serialize/deserialize, large random input - CSRMatrix<int8_t>
0.586 s: DaphneSerializer serialize/deserialize, large random input - CSRMatrix<int32_t>
0.632 s: DaphneSerializer serialize/deserialize, large random input - CSRMatrix<int64_t>
0.578 s: DaphneSerializer serialize/deserialize, large random input - CSRMatrix<uint8_t>
0.580 s: DaphneSerializer serialize/deserialize, large random input - CSRMatrix<uint32_t>
0.578 s: DaphneSerializer serialize/deserialize, large random input - CSRMatrix<uint64_t>
0.593 s: DaphneSerializer serialize/deserialize, large random input - CSRMatrix<float>
0.589 s: DaphneSerializer serialize/deserialize, large random input - CSRMatrix<double>
1.538 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - DenseMatrix<int8_t>
1.835 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - DenseMatrix<int32_t>
2.416 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - DenseMatrix<int64_t>
1.582 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - DenseMatrix<uint8_t>
2.035 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - DenseMatrix<uint32_t>
2.464 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - DenseMatrix<uint64_t>
0.954 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - DenseMatrix<float>
2.128 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - DenseMatrix<double>
0.586 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - CSRMatrix<int8_t>
0.582 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - CSRMatrix<int32_t>
0.600 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - CSRMatrix<int64_t>
0.628 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - CSRMatrix<uint8_t>
0.593 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - CSRMatrix<uint32_t>
0.637 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - CSRMatrix<uint64_t>
0.605 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - CSRMatrix<float>
0.609 s: DaphneSerializer serialize/deserialize in chunks out of order, large random input - CSRMatrix<double>
0.583 s: DaphneSerializer serialize/deserialize in order using iterator, large random input - CSRMatrix<int8_t>
0.627 s: DaphneSerializer serialize/deserialize in order using iterator, large random input - CSRMatrix<int32_t>
0.664 s: DaphneSerializer serialize/deserialize in order using iterator, large random input - CSRMatrix<int64_t>
0.586 s: DaphneSerializer serialize/deserialize in order using iterator, large random input - CSRMatrix<uint8_t>
0.623 s: DaphneSerializer serialize/deserialize in order using iterator, large random input - CSRMatrix<uint32_t>
0.615 s: DaphneSerializer serialize/deserialize in order using iterator, large random input - CSRMatrix<uint64_t>
0.596 s: DaphneSerializer serialize/deserialize in order using iterator, large random input - CSRMatrix<float>
0.592 s: DaphneSerializer serialize/deserialize in order using iterator, large random input - CSRMatrix<double>
0.000 s: AggAll (sum - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggAll (sum - result value type: int64_t) - DenseMatrix<float>
0.000 s: AggAll (sum - result value type: int64_t) - DenseMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: int64_t) - DenseMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: int64_t) - DenseMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: int64_t) - DenseMatrix<int8_t>
0.000 s: AggAll (sum - result value type: int64_t) - DenseMatrix<int32_t>
0.000 s: AggAll (sum - result value type: int64_t) - DenseMatrix<int64_t>
0.011 s: AggAll (sum - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggAll (sum - result value type: int64_t) - CSRMatrix<float>
0.000 s: AggAll (sum - result value type: int64_t) - CSRMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: int64_t) - CSRMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: int64_t) - CSRMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: int64_t) - CSRMatrix<int8_t>
0.000 s: AggAll (sum - result value type: int64_t) - CSRMatrix<int32_t>
0.000 s: AggAll (sum - result value type: int64_t) - CSRMatrix<int64_t>
0.000 s: AggAll (sum - result value type: int64_t) - Matrix<double>
0.000 s: AggAll (sum - result value type: int64_t) - Matrix<float>
0.000 s: AggAll (sum - result value type: int64_t) - Matrix<uint8_t>
0.000 s: AggAll (sum - result value type: int64_t) - Matrix<uint32_t>
0.000 s: AggAll (sum - result value type: int64_t) - Matrix<uint64_t>
0.000 s: AggAll (sum - result value type: int64_t) - Matrix<int8_t>
0.000 s: AggAll (sum - result value type: int64_t) - Matrix<int32_t>
0.000 s: AggAll (sum - result value type: int64_t) - Matrix<int64_t>
0.000 s: AggAll (sum - result value type: int32_t) - DenseMatrix<double>
0.000 s: AggAll (sum - result value type: int32_t) - DenseMatrix<float>
0.000 s: AggAll (sum - result value type: int32_t) - DenseMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: int32_t) - DenseMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: int32_t) - DenseMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: int32_t) - DenseMatrix<int8_t>
0.000 s: AggAll (sum - result value type: int32_t) - DenseMatrix<int32_t>
0.000 s: AggAll (sum - result value type: int32_t) - DenseMatrix<int64_t>
0.000 s: AggAll (sum - result value type: int32_t) - CSRMatrix<double>
0.000 s: AggAll (sum - result value type: int32_t) - CSRMatrix<float>
0.000 s: AggAll (sum - result value type: int32_t) - CSRMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: int32_t) - CSRMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: int32_t) - CSRMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: int32_t) - CSRMatrix<int8_t>
0.000 s: AggAll (sum - result value type: int32_t) - CSRMatrix<int32_t>
0.000 s: AggAll (sum - result value type: int32_t) - CSRMatrix<int64_t>
0.000 s: AggAll (sum - result value type: int32_t) - Matrix<double>
0.000 s: AggAll (sum - result value type: int32_t) - Matrix<float>
0.000 s: AggAll (sum - result value type: int32_t) - Matrix<uint8_t>
0.000 s: AggAll (sum - result value type: int32_t) - Matrix<uint32_t>
0.000 s: AggAll (sum - result value type: int32_t) - Matrix<uint64_t>
0.000 s: AggAll (sum - result value type: int32_t) - Matrix<int8_t>
0.000 s: AggAll (sum - result value type: int32_t) - Matrix<int32_t>
0.000 s: AggAll (sum - result value type: int32_t) - Matrix<int64_t>
0.000 s: AggAll (sum - result value type: uint64_t) - DenseMatrix<double>
0.000 s: AggAll (sum - result value type: uint64_t) - DenseMatrix<float>
0.000 s: AggAll (sum - result value type: uint64_t) - DenseMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: uint64_t) - DenseMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: uint64_t) - DenseMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: uint64_t) - DenseMatrix<int8_t>
0.000 s: AggAll (sum - result value type: uint64_t) - DenseMatrix<int32_t>
0.000 s: AggAll (sum - result value type: uint64_t) - DenseMatrix<int64_t>
0.000 s: AggAll (sum - result value type: uint64_t) - CSRMatrix<double>
0.000 s: AggAll (sum - result value type: uint64_t) - CSRMatrix<float>
0.000 s: AggAll (sum - result value type: uint64_t) - CSRMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: uint64_t) - CSRMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: uint64_t) - CSRMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: uint64_t) - CSRMatrix<int8_t>
0.000 s: AggAll (sum - result value type: uint64_t) - CSRMatrix<int32_t>
0.000 s: AggAll (sum - result value type: uint64_t) - CSRMatrix<int64_t>
0.000 s: AggAll (sum - result value type: uint64_t) - Matrix<double>
0.000 s: AggAll (sum - result value type: uint64_t) - Matrix<float>
0.000 s: AggAll (sum - result value type: uint64_t) - Matrix<uint8_t>
0.000 s: AggAll (sum - result value type: uint64_t) - Matrix<uint32_t>
0.000 s: AggAll (sum - result value type: uint64_t) - Matrix<uint64_t>
0.000 s: AggAll (sum - result value type: uint64_t) - Matrix<int8_t>
0.000 s: AggAll (sum - result value type: uint64_t) - Matrix<int32_t>
0.000 s: AggAll (sum - result value type: uint64_t) - Matrix<int64_t>
0.000 s: AggAll (sum - result value type: uint32_t) - DenseMatrix<double>
0.000 s: AggAll (sum - result value type: uint32_t) - DenseMatrix<float>
0.000 s: AggAll (sum - result value type: uint32_t) - DenseMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: uint32_t) - DenseMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: uint32_t) - DenseMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: uint32_t) - DenseMatrix<int8_t>
0.000 s: AggAll (sum - result value type: uint32_t) - DenseMatrix<int32_t>
0.000 s: AggAll (sum - result value type: uint32_t) - DenseMatrix<int64_t>
0.000 s: AggAll (sum - result value type: uint32_t) - CSRMatrix<double>
0.000 s: AggAll (sum - result value type: uint32_t) - CSRMatrix<float>
0.000 s: AggAll (sum - result value type: uint32_t) - CSRMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: uint32_t) - CSRMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: uint32_t) - CSRMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: uint32_t) - CSRMatrix<int8_t>
0.000 s: AggAll (sum - result value type: uint32_t) - CSRMatrix<int32_t>
0.000 s: AggAll (sum - result value type: uint32_t) - CSRMatrix<int64_t>
0.000 s: AggAll (sum - result value type: uint32_t) - Matrix<double>
0.000 s: AggAll (sum - result value type: uint32_t) - Matrix<float>
0.000 s: AggAll (sum - result value type: uint32_t) - Matrix<uint8_t>
0.000 s: AggAll (sum - result value type: uint32_t) - Matrix<uint32_t>
0.000 s: AggAll (sum - result value type: uint32_t) - Matrix<uint64_t>
0.000 s: AggAll (sum - result value type: uint32_t) - Matrix<int8_t>
0.000 s: AggAll (sum - result value type: uint32_t) - Matrix<int32_t>
0.000 s: AggAll (sum - result value type: uint32_t) - Matrix<int64_t>
0.000 s: AggAll (sum - result value type: int8_t) - DenseMatrix<double>
0.000 s: AggAll (sum - result value type: int8_t) - DenseMatrix<float>
0.000 s: AggAll (sum - result value type: int8_t) - DenseMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: int8_t) - DenseMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: int8_t) - DenseMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: int8_t) - DenseMatrix<int8_t>
0.000 s: AggAll (sum - result value type: int8_t) - DenseMatrix<int32_t>
0.000 s: AggAll (sum - result value type: int8_t) - DenseMatrix<int64_t>
0.000 s: AggAll (sum - result value type: int8_t) - CSRMatrix<double>
0.000 s: AggAll (sum - result value type: int8_t) - CSRMatrix<float>
0.000 s: AggAll (sum - result value type: int8_t) - CSRMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: int8_t) - CSRMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: int8_t) - CSRMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: int8_t) - CSRMatrix<int8_t>
0.000 s: AggAll (sum - result value type: int8_t) - CSRMatrix<int32_t>
0.000 s: AggAll (sum - result value type: int8_t) - CSRMatrix<int64_t>
0.000 s: AggAll (sum - result value type: int8_t) - Matrix<double>
0.000 s: AggAll (sum - result value type: int8_t) - Matrix<float>
0.000 s: AggAll (sum - result value type: int8_t) - Matrix<uint8_t>
0.000 s: AggAll (sum - result value type: int8_t) - Matrix<uint32_t>
0.000 s: AggAll (sum - result value type: int8_t) - Matrix<uint64_t>
0.000 s: AggAll (sum - result value type: int8_t) - Matrix<int8_t>
0.000 s: AggAll (sum - result value type: int8_t) - Matrix<int32_t>
0.000 s: AggAll (sum - result value type: int8_t) - Matrix<int64_t>
0.000 s: AggAll (sum - result value type: uint8_t) - DenseMatrix<double>
0.000 s: AggAll (sum - result value type: uint8_t) - DenseMatrix<float>
0.000 s: AggAll (sum - result value type: uint8_t) - DenseMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: uint8_t) - DenseMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: uint8_t) - DenseMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: uint8_t) - DenseMatrix<int8_t>
0.000 s: AggAll (sum - result value type: uint8_t) - DenseMatrix<int32_t>
0.000 s: AggAll (sum - result value type: uint8_t) - DenseMatrix<int64_t>
0.000 s: AggAll (sum - result value type: uint8_t) - CSRMatrix<double>
0.000 s: AggAll (sum - result value type: uint8_t) - CSRMatrix<float>
0.000 s: AggAll (sum - result value type: uint8_t) - CSRMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: uint8_t) - CSRMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: uint8_t) - CSRMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: uint8_t) - CSRMatrix<int8_t>
0.000 s: AggAll (sum - result value type: uint8_t) - CSRMatrix<int32_t>
0.000 s: AggAll (sum - result value type: uint8_t) - CSRMatrix<int64_t>
0.000 s: AggAll (sum - result value type: uint8_t) - Matrix<double>
0.000 s: AggAll (sum - result value type: uint8_t) - Matrix<float>
0.000 s: AggAll (sum - result value type: uint8_t) - Matrix<uint8_t>
0.000 s: AggAll (sum - result value type: uint8_t) - Matrix<uint32_t>
0.000 s: AggAll (sum - result value type: uint8_t) - Matrix<uint64_t>
0.000 s: AggAll (sum - result value type: uint8_t) - Matrix<int8_t>
0.000 s: AggAll (sum - result value type: uint8_t) - Matrix<int32_t>
0.000 s: AggAll (sum - result value type: uint8_t) - Matrix<int64_t>
0.000 s: AggAll (sum - result value type: double) - DenseMatrix<double>
0.000 s: AggAll (sum - result value type: double) - DenseMatrix<float>
0.000 s: AggAll (sum - result value type: double) - DenseMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: double) - DenseMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: double) - DenseMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: double) - DenseMatrix<int8_t>
0.000 s: AggAll (sum - result value type: double) - DenseMatrix<int32_t>
0.000 s: AggAll (sum - result value type: double) - DenseMatrix<int64_t>
0.000 s: AggAll (sum - result value type: double) - CSRMatrix<double>
0.000 s: AggAll (sum - result value type: double) - CSRMatrix<float>
0.000 s: AggAll (sum - result value type: double) - CSRMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: double) - CSRMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: double) - CSRMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: double) - CSRMatrix<int8_t>
0.000 s: AggAll (sum - result value type: double) - CSRMatrix<int32_t>
0.000 s: AggAll (sum - result value type: double) - CSRMatrix<int64_t>
0.000 s: AggAll (sum - result value type: double) - Matrix<double>
0.000 s: AggAll (sum - result value type: double) - Matrix<float>
0.000 s: AggAll (sum - result value type: double) - Matrix<uint8_t>
0.000 s: AggAll (sum - result value type: double) - Matrix<uint32_t>
0.000 s: AggAll (sum - result value type: double) - Matrix<uint64_t>
0.000 s: AggAll (sum - result value type: double) - Matrix<int8_t>
0.000 s: AggAll (sum - result value type: double) - Matrix<int32_t>
0.000 s: AggAll (sum - result value type: double) - Matrix<int64_t>
0.000 s: AggAll (sum - result value type: float) - DenseMatrix<double>
0.000 s: AggAll (sum - result value type: float) - DenseMatrix<float>
0.000 s: AggAll (sum - result value type: float) - DenseMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: float) - DenseMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: float) - DenseMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: float) - DenseMatrix<int8_t>
0.000 s: AggAll (sum - result value type: float) - DenseMatrix<int32_t>
0.000 s: AggAll (sum - result value type: float) - DenseMatrix<int64_t>
0.000 s: AggAll (sum - result value type: float) - CSRMatrix<double>
0.000 s: AggAll (sum - result value type: float) - CSRMatrix<float>
0.000 s: AggAll (sum - result value type: float) - CSRMatrix<uint8_t>
0.000 s: AggAll (sum - result value type: float) - CSRMatrix<uint32_t>
0.000 s: AggAll (sum - result value type: float) - CSRMatrix<uint64_t>
0.000 s: AggAll (sum - result value type: float) - CSRMatrix<int8_t>
0.000 s: AggAll (sum - result value type: float) - CSRMatrix<int32_t>
0.000 s: AggAll (sum - result value type: float) - CSRMatrix<int64_t>
0.000 s: AggAll (sum - result value type: float) - Matrix<double>
0.000 s: AggAll (sum - result value type: float) - Matrix<float>
0.000 s: AggAll (sum - result value type: float) - Matrix<uint8_t>
0.000 s: AggAll (sum - result value type: float) - Matrix<uint32_t>
0.000 s: AggAll (sum - result value type: float) - Matrix<uint64_t>
0.000 s: AggAll (sum - result value type: float) - Matrix<int8_t>
0.000 s: AggAll (sum - result value type: float) - Matrix<int32_t>
0.000 s: AggAll (sum - result value type: float) - Matrix<int64_t>
0.000 s: AggAll (min) - DenseMatrix<double>
0.000 s: AggAll (min) - DenseMatrix<float>
0.000 s: AggAll (min) - DenseMatrix<uint8_t>
0.000 s: AggAll (min) - DenseMatrix<uint32_t>
0.000 s: AggAll (min) - DenseMatrix<uint64_t>
0.000 s: AggAll (min) - DenseMatrix<int8_t>
0.000 s: AggAll (min) - DenseMatrix<int32_t>
0.000 s: AggAll (min) - DenseMatrix<int64_t>
0.000 s: AggAll (min) - CSRMatrix<double>
0.000 s: AggAll (min) - CSRMatrix<float>
0.000 s: AggAll (min) - CSRMatrix<uint8_t>
0.000 s: AggAll (min) - CSRMatrix<uint32_t>
0.000 s: AggAll (min) - CSRMatrix<uint64_t>
0.000 s: AggAll (min) - CSRMatrix<int8_t>
0.000 s: AggAll (min) - CSRMatrix<int32_t>
0.000 s: AggAll (min) - CSRMatrix<int64_t>
0.000 s: AggAll (min) - Matrix<double>
0.000 s: AggAll (min) - Matrix<float>
0.000 s: AggAll (min) - Matrix<uint8_t>
0.000 s: AggAll (min) - Matrix<uint32_t>
0.000 s: AggAll (min) - Matrix<uint64_t>
0.000 s: AggAll (min) - Matrix<int8_t>
0.000 s: AggAll (min) - Matrix<int32_t>
0.000 s: AggAll (min) - Matrix<int64_t>
0.000 s: AggAll (max) - DenseMatrix<double>
0.000 s: AggAll (max) - DenseMatrix<float>
0.000 s: AggAll (max) - DenseMatrix<uint8_t>
0.000 s: AggAll (max) - DenseMatrix<uint32_t>
0.000 s: AggAll (max) - DenseMatrix<uint64_t>
0.000 s: AggAll (max) - DenseMatrix<int8_t>
0.000 s: AggAll (max) - DenseMatrix<int32_t>
0.000 s: AggAll (max) - DenseMatrix<int64_t>
0.000 s: AggAll (max) - CSRMatrix<double>
0.000 s: AggAll (max) - CSRMatrix<float>
0.000 s: AggAll (max) - CSRMatrix<uint8_t>
0.000 s: AggAll (max) - CSRMatrix<uint32_t>
0.000 s: AggAll (max) - CSRMatrix<uint64_t>
0.000 s: AggAll (max) - CSRMatrix<int8_t>
0.000 s: AggAll (max) - CSRMatrix<int32_t>
0.000 s: AggAll (max) - CSRMatrix<int64_t>
0.000 s: AggAll (max) - Matrix<double>
0.000 s: AggAll (max) - Matrix<float>
0.000 s: AggAll (max) - Matrix<uint8_t>
0.000 s: AggAll (max) - Matrix<uint32_t>
0.000 s: AggAll (max) - Matrix<uint64_t>
0.000 s: AggAll (max) - Matrix<int8_t>
0.000 s: AggAll (max) - Matrix<int32_t>
0.000 s: AggAll (max) - Matrix<int64_t>
0.000 s: AggAll (mean - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggAll (mean - result value type: int64_t) - DenseMatrix<float>
0.000 s: AggAll (mean - result value type: int64_t) - DenseMatrix<uint8_t>
0.000 s: AggAll (mean - result value type: int64_t) - DenseMatrix<uint32_t>
0.000 s: AggAll (mean - result value type: int64_t) - DenseMatrix<uint64_t>
0.000 s: AggAll (mean - result value type: int64_t) - DenseMatrix<int8_t>
0.000 s: AggAll (mean - result value type: int64_t) - DenseMatrix<int32_t>
0.000 s: AggAll (mean - result value type: int64_t) - DenseMatrix<int64_t>
0.000 s: AggAll (mean - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggAll (mean - result value type: int64_t) - CSRMatrix<float>
0.000 s: AggAll (mean - result value type: int64_t) - CSRMatrix<uint8_t>
0.000 s: AggAll (mean - result value type: int64_t) - CSRMatrix<uint32_t>
0.000 s: AggAll (mean - result value type: int64_t) - CSRMatrix<uint64_t>
0.000 s: AggAll (mean - result value type: int64_t) - CSRMatrix<int8_t>
0.000 s: AggAll (mean - result value type: int64_t) - CSRMatrix<int32_t>
0.000 s: AggAll (mean - result value type: int64_t) - CSRMatrix<int64_t>
0.000 s: AggAll (mean - result value type: int64_t) - Matrix<double>
0.000 s: AggAll (mean - result value type: int64_t) - Matrix<float>
0.000 s: AggAll (mean - result value type: int64_t) - Matrix<uint8_t>
0.000 s: AggAll (mean - result value type: int64_t) - Matrix<uint32_t>
0.000 s: AggAll (mean - result value type: int64_t) - Matrix<uint64_t>
0.000 s: AggAll (mean - result value type: int64_t) - Matrix<int8_t>
0.000 s: AggAll (mean - result value type: int64_t) - Matrix<int32_t>
0.000 s: AggAll (mean - result value type: int64_t) - Matrix<int64_t>
0.000 s: AggAll (mean - result value type: double) - DenseMatrix<double>
0.000 s: AggAll (mean - result value type: double) - DenseMatrix<float>
0.000 s: AggAll (mean - result value type: double) - DenseMatrix<uint8_t>
0.000 s: AggAll (mean - result value type: double) - DenseMatrix<uint32_t>
0.000 s: AggAll (mean - result value type: double) - DenseMatrix<uint64_t>
0.000 s: AggAll (mean - result value type: double) - DenseMatrix<int8_t>
0.000 s: AggAll (mean - result value type: double) - DenseMatrix<int32_t>
0.000 s: AggAll (mean - result value type: double) - DenseMatrix<int64_t>
0.000 s: AggAll (mean - result value type: double) - CSRMatrix<double>
0.000 s: AggAll (mean - result value type: double) - CSRMatrix<float>
0.000 s: AggAll (mean - result value type: double) - CSRMatrix<uint8_t>
0.000 s: AggAll (mean - result value type: double) - CSRMatrix<uint32_t>
0.000 s: AggAll (mean - result value type: double) - CSRMatrix<uint64_t>
0.000 s: AggAll (mean - result value type: double) - CSRMatrix<int8_t>
0.000 s: AggAll (mean - result value type: double) - CSRMatrix<int32_t>
0.000 s: AggAll (mean - result value type: double) - CSRMatrix<int64_t>
0.000 s: AggAll (mean - result value type: double) - Matrix<double>
0.000 s: AggAll (mean - result value type: double) - Matrix<float>
0.000 s: AggAll (mean - result value type: double) - Matrix<uint8_t>
0.000 s: AggAll (mean - result value type: double) - Matrix<uint32_t>
0.000 s: AggAll (mean - result value type: double) - Matrix<uint64_t>
0.000 s: AggAll (mean - result value type: double) - Matrix<int8_t>
0.000 s: AggAll (mean - result value type: double) - Matrix<int32_t>
0.000 s: AggAll (mean - result value type: double) - Matrix<int64_t>
0.000 s: AggAll (stddev - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggAll (stddev - result value type: int64_t) - DenseMatrix<float>
0.000 s: AggAll (stddev - result value type: int64_t) - DenseMatrix<uint8_t>
0.000 s: AggAll (stddev - result value type: int64_t) - DenseMatrix<uint32_t>
0.000 s: AggAll (stddev - result value type: int64_t) - DenseMatrix<uint64_t>
0.000 s: AggAll (stddev - result value type: int64_t) - DenseMatrix<int8_t>
0.000 s: AggAll (stddev - result value type: int64_t) - DenseMatrix<int32_t>
0.000 s: AggAll (stddev - result value type: int64_t) - DenseMatrix<int64_t>
0.000 s: AggAll (stddev - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggAll (stddev - result value type: int64_t) - CSRMatrix<float>
0.000 s: AggAll (stddev - result value type: int64_t) - CSRMatrix<uint8_t>
0.000 s: AggAll (stddev - result value type: int64_t) - CSRMatrix<uint32_t>
0.000 s: AggAll (stddev - result value type: int64_t) - CSRMatrix<uint64_t>
0.000 s: AggAll (stddev - result value type: int64_t) - CSRMatrix<int8_t>
0.000 s: AggAll (stddev - result value type: int64_t) - CSRMatrix<int32_t>
0.000 s: AggAll (stddev - result value type: int64_t) - CSRMatrix<int64_t>
0.000 s: AggAll (stddev - result value type: int64_t) - Matrix<double>
0.000 s: AggAll (stddev - result value type: int64_t) - Matrix<float>
0.000 s: AggAll (stddev - result value type: int64_t) - Matrix<uint8_t>
0.000 s: AggAll (stddev - result value type: int64_t) - Matrix<uint32_t>
0.000 s: AggAll (stddev - result value type: int64_t) - Matrix<uint64_t>
0.000 s: AggAll (stddev - result value type: int64_t) - Matrix<int8_t>
0.000 s: AggAll (stddev - result value type: int64_t) - Matrix<int32_t>
0.000 s: AggAll (stddev - result value type: int64_t) - Matrix<int64_t>
0.000 s: AggAll (stddev - result value type: double) - DenseMatrix<double>
0.000 s: AggAll (stddev - result value type: double) - DenseMatrix<float>
0.000 s: AggAll (stddev - result value type: double) - DenseMatrix<uint8_t>
0.000 s: AggAll (stddev - result value type: double) - DenseMatrix<uint32_t>
0.000 s: AggAll (stddev - result value type: double) - DenseMatrix<uint64_t>
0.000 s: AggAll (stddev - result value type: double) - DenseMatrix<int8_t>
0.000 s: AggAll (stddev - result value type: double) - DenseMatrix<int32_t>
0.000 s: AggAll (stddev - result value type: double) - DenseMatrix<int64_t>
0.000 s: AggAll (stddev - result value type: double) - CSRMatrix<double>
0.000 s: AggAll (stddev - result value type: double) - CSRMatrix<float>
0.000 s: AggAll (stddev - result value type: double) - CSRMatrix<uint8_t>
0.000 s: AggAll (stddev - result value type: double) - CSRMatrix<uint32_t>
0.000 s: AggAll (stddev - result value type: double) - CSRMatrix<uint64_t>
0.000 s: AggAll (stddev - result value type: double) - CSRMatrix<int8_t>
0.000 s: AggAll (stddev - result value type: double) - CSRMatrix<int32_t>
0.000 s: AggAll (stddev - result value type: double) - CSRMatrix<int64_t>
0.000 s: AggAll (stddev - result value type: double) - Matrix<double>
0.000 s: AggAll (stddev - result value type: double) - Matrix<float>
0.000 s: AggAll (stddev - result value type: double) - Matrix<uint8_t>
0.000 s: AggAll (stddev - result value type: double) - Matrix<uint32_t>
0.000 s: AggAll (stddev - result value type: double) - Matrix<uint64_t>
0.000 s: AggAll (stddev - result value type: double) - Matrix<int8_t>
0.000 s: AggAll (stddev - result value type: double) - Matrix<int32_t>
0.000 s: AggAll (stddev - result value type: double) - Matrix<int64_t>
0.000 s: AggAll (var - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggAll (var - result value type: int64_t) - DenseMatrix<float>
0.000 s: AggAll (var - result value type: int64_t) - DenseMatrix<uint8_t>
0.000 s: AggAll (var - result value type: int64_t) - DenseMatrix<uint32_t>
0.000 s: AggAll (var - result value type: int64_t) - DenseMatrix<uint64_t>
0.000 s: AggAll (var - result value type: int64_t) - DenseMatrix<int8_t>
0.000 s: AggAll (var - result value type: int64_t) - DenseMatrix<int32_t>
0.000 s: AggAll (var - result value type: int64_t) - DenseMatrix<int64_t>
0.000 s: AggAll (var - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggAll (var - result value type: int64_t) - CSRMatrix<float>
0.000 s: AggAll (var - result value type: int64_t) - CSRMatrix<uint8_t>
0.000 s: AggAll (var - result value type: int64_t) - CSRMatrix<uint32_t>
0.000 s: AggAll (var - result value type: int64_t) - CSRMatrix<uint64_t>
0.000 s: AggAll (var - result value type: int64_t) - CSRMatrix<int8_t>
0.000 s: AggAll (var - result value type: int64_t) - CSRMatrix<int32_t>
0.000 s: AggAll (var - result value type: int64_t) - CSRMatrix<int64_t>
0.000 s: AggAll (var - result value type: int64_t) - Matrix<double>
0.000 s: AggAll (var - result value type: int64_t) - Matrix<float>
0.000 s: AggAll (var - result value type: int64_t) - Matrix<uint8_t>
0.000 s: AggAll (var - result value type: int64_t) - Matrix<uint32_t>
0.000 s: AggAll (var - result value type: int64_t) - Matrix<uint64_t>
0.000 s: AggAll (var - result value type: int64_t) - Matrix<int8_t>
0.000 s: AggAll (var - result value type: int64_t) - Matrix<int32_t>
0.000 s: AggAll (var - result value type: int64_t) - Matrix<int64_t>
0.000 s: AggAll (var - result value type: double) - DenseMatrix<double>
0.000 s: AggAll (var - result value type: double) - DenseMatrix<float>
0.000 s: AggAll (var - result value type: double) - DenseMatrix<uint8_t>
0.000 s: AggAll (var - result value type: double) - DenseMatrix<uint32_t>
0.000 s: AggAll (var - result value type: double) - DenseMatrix<uint64_t>
0.000 s: AggAll (var - result value type: double) - DenseMatrix<int8_t>
0.000 s: AggAll (var - result value type: double) - DenseMatrix<int32_t>
0.000 s: AggAll (var - result value type: double) - DenseMatrix<int64_t>
0.000 s: AggAll (var - result value type: double) - CSRMatrix<double>
0.000 s: AggAll (var - result value type: double) - CSRMatrix<float>
0.000 s: AggAll (var - result value type: double) - CSRMatrix<uint8_t>
0.000 s: AggAll (var - result value type: double) - CSRMatrix<uint32_t>
0.000 s: AggAll (var - result value type: double) - CSRMatrix<uint64_t>
0.000 s: AggAll (var - result value type: double) - CSRMatrix<int8_t>
0.000 s: AggAll (var - result value type: double) - CSRMatrix<int32_t>
0.000 s: AggAll (var - result value type: double) - CSRMatrix<int64_t>
0.000 s: AggAll (var - result value type: double) - Matrix<double>
0.000 s: AggAll (var - result value type: double) - Matrix<float>
0.000 s: AggAll (var - result value type: double) - Matrix<uint8_t>
0.000 s: AggAll (var - result value type: double) - Matrix<uint32_t>
0.000 s: AggAll (var - result value type: double) - Matrix<uint64_t>
0.000 s: AggAll (var - result value type: double) - Matrix<int8_t>
0.000 s: AggAll (var - result value type: double) - Matrix<int32_t>
0.000 s: AggAll (var - result value type: double) - Matrix<int64_t>
0.000 s: AggCol (sum - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggCol (sum - result value type: int64_t) - DenseMatrix<uint32_t>
0.000 s: AggCol (sum - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggCol (sum - result value type: int64_t) - CSRMatrix<uint32_t>
0.000 s: AggCol (sum - result value type: int64_t) - Matrix<double>
0.000 s: AggCol (sum - result value type: int64_t) - Matrix<uint32_t>
0.000 s: AggCol (sum - result value type: double) - DenseMatrix<double>
0.000 s: AggCol (sum - result value type: double) - DenseMatrix<uint32_t>
0.000 s: AggCol (sum - result value type: double) - CSRMatrix<double>
0.000 s: AggCol (sum - result value type: double) - CSRMatrix<uint32_t>
0.000 s: AggCol (sum - result value type: double) - Matrix<double>
0.000 s: AggCol (sum - result value type: double) - Matrix<uint32_t>
0.000 s: AggCol (min) - DenseMatrix<double>
0.000 s: AggCol (min) - DenseMatrix<uint32_t>
0.000 s: AggCol (min) - CSRMatrix<double>
0.000 s: AggCol (min) - CSRMatrix<uint32_t>
0.000 s: AggCol (min) - Matrix<double>
0.000 s: AggCol (min) - Matrix<uint32_t>
0.000 s: AggCol (max) - DenseMatrix<double>
0.000 s: AggCol (max) - DenseMatrix<uint32_t>
0.000 s: AggCol (max) - CSRMatrix<double>
0.000 s: AggCol (max) - CSRMatrix<uint32_t>
0.000 s: AggCol (max) - Matrix<double>
0.000 s: AggCol (max) - Matrix<uint32_t>
0.000 s: AggCol (mean - result value type: int64_t) - DenseMatrix<int64_t>
0.000 s: AggCol (mean - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggCol (mean - result value type: int64_t) - CSRMatrix<int64_t>
0.000 s: AggCol (mean - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggCol (mean - result value type: int64_t) - Matrix<int64_t>
0.000 s: AggCol (mean - result value type: int64_t) - Matrix<double>
0.000 s: AggCol (mean - result value type: double) - DenseMatrix<int64_t>
0.000 s: AggCol (mean - result value type: double) - DenseMatrix<double>
0.000 s: AggCol (mean - result value type: double) - CSRMatrix<int64_t>
0.000 s: AggCol (mean - result value type: double) - CSRMatrix<double>
0.000 s: AggCol (mean - result value type: double) - Matrix<int64_t>
0.000 s: AggCol (mean - result value type: double) - Matrix<double>
0.000 s: AggCol (stddev - result value type: int64_t) - DenseMatrix<int64_t>
0.000 s: AggCol (stddev - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggCol (stddev - result value type: int64_t) - CSRMatrix<int64_t>
0.000 s: AggCol (stddev - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggCol (stddev - result value type: int64_t) - Matrix<int64_t>
0.000 s: AggCol (stddev - result value type: int64_t) - Matrix<double>
0.000 s: AggCol (stddev - result value type: double) - DenseMatrix<int64_t>
0.000 s: AggCol (stddev - result value type: double) - DenseMatrix<double>
0.000 s: AggCol (stddev - result value type: double) - CSRMatrix<int64_t>
0.000 s: AggCol (stddev - result value type: double) - CSRMatrix<double>
0.000 s: AggCol (stddev - result value type: double) - Matrix<int64_t>
0.000 s: AggCol (stddev - result value type: double) - Matrix<double>
0.000 s: AggCol (var - result value type: int64_t) - DenseMatrix<int64_t>
0.000 s: AggCol (var - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggCol (var - result value type: int64_t) - CSRMatrix<int64_t>
0.000 s: AggCol (var - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggCol (var - result value type: int64_t) - Matrix<int64_t>
0.000 s: AggCol (var - result value type: int64_t) - Matrix<double>
0.000 s: AggCol (var - result value type: double) - DenseMatrix<int64_t>
0.000 s: AggCol (var - result value type: double) - DenseMatrix<double>
0.000 s: AggCol (var - result value type: double) - CSRMatrix<int64_t>
0.000 s: AggCol (var - result value type: double) - CSRMatrix<double>
0.000 s: AggCol (var - result value type: double) - Matrix<int64_t>
0.000 s: AggCol (var - result value type: double) - Matrix<double>
0.000 s: 0x0 matrix
0.000 s: AggCum (sum) - DenseMatrix<double>
0.000 s: 1xn matrix
0.000 s: AggCum (sum) - DenseMatrix<double>
0.000 s: mx1 matrix
0.000 s: AggCum (sum) - DenseMatrix<double>
0.000 s: mxn matrix, zero
0.000 s: AggCum (sum) - DenseMatrix<double>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (sum) - DenseMatrix<double>
0.000 s: mxn matrix, dense
0.000 s: AggCum (sum) - DenseMatrix<double>
0.000 s: 0x0 matrix
0.000 s: AggCum (sum) - DenseMatrix<int32_t>
0.000 s: 1xn matrix
0.000 s: AggCum (sum) - DenseMatrix<int32_t>
0.000 s: mx1 matrix
0.000 s: AggCum (sum) - DenseMatrix<int32_t>
0.000 s: mxn matrix, zero
0.000 s: AggCum (sum) - DenseMatrix<int32_t>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (sum) - DenseMatrix<int32_t>
0.000 s: mxn matrix, dense
0.000 s: AggCum (sum) - DenseMatrix<int32_t>
0.000 s: 0x0 matrix
0.000 s: AggCum (sum) - Matrix<double>
0.000 s: 1xn matrix
0.000 s: AggCum (sum) - Matrix<double>
0.000 s: mx1 matrix
0.000 s: AggCum (sum) - Matrix<double>
0.000 s: mxn matrix, zero
0.000 s: AggCum (sum) - Matrix<double>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (sum) - Matrix<double>
0.000 s: mxn matrix, dense
0.000 s: AggCum (sum) - Matrix<double>
0.000 s: 0x0 matrix
0.000 s: AggCum (sum) - Matrix<int32_t>
0.000 s: 1xn matrix
0.000 s: AggCum (sum) - Matrix<int32_t>
0.000 s: mx1 matrix
0.000 s: AggCum (sum) - Matrix<int32_t>
0.000 s: mxn matrix, zero
0.000 s: AggCum (sum) - Matrix<int32_t>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (sum) - Matrix<int32_t>
0.000 s: mxn matrix, dense
0.000 s: AggCum (sum) - Matrix<int32_t>
0.000 s: 0x0 matrix
0.000 s: AggCum (prod) - DenseMatrix<double>
0.000 s: 1xn matrix
0.000 s: AggCum (prod) - DenseMatrix<double>
0.000 s: mx1 matrix
0.000 s: AggCum (prod) - DenseMatrix<double>
0.000 s: mxn matrix, zero
0.000 s: AggCum (prod) - DenseMatrix<double>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (prod) - DenseMatrix<double>
0.000 s: mxn matrix, dense
0.000 s: AggCum (prod) - DenseMatrix<double>
0.000 s: 0x0 matrix
0.000 s: AggCum (prod) - DenseMatrix<int32_t>
0.000 s: 1xn matrix
0.000 s: AggCum (prod) - DenseMatrix<int32_t>
0.000 s: mx1 matrix
0.000 s: AggCum (prod) - DenseMatrix<int32_t>
0.000 s: mxn matrix, zero
0.000 s: AggCum (prod) - DenseMatrix<int32_t>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (prod) - DenseMatrix<int32_t>
0.000 s: mxn matrix, dense
0.000 s: AggCum (prod) - DenseMatrix<int32_t>
0.000 s: 0x0 matrix
0.000 s: AggCum (prod) - Matrix<double>
0.000 s: 1xn matrix
0.000 s: AggCum (prod) - Matrix<double>
0.000 s: mx1 matrix
0.000 s: AggCum (prod) - Matrix<double>
0.000 s: mxn matrix, zero
0.000 s: AggCum (prod) - Matrix<double>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (prod) - Matrix<double>
0.000 s: mxn matrix, dense
0.000 s: AggCum (prod) - Matrix<double>
0.000 s: 0x0 matrix
0.000 s: AggCum (prod) - Matrix<int32_t>
0.000 s: 1xn matrix
0.000 s: AggCum (prod) - Matrix<int32_t>
0.000 s: mx1 matrix
0.000 s: AggCum (prod) - Matrix<int32_t>
0.000 s: mxn matrix, zero
0.000 s: AggCum (prod) - Matrix<int32_t>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (prod) - Matrix<int32_t>
0.000 s: mxn matrix, dense
0.000 s: AggCum (prod) - Matrix<int32_t>
0.000 s: 0x0 matrix
0.000 s: AggCum (min) - DenseMatrix<double>
0.000 s: 1xn matrix
0.000 s: AggCum (min) - DenseMatrix<double>
0.000 s: mx1 matrix
0.000 s: AggCum (min) - DenseMatrix<double>
0.000 s: mxn matrix, zero
0.000 s: AggCum (min) - DenseMatrix<double>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (min) - DenseMatrix<double>
0.000 s: mxn matrix, dense
0.000 s: AggCum (min) - DenseMatrix<double>
0.000 s: 0x0 matrix
0.000 s: AggCum (min) - DenseMatrix<int32_t>
0.000 s: 1xn matrix
0.000 s: AggCum (min) - DenseMatrix<int32_t>
0.000 s: mx1 matrix
0.000 s: AggCum (min) - DenseMatrix<int32_t>
0.000 s: mxn matrix, zero
0.000 s: AggCum (min) - DenseMatrix<int32_t>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (min) - DenseMatrix<int32_t>
0.000 s: mxn matrix, dense
0.000 s: AggCum (min) - DenseMatrix<int32_t>
0.000 s: 0x0 matrix
0.000 s: AggCum (min) - Matrix<double>
0.000 s: 1xn matrix
0.000 s: AggCum (min) - Matrix<double>
0.000 s: mx1 matrix
0.000 s: AggCum (min) - Matrix<double>
0.000 s: mxn matrix, zero
0.000 s: AggCum (min) - Matrix<double>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (min) - Matrix<double>
0.000 s: mxn matrix, dense
0.000 s: AggCum (min) - Matrix<double>
0.000 s: 0x0 matrix
0.000 s: AggCum (min) - Matrix<int32_t>
0.000 s: 1xn matrix
0.000 s: AggCum (min) - Matrix<int32_t>
0.000 s: mx1 matrix
0.000 s: AggCum (min) - Matrix<int32_t>
0.000 s: mxn matrix, zero
0.000 s: AggCum (min) - Matrix<int32_t>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (min) - Matrix<int32_t>
0.000 s: mxn matrix, dense
0.000 s: AggCum (min) - Matrix<int32_t>
0.000 s: 0x0 matrix
0.000 s: AggCum (max) - DenseMatrix<double>
0.000 s: 1xn matrix
0.000 s: AggCum (max) - DenseMatrix<double>
0.000 s: mx1 matrix
0.000 s: AggCum (max) - DenseMatrix<double>
0.000 s: mxn matrix, zero
0.000 s: AggCum (max) - DenseMatrix<double>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (max) - DenseMatrix<double>
0.000 s: mxn matrix, dense
0.000 s: AggCum (max) - DenseMatrix<double>
0.000 s: 0x0 matrix
0.000 s: AggCum (max) - DenseMatrix<int32_t>
0.000 s: 1xn matrix
0.000 s: AggCum (max) - DenseMatrix<int32_t>
0.000 s: mx1 matrix
0.000 s: AggCum (max) - DenseMatrix<int32_t>
0.000 s: mxn matrix, zero
0.000 s: AggCum (max) - DenseMatrix<int32_t>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (max) - DenseMatrix<int32_t>
0.000 s: mxn matrix, dense
0.000 s: AggCum (max) - DenseMatrix<int32_t>
0.000 s: 0x0 matrix
0.000 s: AggCum (max) - Matrix<double>
0.000 s: 1xn matrix
0.000 s: AggCum (max) - Matrix<double>
0.000 s: mx1 matrix
0.000 s: AggCum (max) - Matrix<double>
0.000 s: mxn matrix, zero
0.000 s: AggCum (max) - Matrix<double>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (max) - Matrix<double>
0.000 s: mxn matrix, dense
0.000 s: AggCum (max) - Matrix<double>
0.000 s: 0x0 matrix
0.000 s: AggCum (max) - Matrix<int32_t>
0.000 s: 1xn matrix
0.000 s: AggCum (max) - Matrix<int32_t>
0.000 s: mx1 matrix
0.000 s: AggCum (max) - Matrix<int32_t>
0.000 s: mxn matrix, zero
0.000 s: AggCum (max) - Matrix<int32_t>
0.000 s: mxn matrix, sparse
0.000 s: AggCum (max) - Matrix<int32_t>
0.000 s: mxn matrix, dense
0.000 s: AggCum (max) - Matrix<int32_t>
0.000 s: AggRow (sum - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggRow (sum - result value type: int64_t) - DenseMatrix<uint32_t>
0.000 s: AggRow (sum - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggRow (sum - result value type: int64_t) - CSRMatrix<uint32_t>
0.000 s: AggRow (sum - result value type: int64_t) - Matrix<double>
0.000 s: AggRow (sum - result value type: int64_t) - Matrix<uint32_t>
0.000 s: AggRow (sum - result value type: double) - DenseMatrix<double>
0.000 s: AggRow (sum - result value type: double) - DenseMatrix<uint32_t>
0.000 s: AggRow (sum - result value type: double) - CSRMatrix<double>
0.000 s: AggRow (sum - result value type: double) - CSRMatrix<uint32_t>
0.000 s: AggRow (sum - result value type: double) - Matrix<double>
0.000 s: AggRow (sum - result value type: double) - Matrix<uint32_t>
0.000 s: AggRow (min) - DenseMatrix<double>
0.000 s: AggRow (min) - DenseMatrix<uint32_t>
0.000 s: AggRow (min) - CSRMatrix<double>
0.000 s: AggRow (min) - CSRMatrix<uint32_t>
0.000 s: AggRow (min) - Matrix<double>
0.000 s: AggRow (min) - Matrix<uint32_t>
0.000 s: AggRow (max) - DenseMatrix<double>
0.000 s: AggRow (max) - DenseMatrix<uint32_t>
0.000 s: AggRow (max) - CSRMatrix<double>
0.000 s: AggRow (max) - CSRMatrix<uint32_t>
0.000 s: AggRow (max) - Matrix<double>
0.000 s: AggRow (max) - Matrix<uint32_t>
0.000 s: AggRow (idxmin) - DenseMatrix<double>
0.000 s: AggRow (idxmin) - DenseMatrix<uint32_t>
0.000 s: AggRow (idxmax) - DenseMatrix<double>
0.000 s: AggRow (idxmax) - DenseMatrix<uint32_t>
0.000 s: AggRow (mean - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggRow (mean - result value type: int64_t) - DenseMatrix<uint32_t>
0.000 s: AggRow (mean - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggRow (mean - result value type: int64_t) - CSRMatrix<uint32_t>
0.000 s: AggRow (mean - result value type: int64_t) - Matrix<double>
0.000 s: AggRow (mean - result value type: int64_t) - Matrix<uint32_t>
0.000 s: AggRow (mean - result value type: double) - DenseMatrix<double>
0.000 s: AggRow (mean - result value type: double) - DenseMatrix<uint32_t>
0.000 s: AggRow (mean - result value type: double) - CSRMatrix<double>
0.000 s: AggRow (mean - result value type: double) - CSRMatrix<uint32_t>
0.000 s: AggRow (mean - result value type: double) - Matrix<double>
0.000 s: AggRow (mean - result value type: double) - Matrix<uint32_t>
0.000 s: AggRow (stddev - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggRow (stddev - result value type: int64_t) - DenseMatrix<uint32_t>
0.000 s: AggRow (stddev - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggRow (stddev - result value type: int64_t) - CSRMatrix<uint32_t>
0.000 s: AggRow (stddev - result value type: int64_t) - Matrix<double>
0.000 s: AggRow (stddev - result value type: int64_t) - Matrix<uint32_t>
0.000 s: AggRow (stddev - result value type: double) - DenseMatrix<double>
0.000 s: AggRow (stddev - result value type: double) - DenseMatrix<uint32_t>
0.000 s: AggRow (stddev - result value type: double) - CSRMatrix<double>
0.000 s: AggRow (stddev - result value type: double) - CSRMatrix<uint32_t>
0.000 s: AggRow (stddev - result value type: double) - Matrix<double>
0.000 s: AggRow (stddev - result value type: double) - Matrix<uint32_t>
0.000 s: AggRow (var - result value type: int64_t) - DenseMatrix<double>
0.000 s: AggRow (var - result value type: int64_t) - DenseMatrix<uint32_t>
0.000 s: AggRow (var - result value type: int64_t) - CSRMatrix<double>
0.000 s: AggRow (var - result value type: int64_t) - CSRMatrix<uint32_t>
0.000 s: AggRow (var - result value type: int64_t) - Matrix<double>
0.000 s: AggRow (var - result value type: int64_t) - Matrix<uint32_t>
0.000 s: AggRow (var - result value type: double) - DenseMatrix<double>
0.000 s: AggRow (var - result value type: double) - DenseMatrix<uint32_t>
0.000 s: AggRow (var - result value type: double) - CSRMatrix<double>
0.000 s: AggRow (var - result value type: double) - CSRMatrix<uint32_t>
0.000 s: AggRow (var - result value type: double) - Matrix<double>
0.000 s: AggRow (var - result value type: double) - Matrix<uint32_t>
0.000 s: (0x0) arg
0.000 s: Bin - DenseMatrix<double>
0.000 s: (0xn) arg
0.000 s: Bin - DenseMatrix<double>
0.000 s: (mx0) arg
0.000 s: Bin - DenseMatrix<double>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 1d
0.000 s: Bin - DenseMatrix<double>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 2d
0.000 s: Bin - DenseMatrix<double>
0.000 s: numBins > 1, min < max, w/ out-of-bins values
0.000 s: Bin - DenseMatrix<double>
0.000 s: numBins > 1, min < max, nan/inf/-inf values
0.000 s: Bin - DenseMatrix<double>
0.000 s: numBins == 1, min == max, wo/ out-of-bounds values
0.000 s: Bin - DenseMatrix<double>
0.000 s: numBins == 1, min == max, w/ out-of-bounds values
0.000 s: Bin - DenseMatrix<double>
0.000 s: numBins == 1, min < max
0.000 s: Bin - DenseMatrix<double>
0.001 s: numBins > 1, min == max
0.001 s: Bin - DenseMatrix<double>
0.000 s: numBins <= 0
0.000 s: Bin - DenseMatrix<double>
0.000 s: min > max
0.000 s: Bin - DenseMatrix<double>
0.000 s: min/max is nan/inf/-inf
0.000 s: Bin - DenseMatrix<double>
0.000 s: (0x0) arg
0.000 s: Bin - DenseMatrix<float>
0.000 s: (0xn) arg
0.000 s: Bin - DenseMatrix<float>
0.000 s: (mx0) arg
0.000 s: Bin - DenseMatrix<float>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 1d
0.000 s: Bin - DenseMatrix<float>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 2d
0.000 s: Bin - DenseMatrix<float>
0.000 s: numBins > 1, min < max, w/ out-of-bins values
0.000 s: Bin - DenseMatrix<float>
0.000 s: numBins > 1, min < max, nan/inf/-inf values
0.000 s: Bin - DenseMatrix<float>
0.000 s: numBins == 1, min == max, wo/ out-of-bounds values
0.000 s: Bin - DenseMatrix<float>
0.000 s: numBins == 1, min == max, w/ out-of-bounds values
0.000 s: Bin - DenseMatrix<float>
0.000 s: numBins == 1, min < max
0.000 s: Bin - DenseMatrix<float>
0.000 s: numBins > 1, min == max
0.000 s: Bin - DenseMatrix<float>
0.000 s: numBins <= 0
0.000 s: Bin - DenseMatrix<float>
0.000 s: min > max
0.000 s: Bin - DenseMatrix<float>
0.000 s: min/max is nan/inf/-inf
0.000 s: Bin - DenseMatrix<float>
0.000 s: (0x0) arg
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: (0xn) arg
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: (mx0) arg
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 1d
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 2d
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: numBins > 1, min < max, w/ out-of-bins values
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: numBins == 1, min == max, wo/ out-of-bounds values
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: numBins == 1, min == max, w/ out-of-bounds values
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: numBins == 1, min < max
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: numBins > 1, min == max
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: numBins <= 0
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: min > max
0.000 s: Bin - DenseMatrix<int64_t>
0.000 s: (0x0) arg
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: (0xn) arg
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: (mx0) arg
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 1d
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 2d
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: numBins > 1, min < max, w/ out-of-bins values
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: numBins == 1, min == max, wo/ out-of-bounds values
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: numBins == 1, min == max, w/ out-of-bounds values
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: numBins == 1, min < max
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: numBins > 1, min == max
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: numBins <= 0
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: min > max
0.000 s: Bin - DenseMatrix<uint32_t>
0.000 s: (0x0) arg
0.000 s: Bin - Matrix<double>
0.000 s: (0xn) arg
0.000 s: Bin - Matrix<double>
0.000 s: (mx0) arg
0.000 s: Bin - Matrix<double>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 1d
0.000 s: Bin - Matrix<double>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 2d
0.000 s: Bin - Matrix<double>
0.000 s: numBins > 1, min < max, w/ out-of-bins values
0.000 s: Bin - Matrix<double>
0.000 s: numBins > 1, min < max, nan/inf/-inf values
0.000 s: Bin - Matrix<double>
0.000 s: numBins == 1, min == max, wo/ out-of-bounds values
0.000 s: Bin - Matrix<double>
0.000 s: numBins == 1, min == max, w/ out-of-bounds values
0.000 s: Bin - Matrix<double>
0.000 s: numBins == 1, min < max
0.000 s: Bin - Matrix<double>
0.000 s: numBins > 1, min == max
0.000 s: Bin - Matrix<double>
0.000 s: numBins <= 0
0.000 s: Bin - Matrix<double>
0.000 s: min > max
0.000 s: Bin - Matrix<double>
0.000 s: min/max is nan/inf/-inf
0.000 s: Bin - Matrix<double>
0.000 s: (0x0) arg
0.000 s: Bin - Matrix<float>
0.000 s: (0xn) arg
0.000 s: Bin - Matrix<float>
0.000 s: (mx0) arg
0.000 s: Bin - Matrix<float>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 1d
0.000 s: Bin - Matrix<float>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 2d
0.000 s: Bin - Matrix<float>
0.000 s: numBins > 1, min < max, w/ out-of-bins values
0.000 s: Bin - Matrix<float>
0.000 s: numBins > 1, min < max, nan/inf/-inf values
0.000 s: Bin - Matrix<float>
0.000 s: numBins == 1, min == max, wo/ out-of-bounds values
0.000 s: Bin - Matrix<float>
0.000 s: numBins == 1, min == max, w/ out-of-bounds values
0.000 s: Bin - Matrix<float>
0.000 s: numBins == 1, min < max
0.000 s: Bin - Matrix<float>
0.000 s: numBins > 1, min == max
0.000 s: Bin - Matrix<float>
0.000 s: numBins <= 0
0.000 s: Bin - Matrix<float>
0.000 s: min > max
0.000 s: Bin - Matrix<float>
0.000 s: min/max is nan/inf/-inf
0.000 s: Bin - Matrix<float>
0.000 s: (0x0) arg
0.000 s: Bin - Matrix<int64_t>
0.000 s: (0xn) arg
0.000 s: Bin - Matrix<int64_t>
0.000 s: (mx0) arg
0.000 s: Bin - Matrix<int64_t>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 1d
0.000 s: Bin - Matrix<int64_t>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 2d
0.000 s: Bin - Matrix<int64_t>
0.000 s: numBins > 1, min < max, w/ out-of-bins values
0.000 s: Bin - Matrix<int64_t>
0.000 s: numBins == 1, min == max, wo/ out-of-bounds values
0.000 s: Bin - Matrix<int64_t>
0.000 s: numBins == 1, min == max, w/ out-of-bounds values
0.000 s: Bin - Matrix<int64_t>
0.000 s: numBins == 1, min < max
0.000 s: Bin - Matrix<int64_t>
0.000 s: numBins > 1, min == max
0.000 s: Bin - Matrix<int64_t>
0.000 s: numBins <= 0
0.000 s: Bin - Matrix<int64_t>
0.000 s: min > max
0.000 s: Bin - Matrix<int64_t>
0.000 s: (0x0) arg
0.000 s: Bin - Matrix<uint32_t>
0.000 s: (0xn) arg
0.000 s: Bin - Matrix<uint32_t>
0.000 s: (mx0) arg
0.000 s: Bin - Matrix<uint32_t>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 1d
0.000 s: Bin - Matrix<uint32_t>
0.000 s: numBins > 1, min < max, wo/ out-of-bins values, 2d
0.000 s: Bin - Matrix<uint32_t>
0.000 s: numBins > 1, min < max, w/ out-of-bins values
0.000 s: Bin - Matrix<uint32_t>
0.000 s: numBins == 1, min == max, wo/ out-of-bounds values
0.000 s: Bin - Matrix<uint32_t>
0.000 s: numBins == 1, min == max, w/ out-of-bounds values
0.000 s: Bin - Matrix<uint32_t>
0.000 s: numBins == 1, min < max
0.000 s: Bin - Matrix<uint32_t>
0.000 s: numBins > 1, min == max
0.000 s: Bin - Matrix<uint32_t>
0.000 s: numBins <= 0
0.000 s: Bin - Matrix<uint32_t>
0.000 s: min > max
0.000 s: Bin - Matrix<uint32_t>
0.000 s: Cartesian
0.000 s: castObj, frame to matrix, single-column - DenseMatrix<double>
0.000 s: castObj, frame to matrix, single-column - DenseMatrix<int64_t>
0.000 s: castObj, frame to matrix, single-column - DenseMatrix<uint32_t>
0.000 s: castObj, frame to matrix, multi-column - DenseMatrix<double>
0.000 s: castObj, frame to matrix, multi-column - DenseMatrix<int64_t>
0.000 s: castObj, frame to matrix, multi-column - DenseMatrix<uint32_t>
0.000 s: castObj, matrix to frame, single-column - DenseMatrix<double>
0.000 s: castObj, matrix to frame, single-column - DenseMatrix<int64_t>
0.000 s: castObj, matrix to frame, single-column - DenseMatrix<uint32_t>
0.000 s: castObj, matrix to frame, multi-column - DenseMatrix<double>
0.000 s: castObj, matrix to frame, multi-column - DenseMatrix<int64_t>
0.000 s: castObj, matrix to frame, multi-column - DenseMatrix<uint32_t>
0.000 s: castObj, matrix to frame and back, multi-column - DenseMatrix<double>
0.000 s: castObj, matrix to frame and back, multi-column - DenseMatrix<int64_t>
0.000 s: castObj, matrix to frame and back, multi-column - DenseMatrix<uint32_t>
0.000 s: castObj, matrix to matrix, multi-column - DenseMatrix<double>
0.000 s: castObj, matrix to matrix, multi-column - DenseMatrix<int64_t>
0.000 s: castObj, matrix to matrix, multi-column - DenseMatrix<uint32_t>
0.000 s: castObj, matrix to matrix, single dim - DenseMatrix<double>
0.000 s: castObj, matrix to matrix, single dim - DenseMatrix<int64_t>
0.000 s: castObj, matrix to matrix, single dim - DenseMatrix<uint32_t>
0.000 s: castObj, matrix to matrix, zero dim & dim mismatch - DenseMatrix<double>
0.000 s: castObj, matrix to matrix, zero dim & dim mismatch - DenseMatrix<int64_t>
0.000 s: castObj, matrix to matrix, zero dim & dim mismatch - DenseMatrix<uint32_t>
0.000 s: CastObj CSRMatrix to DenseMatrix - double
0.000 s: CastObj CSRMatrix to DenseMatrix - float
0.000 s: CastObj CSRMatrix to DenseMatrix - int64_t
0.000 s: CastObj DenseMatrix to CSRMatrix - double
0.000 s: CastObj DenseMatrix to CSRMatrix - float
0.000 s: CastObj DenseMatrix to CSRMatrix - int64_t
0.000 s: DenseMatrix<int64_t> to VTRes
0.000 s: castObjSca, matrix to scalar - double
0.000 s: DenseMatrix<double> to VTRes
0.000 s: castObjSca, matrix to scalar - double
0.000 s: DenseMatrix<int64_t> to VTRes
0.000 s: castObjSca, matrix to scalar - float
0.000 s: DenseMatrix<double> to VTRes
0.000 s: castObjSca, matrix to scalar - float
0.000 s: DenseMatrix<int64_t> to VTRes
0.000 s: castObjSca, matrix to scalar - int64_t
0.000 s: DenseMatrix<double> to VTRes
0.000 s: castObjSca, matrix to scalar - int64_t
0.000 s: DenseMatrix<int64_t> to VTRes
0.000 s: castObjSca, matrix to scalar - uint64_t
0.000 s: DenseMatrix<double> to VTRes
0.000 s: castObjSca, matrix to scalar - uint64_t
0.000 s: DenseMatrix<int64_t> to VTRes
0.000 s: castObjSca, matrix to scalar - int32_t
0.000 s: DenseMatrix<double> to VTRes
0.000 s: castObjSca, matrix to scalar - int32_t
0.000 s: DenseMatrix<int64_t> to VTRes
0.000 s: castObjSca, matrix to scalar - uint32_t
0.000 s: DenseMatrix<double> to VTRes
0.000 s: castObjSca, matrix to scalar - uint32_t
0.000 s: Frame[double] to VTRes
0.000 s: castObjSca, frame to scalar - double
0.000 s: Frame[int64_t] to VTRes
0.000 s: castObjSca, frame to scalar - double
0.000 s: Frame[double] to VTRes
0.000 s: castObjSca, frame to scalar - float
0.000 s: Frame[int64_t] to VTRes
0.000 s: castObjSca, frame to scalar - float
0.000 s: Frame[double] to VTRes
0.000 s: castObjSca, frame to scalar - int64_t
0.000 s: Frame[int64_t] to VTRes
0.000 s: castObjSca, frame to scalar - int64_t
0.000 s: Frame[double] to VTRes
0.000 s: castObjSca, frame to scalar - uint64_t
0.000 s: Frame[int64_t] to VTRes
0.000 s: castObjSca, frame to scalar - uint64_t
0.000 s: Frame[double] to VTRes
0.000 s: castObjSca, frame to scalar - int32_t
0.000 s: Frame[int64_t] to VTRes
0.000 s: castObjSca, frame to scalar - int32_t
0.000 s: Frame[double] to VTRes
0.000 s: castObjSca, frame to scalar - uint32_t
0.000 s: Frame[int64_t] to VTRes
0.000 s: castObjSca, frame to scalar - uint32_t
0.000 s: castSca, no-op casts
0.000 s: castSca, actual casts
0.000 s: int64_t to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<double>
0.000 s: double to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<double>
0.000 s: int64_t to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<float>
0.000 s: double to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<float>
0.000 s: int64_t to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<int64_t>
0.000 s: double to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<int64_t>
0.000 s: int64_t to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<uint64_t>
0.000 s: double to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<uint64_t>
0.000 s: int64_t to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<int32_t>
0.000 s: double to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<int32_t>
0.000 s: int64_t to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<uint32_t>
0.000 s: double to DenseMatrix<VTRes>
0.000 s: castScaObj, scalar to matrix - DenseMatrix<uint32_t>
0.000 s: double to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - double
0.000 s: int64_t to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - double
0.000 s: double to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - float
0.000 s: int64_t to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - float
0.000 s: double to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - int64_t
0.000 s: int64_t to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - int64_t
0.000 s: double to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - uint64_t
0.000 s: int64_t to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - uint64_t
0.000 s: double to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - int32_t
0.000 s: int64_t to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - int32_t
0.000 s: double to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - uint32_t
0.000 s: int64_t to Frame[VTRes]
0.000 s: castScaObj, scalar to frame - uint32_t
0.000 s: same inst
0.000 s: CheckEq, original matrices - DenseMatrix<double>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEq, original matrices - DenseMatrix<double>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEq, original matrices - DenseMatrix<double>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, original matrices - DenseMatrix<double>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, original matrices - DenseMatrix<double>
0.000 s: same inst
0.000 s: CheckEq, original matrices - DenseMatrix<uint32_t>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEq, original matrices - DenseMatrix<uint32_t>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEq, original matrices - DenseMatrix<uint32_t>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, original matrices - DenseMatrix<uint32_t>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, original matrices - DenseMatrix<uint32_t>
0.000 s: same inst
0.000 s: CheckEq, original matrices - CSRMatrix<double>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEq, original matrices - CSRMatrix<double>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEq, original matrices - CSRMatrix<double>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, original matrices - CSRMatrix<double>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, original matrices - CSRMatrix<double>
0.000 s: same inst
0.000 s: CheckEq, original matrices - CSRMatrix<uint32_t>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEq, original matrices - CSRMatrix<uint32_t>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEq, original matrices - CSRMatrix<uint32_t>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, original matrices - CSRMatrix<uint32_t>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, original matrices - CSRMatrix<uint32_t>
0.000 s: same inst
0.000 s: CheckEq, original matrices - Matrix<double>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEq, original matrices - Matrix<double>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEq, original matrices - Matrix<double>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, original matrices - Matrix<double>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, original matrices - Matrix<double>
0.000 s: same inst
0.000 s: CheckEq, original matrices - Matrix<uint32_t>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEq, original matrices - Matrix<uint32_t>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEq, original matrices - Matrix<uint32_t>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, original matrices - Matrix<uint32_t>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, original matrices - Matrix<uint32_t>
0.000 s: same inst
0.000 s: CheckEq, views on matrices - DenseMatrix<double>
0.000 s: diff inst, same size, same cont, same orig
0.000 s: CheckEq, views on matrices - DenseMatrix<double>
0.000 s: diff inst, same size, same cont, diff orig
0.000 s: CheckEq, views on matrices - DenseMatrix<double>
0.000 s: diff inst, same size, same cont, overlap
0.000 s: CheckEq, views on matrices - DenseMatrix<double>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, views on matrices - DenseMatrix<double>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, views on matrices - DenseMatrix<double>
0.000 s: same inst
0.000 s: CheckEq, views on matrices - DenseMatrix<uint32_t>
0.000 s: diff inst, same size, same cont, same orig
0.000 s: CheckEq, views on matrices - DenseMatrix<uint32_t>
0.000 s: diff inst, same size, same cont, diff orig
0.000 s: CheckEq, views on matrices - DenseMatrix<uint32_t>
0.000 s: diff inst, same size, same cont, overlap
0.000 s: CheckEq, views on matrices - DenseMatrix<uint32_t>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, views on matrices - DenseMatrix<uint32_t>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, views on matrices - DenseMatrix<uint32_t>
0.000 s: same inst
0.000 s: CheckEq, views on matrices - Matrix<double>
0.000 s: diff inst, same size, same cont, same orig
0.000 s: CheckEq, views on matrices - Matrix<double>
0.000 s: diff inst, same size, same cont, diff orig
0.000 s: CheckEq, views on matrices - Matrix<double>
0.000 s: diff inst, same size, same cont, overlap
0.000 s: CheckEq, views on matrices - Matrix<double>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, views on matrices - Matrix<double>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, views on matrices - Matrix<double>
0.000 s: same inst
0.000 s: CheckEq, views on matrices - Matrix<uint32_t>
0.000 s: diff inst, same size, same cont, same orig
0.000 s: CheckEq, views on matrices - Matrix<uint32_t>
0.000 s: diff inst, same size, same cont, diff orig
0.000 s: CheckEq, views on matrices - Matrix<uint32_t>
0.000 s: diff inst, same size, same cont, overlap
0.000 s: CheckEq, views on matrices - Matrix<uint32_t>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, views on matrices - Matrix<uint32_t>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, views on matrices - Matrix<uint32_t>
0.000 s: same inst
0.000 s: CheckEq, views on matrices - CSRMatrix<double>
0.000 s: diff inst, same size, same cont, same orig
0.000 s: CheckEq, views on matrices - CSRMatrix<double>
0.000 s: diff inst, same size, same cont, diff orig
0.000 s: CheckEq, views on matrices - CSRMatrix<double>
0.000 s: diff inst, same size, same cont, overlap
0.000 s: CheckEq, views on matrices - CSRMatrix<double>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, views on matrices - CSRMatrix<double>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, views on matrices - CSRMatrix<double>
0.000 s: same inst
0.000 s: CheckEq, views on matrices - CSRMatrix<uint32_t>
0.000 s: diff inst, same size, same cont, same orig
0.000 s: CheckEq, views on matrices - CSRMatrix<uint32_t>
0.000 s: diff inst, same size, same cont, diff orig
0.000 s: CheckEq, views on matrices - CSRMatrix<uint32_t>
0.000 s: diff inst, same size, same cont, overlap
0.000 s: CheckEq, views on matrices - CSRMatrix<uint32_t>
0.000 s: diff inst, same size, diff cont
0.000 s: CheckEq, views on matrices - CSRMatrix<uint32_t>
0.000 s: diff inst, diff size, diff cont
0.000 s: CheckEq, views on matrices - CSRMatrix<uint32_t>
0.000 s: orig, diff inst, same size
0.000 s: CheckEq, empty matrices - DenseMatrix<double>
0.000 s: view, diff inst, same size
0.000 s: CheckEq, empty matrices - DenseMatrix<double>
0.000 s: view, diff inst, diff size
0.000 s: CheckEq, empty matrices - DenseMatrix<double>
0.000 s: orig, diff inst, same size
0.000 s: CheckEq, empty matrices - DenseMatrix<uint32_t>
0.000 s: view, diff inst, same size
0.000 s: CheckEq, empty matrices - DenseMatrix<uint32_t>
0.000 s: view, diff inst, diff size
0.000 s: CheckEq, empty matrices - DenseMatrix<uint32_t>
0.000 s: orig, diff inst, same size
0.000 s: CheckEq, empty matrices - Matrix<double>
0.000 s: view, diff inst, same size
0.000 s: CheckEq, empty matrices - Matrix<double>
0.000 s: view, diff inst, diff size
0.000 s: CheckEq, empty matrices - Matrix<double>
0.000 s: orig, diff inst, same size
0.000 s: CheckEq, empty matrices - Matrix<uint32_t>
0.000 s: view, diff inst, same size
0.000 s: CheckEq, empty matrices - Matrix<uint32_t>
0.000 s: view, diff inst, diff size
0.000 s: CheckEq, empty matrices - Matrix<uint32_t>
0.000 s: orig, diff inst, same size
0.000 s: CheckEq, empty matrices - CSRMatrix<double>
0.000 s: view, diff inst, same size
0.000 s: CheckEq, empty matrices - CSRMatrix<double>
0.000 s: view, diff inst, diff size
0.000 s: CheckEq, empty matrices - CSRMatrix<double>
0.000 s: orig, diff inst, same size
0.000 s: CheckEq, empty matrices - CSRMatrix<uint32_t>
0.000 s: view, diff inst, same size
0.000 s: CheckEq, empty matrices - CSRMatrix<uint32_t>
0.000 s: view, diff inst, diff size
0.000 s: CheckEq, empty matrices - CSRMatrix<uint32_t>
0.000 s: same inst
0.000 s: CheckEq, frames
0.000 s: diff inst, same schema, same cont, no labels
0.000 s: CheckEq, frames
0.000 s: diff inst, diff schema, same cont, no labels
0.000 s: CheckEq, frames
0.000 s: diff inst, same schema, diff cont, no labels
0.000 s: CheckEq, frames
0.000 s: diff inst, diff schema, diff cont, no labels
0.000 s: CheckEq, frames
0.000 s: diff inst, same schema, same cont, same labels
0.000 s: CheckEq, frames
0.000 s: diff inst, same schema, same cont, diff labels
0.000 s: CheckEq, frames
0.000 s: same inst
0.000 s: CheckEqApprox, original matrices - DenseMatrix<float>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEqApprox, original matrices - DenseMatrix<float>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEqApprox, original matrices - DenseMatrix<float>
0.000 s: diff inst, same size, accepted difference default EPS
0.000 s: CheckEqApprox, original matrices - DenseMatrix<float>
0.000 s: diff inst, same size, accepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - DenseMatrix<float>
0.000 s: diff inst, same size, unaccepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - DenseMatrix<float>
0.000 s: same inst
0.000 s: CheckEqApprox, original matrices - DenseMatrix<double>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEqApprox, original matrices - DenseMatrix<double>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEqApprox, original matrices - DenseMatrix<double>
0.000 s: diff inst, same size, accepted difference default EPS
0.000 s: CheckEqApprox, original matrices - DenseMatrix<double>
0.000 s: diff inst, same size, accepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - DenseMatrix<double>
0.000 s: diff inst, same size, unaccepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - DenseMatrix<double>
0.000 s: same inst
0.000 s: CheckEqApprox, original matrices - CSRMatrix<float>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEqApprox, original matrices - CSRMatrix<float>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEqApprox, original matrices - CSRMatrix<float>
0.000 s: diff inst, same size, accepted difference default EPS
0.000 s: CheckEqApprox, original matrices - CSRMatrix<float>
0.000 s: diff inst, same size, accepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - CSRMatrix<float>
0.000 s: diff inst, same size, unaccepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - CSRMatrix<float>
0.000 s: same inst
0.000 s: CheckEqApprox, original matrices - CSRMatrix<double>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEqApprox, original matrices - CSRMatrix<double>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEqApprox, original matrices - CSRMatrix<double>
0.000 s: diff inst, same size, accepted difference default EPS
0.000 s: CheckEqApprox, original matrices - CSRMatrix<double>
0.000 s: diff inst, same size, accepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - CSRMatrix<double>
0.000 s: diff inst, same size, unaccepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - CSRMatrix<double>
0.000 s: same inst
0.000 s: CheckEqApprox, original matrices - Matrix<float>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEqApprox, original matrices - Matrix<float>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEqApprox, original matrices - Matrix<float>
0.000 s: diff inst, same size, accepted difference default EPS
0.000 s: CheckEqApprox, original matrices - Matrix<float>
0.000 s: diff inst, same size, accepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - Matrix<float>
0.000 s: diff inst, same size, unaccepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - Matrix<float>
0.000 s: same inst
0.000 s: CheckEqApprox, original matrices - Matrix<double>
0.000 s: diff inst, same size, same cont
0.000 s: CheckEqApprox, original matrices - Matrix<double>
0.000 s: diff inst, diff size, same cont
0.000 s: CheckEqApprox, original matrices - Matrix<double>
0.000 s: diff inst, same size, accepted difference default EPS
0.000 s: CheckEqApprox, original matrices - Matrix<double>
0.000 s: diff inst, same size, accepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - Matrix<double>
0.000 s: diff inst, same size, unaccepted difference defined EPS
0.000 s: CheckEqApprox, original matrices - Matrix<double>
0.000 s: same inst
0.000 s: CheckEqApprox, views on matrices - DenseMatrix<float>
0.000 s: same view on different equal matrices
0.000 s: CheckEqApprox, views on matrices - DenseMatrix<float>
0.000 s: same inst
0.000 s: CheckEqApprox, views on matrices - DenseMatrix<double>
0.000 s: same view on different equal matrices
0.000 s: CheckEqApprox, views on matrices - DenseMatrix<double>
0.000 s: same inst
0.000 s: CheckEqApprox, views on matrices - Matrix<float>
0.000 s: same view on different equal matrices
0.000 s: CheckEqApprox, views on matrices - Matrix<float>
0.000 s: same inst
0.000 s: CheckEqApprox, views on matrices - Matrix<double>
0.000 s: same view on different equal matrices
0.000 s: CheckEqApprox, views on matrices - Matrix<double>
0.000 s: CheckEqApprox, frames - DenseMatrix<float>
0.000 s: CheckEqApprox, frames - DenseMatrix<double>
0.000 s: ColBind - DenseMatrix<double>
0.000 s: ColBind - DenseMatrix<uint32_t>
0.000 s: ColBind - Matrix<double>
0.000 s: ColBind - Matrix<uint32_t>
0.000 s: unique labels
0.000 s: ColBind - Frame
0.000 s: non-unique labels
0.000 s: ColBind - Frame
0.000 s: Normal on normal
0.000 s: ColBind - CSRMatrix<double>
0.000 s: View on normal
0.000 s: ColBind - CSRMatrix<double>
0.000 s: View on view
0.000 s: ColBind - CSRMatrix<double>
0.000 s: Normal on normal
0.000 s: ColBind - CSRMatrix<uint32_t>
0.000 s: View on normal
0.000 s: ColBind - CSRMatrix<uint32_t>
0.000 s: View on view
0.000 s: ColBind - CSRMatrix<uint32_t>
0.000 s: example 1
0.000 s: CondMatMatMat (Matrix) - DenseMatrix<int64_t>
0.000 s: example 1
0.000 s: CondMatMatMat (Matrix) - DenseMatrix<double>
0.000 s: example 1
0.000 s: CondMatMatMat (Matrix) - Matrix<int64_t>
0.000 s: example 1
0.000 s: CondMatMatMat (Matrix) - Matrix<double>
0.000 s: then matrix too small
0.000 s: CondMatMatMat (invalid shape) - DenseMatrix<int64_t>
0.000 s: else matrix too small
0.000 s: CondMatMatMat (invalid shape) - DenseMatrix<int64_t>
0.000 s: then/else matrices too small
0.000 s: CondMatMatMat (invalid shape) - DenseMatrix<int64_t>
0.000 s: then matrix too small
0.000 s: CondMatMatMat (invalid shape) - Matrix<int64_t>
0.000 s: else matrix too small
0.000 s: CondMatMatMat (invalid shape) - Matrix<int64_t>
0.000 s: then/else matrices too small
0.000 s: CondMatMatMat (invalid shape) - Matrix<int64_t>
0.000 s: example 1
0.000 s: CondMatMatSca (Matrix) - DenseMatrix<int64_t>
0.000 s: example 1
0.000 s: CondMatMatSca (Matrix) - DenseMatrix<double>
0.000 s: example 1
0.000 s: CondMatMatSca (Matrix) - Matrix<int64_t>
0.000 s: example 1
0.000 s: CondMatMatSca (Matrix) - Matrix<double>
0.000 s: then matrix too small
0.000 s: CondMatMatSca (invalid shape) - DenseMatrix<int64_t>
0.000 s: then matrix too small
0.000 s: CondMatMatSca (invalid shape) - Matrix<int64_t>
0.000 s: example 1
0.000 s: CondMatScaMat (Matrix) - DenseMatrix<int64_t>
0.000 s: example 1
0.000 s: CondMatScaMat (Matrix) - DenseMatrix<double>
0.000 s: example 1
0.000 s: CondMatScaMat (Matrix) - Matrix<int64_t>
0.000 s: example 1
0.000 s: CondMatScaMat (Matrix) - Matrix<double>
0.000 s: else matrix too small
0.000 s: CondMatScaMat (invalid shape) - DenseMatrix<int64_t>
0.000 s: else matrix too small
0.000 s: CondMatScaMat (invalid shape) - Matrix<int64_t>
0.000 s: example 1
0.000 s: CondMatScaSca (Matrix) - DenseMatrix<int64_t>
0.000 s: example 1
0.000 s: CondMatScaSca (Matrix) - DenseMatrix<double>
0.000 s: example 1
0.000 s: CondMatScaSca (Matrix) - Matrix<int64_t>
0.000 s: example 1
0.000 s: CondMatScaSca (Matrix) - Matrix<double>
0.000 s: without column labels
0.000 s: CreateFrame
0.000 s: with column labels
0.000 s: CreateFrame
0.000 s: example 1
0.000 s: CTable - DenseMatrix<int64_t>
0.000 s: example 2: automatic shape
0.000 s: CTable - DenseMatrix<int64_t>
0.000 s: example 2: crop #rows
0.000 s: CTable - DenseMatrix<int64_t>
0.000 s: example 2: crop #cols
0.000 s: CTable - DenseMatrix<int64_t>
0.000 s: example 2: crop both
0.000 s: CTable - DenseMatrix<int64_t>
0.000 s: example 3: more items than cells
0.000 s: CTable - DenseMatrix<int64_t>
0.000 s: example 1
0.000 s: CTable - DenseMatrix<int32_t>
0.000 s: example 2: automatic shape
0.000 s: CTable - DenseMatrix<int32_t>
0.000 s: example 2: crop #rows
0.000 s: CTable - DenseMatrix<int32_t>
0.000 s: example 2: crop #cols
0.000 s: CTable - DenseMatrix<int32_t>
0.000 s: example 2: crop both
0.000 s: CTable - DenseMatrix<int32_t>
0.000 s: example 3: more items than cells
0.000 s: CTable - DenseMatrix<int32_t>
0.000 s: example 1
0.000 s: CTable - DenseMatrix<double>
0.000 s: example 2: automatic shape
0.000 s: CTable - DenseMatrix<double>
0.000 s: example 2: crop #rows
0.000 s: CTable - DenseMatrix<double>
0.000 s: example 2: crop #cols
0.000 s: CTable - DenseMatrix<double>
0.000 s: example 2: crop both
0.000 s: CTable - DenseMatrix<double>
0.000 s: example 3: more items than cells
0.000 s: CTable - DenseMatrix<double>
0.000 s: example 1
0.000 s: CTable - CSRMatrix<int64_t>
0.000 s: example 2: automatic shape
0.000 s: CTable - CSRMatrix<int64_t>
0.000 s: example 2: crop #rows
0.000 s: CTable - CSRMatrix<int64_t>
0.000 s: example 2: crop #cols
0.000 s: CTable - CSRMatrix<int64_t>
0.000 s: example 2: crop both
0.000 s: CTable - CSRMatrix<int64_t>
0.000 s: example 3: more items than cells
0.000 s: CTable - CSRMatrix<int64_t>
0.000 s: example 1
0.000 s: CTable - CSRMatrix<int32_t>
0.000 s: example 2: automatic shape
0.000 s: CTable - CSRMatrix<int32_t>
0.000 s: example 2: crop #rows
0.000 s: CTable - CSRMatrix<int32_t>
0.000 s: example 2: crop #cols
0.000 s: CTable - CSRMatrix<int32_t>
0.000 s: example 2: crop both
0.000 s: CTable - CSRMatrix<int32_t>
0.000 s: example 3: more items than cells
0.000 s: CTable - CSRMatrix<int32_t>
0.000 s: example 1
0.000 s: CTable - CSRMatrix<double>
0.000 s: example 2: automatic shape
0.000 s: CTable - CSRMatrix<double>
0.000 s: example 2: crop #rows
0.000 s: CTable - CSRMatrix<double>
0.000 s: example 2: crop #cols
0.000 s: CTable - CSRMatrix<double>
0.000 s: example 2: crop both
0.000 s: CTable - CSRMatrix<double>
0.000 s: example 3: more items than cells
0.000 s: CTable - CSRMatrix<double>
0.000 s: example 1
0.000 s: CTable - Matrix<int64_t>
0.000 s: example 2: automatic shape
0.000 s: CTable - Matrix<int64_t>
0.000 s: example 2: crop #rows
0.000 s: CTable - Matrix<int64_t>
0.000 s: example 2: crop #cols
0.000 s: CTable - Matrix<int64_t>
0.000 s: example 2: crop both
0.000 s: CTable - Matrix<int64_t>
0.000 s: example 3: more items than cells
0.000 s: CTable - Matrix<int64_t>
0.000 s: example 1
0.000 s: CTable - Matrix<int32_t>
0.000 s: example 2: automatic shape
0.000 s: CTable - Matrix<int32_t>
0.000 s: example 2: crop #rows
0.000 s: CTable - Matrix<int32_t>
0.000 s: example 2: crop #cols
0.000 s: CTable - Matrix<int32_t>
0.000 s: example 2: crop both
0.000 s: CTable - Matrix<int32_t>
0.000 s: example 3: more items than cells
0.000 s: CTable - Matrix<int32_t>
0.000 s: example 1
0.000 s: CTable - Matrix<double>
0.000 s: example 2: automatic shape
0.000 s: CTable - Matrix<double>
0.000 s: example 2: crop #rows
0.000 s: CTable - Matrix<double>
0.000 s: example 2: crop #cols
0.000 s: CTable - Matrix<double>
0.000 s: example 2: crop both
0.000 s: CTable - Matrix<double>
0.000 s: example 3: more items than cells
0.000 s: CTable - Matrix<double>
0.000 s: DiagMatrix (diag-dense) - DenseMatrix<int32_t>
0.000 s: DiagMatrix (diag-dense) - DenseMatrix<float>
0.000 s: DiagMatrix (diag-csr/generic) - CSRMatrix<int32_t>
0.000 s: DiagMatrix (diag-csr/generic) - CSRMatrix<float>
0.000 s: DiagMatrix (diag-csr/generic) - Matrix<int32_t>
0.000 s: DiagMatrix (diag-csr/generic) - Matrix<float>
0.000 s: DiagVector-normal - CSRMatrix<int32_t>
0.000 s: DiagVector-normal - CSRMatrix<double>
0.000 s: DiagVector-normal - DenseMatrix<int32_t>
0.000 s: DiagVector-normal - DenseMatrix<double>
0.000 s: DiagVector-normal - Matrix<int32_t>
0.000 s: DiagVector-normal - Matrix<double>
0.000 s: DiagVector-mixed-diagonal - CSRMatrix<int32_t>
0.000 s: DiagVector-mixed-diagonal - CSRMatrix<double>
0.000 s: DiagVector-mixed-diagonal - DenseMatrix<int32_t>
0.000 s: DiagVector-mixed-diagonal - DenseMatrix<double>
0.000 s: DiagVector-mixed-diagonal - Matrix<int32_t>
0.000 s: DiagVector-mixed-diagonal - Matrix<double>
0.000 s: DiagVector-null - CSRMatrix<int32_t>
0.000 s: DiagVector-null - CSRMatrix<double>
0.000 s: DiagVector-null - DenseMatrix<int32_t>
0.000 s: DiagVector-null - DenseMatrix<double>
0.000 s: DiagVector-null - Matrix<int32_t>
0.000 s: DiagVector-null - Matrix<double>
0.000 s: pool_fwd_avg - DenseMatrix<float>
0.000 s: pool_fwd_avg - DenseMatrix<double>
0.000 s: pool_fwd_max - DenseMatrix<float>
0.000 s: pool_fwd_max - DenseMatrix<double>
0.000 s: EigenCal - DenseMatrix<double>
0.000 s: EigenCal - DenseMatrix<float>
0.000 s: EwBinaryMat (add) - DenseMatrix<double>
0.000 s: EwBinaryMat (add) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (add) - CSRMatrix<double>
0.000 s: EwBinaryMat (add) - CSRMatrix<uint32_t>
0.000 s: EwBinaryMat (add) - Matrix<double>
0.000 s: EwBinaryMat (add) - Matrix<uint32_t>
0.000 s: EwBinaryMat (mul) - DenseMatrix<double>
0.000 s: EwBinaryMat (mul) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (mul) - CSRMatrix<double>
0.000 s: EwBinaryMat (mul) - CSRMatrix<uint32_t>
0.000 s: EwBinaryMat (mul) - Matrix<double>
0.000 s: EwBinaryMat (mul) - Matrix<uint32_t>
0.000 s: EwBinaryMat (mul_sparse_dense) - double
0.000 s: EwBinaryMat (mul_sparse_dense) - uint32_t
0.000 s: EwBinaryMat (div) - DenseMatrix<double>
0.000 s: EwBinaryMat (div) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (div) - Matrix<double>
0.000 s: EwBinaryMat (div) - Matrix<uint32_t>
0.000 s: EwBinaryMat (eq) - DenseMatrix<double>
0.000 s: EwBinaryMat (eq) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (eq) - Matrix<double>
0.000 s: EwBinaryMat (eq) - Matrix<uint32_t>
0.000 s: EwBinaryMat (neq) - DenseMatrix<double>
0.000 s: EwBinaryMat (neq) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (neq) - Matrix<double>
0.000 s: EwBinaryMat (neq) - Matrix<uint32_t>
0.000 s: EwBinaryMat (lt) - DenseMatrix<double>
0.000 s: EwBinaryMat (lt) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (lt) - Matrix<double>
0.000 s: EwBinaryMat (lt) - Matrix<uint32_t>
0.000 s: EwBinaryMat (le) - DenseMatrix<double>
0.000 s: EwBinaryMat (le) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (le) - Matrix<double>
0.000 s: EwBinaryMat (le) - Matrix<uint32_t>
0.000 s: EwBinaryMat (gt) - DenseMatrix<double>
0.000 s: EwBinaryMat (gt) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (gt) - Matrix<double>
0.000 s: EwBinaryMat (gt) - Matrix<uint32_t>
0.000 s: EwBinaryMat (ge) - DenseMatrix<double>
0.000 s: EwBinaryMat (ge) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (ge) - Matrix<double>
0.000 s: EwBinaryMat (ge) - Matrix<uint32_t>
0.000 s: EwBinaryMat (min) - DenseMatrix<double>
0.000 s: EwBinaryMat (min) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (min) - Matrix<double>
0.000 s: EwBinaryMat (min) - Matrix<uint32_t>
0.000 s: EwBinaryMat (max) - DenseMatrix<double>
0.000 s: EwBinaryMat (max) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (max) - Matrix<double>
0.000 s: EwBinaryMat (max) - Matrix<uint32_t>
0.000 s: EwBinaryMat (and) - DenseMatrix<double>
0.000 s: EwBinaryMat (and) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (and) - Matrix<double>
0.000 s: EwBinaryMat (and) - Matrix<uint32_t>
0.000 s: EwBinaryMat (or) - DenseMatrix<double>
0.000 s: EwBinaryMat (or) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (or) - Matrix<double>
0.000 s: EwBinaryMat (or) - Matrix<uint32_t>
0.000 s: EwBinaryMat (some invalid op-code) - DenseMatrix<double>
0.000 s: EwBinaryMat (some invalid op-code) - DenseMatrix<uint32_t>
0.000 s: EwBinaryMat (some invalid op-code) - CSRMatrix<double>
0.000 s: EwBinaryMat (some invalid op-code) - CSRMatrix<uint32_t>
0.000 s: EwBinaryMat (some invalid op-code) - Matrix<double>
0.000 s: EwBinaryMat (some invalid op-code) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (add - Matrix) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (add - Matrix) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (add - Matrix) - Matrix<double>
0.000 s: EwBinaryObjSca (add - Matrix) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (add - Frame) - double
0.000 s: EwBinaryObjSca (add - Frame) - uint32_t
0.000 s: EwBinaryObjSca (mul - Matrix) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (mul - Matrix) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (mul - Matrix) - Matrix<double>
0.000 s: EwBinaryObjSca (mul - Matrix) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (mul - Frame) - double
0.000 s: EwBinaryObjSca (mul - Frame) - uint32_t
0.000 s: EwBinaryObjSca (div - Matrix) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (div - Matrix) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (div - Matrix) - Matrix<double>
0.000 s: EwBinaryObjSca (div - Matrix) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (div - Frame) - double
0.000 s: EwBinaryObjSca (div - Frame) - uint32_t
0.000 s: EwBinaryObjSca (eq - Matrix) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (eq - Matrix) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (eq - Matrix) - Matrix<double>
0.000 s: EwBinaryObjSca (eq - Matrix) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (eq - Frame) - double
0.000 s: EwBinaryObjSca (eq - Frame) - uint32_t
0.000 s: EwBinaryObjSca (neq - Matrix) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (neq - Matrix) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (neq - Matrix) - Matrix<double>
0.000 s: EwBinaryObjSca (neq - Matrix) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (neq - Frame) - double
0.000 s: EwBinaryObjSca (neq - Frame) - uint32_t
0.000 s: EwBinaryObjSca (lt - Matrix) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (lt - Matrix) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (lt - Matrix) - Matrix<double>
0.000 s: EwBinaryObjSca (lt - Matrix) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (lt - Frame) - double
0.000 s: EwBinaryObjSca (lt - Frame) - uint32_t
0.000 s: EwBinaryObjSca (le - Matrix) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (le - Matrix) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (le - Matrix) - Matrix<double>
0.000 s: EwBinaryObjSca (le - Matrix) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (le - Frame) - double
0.000 s: EwBinaryObjSca (le - Frame) - uint32_t
0.000 s: EwBinaryObjSca (gt - Matrix) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (gt - Matrix) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (gt - Matrix) - Matrix<double>
0.000 s: EwBinaryObjSca (gt - Matrix) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (gt - Frame) - double
0.000 s: EwBinaryObjSca (gt - Frame) - uint32_t
0.000 s: EwBinaryObjSca (ge - Matrix) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (ge - Matrix) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (ge - Matrix) - Matrix<double>
0.000 s: EwBinaryObjSca (ge - Matrix) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (ge - Frame) - double
0.000 s: EwBinaryObjSca (ge - Frame) - uint32_t
0.000 s: EwBinaryObjSca (min - Matrix) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (min - Matrix) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (min - Matrix) - Matrix<double>
0.000 s: EwBinaryObjSca (min - Matrix) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (min - Frame) - double
0.000 s: EwBinaryObjSca (min - Frame) - uint32_t
0.000 s: EwBinaryObjSca (max - Matrix) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (max - Matrix) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (max - Matrix) - Matrix<double>
0.000 s: EwBinaryObjSca (max - Matrix) - Matrix<uint32_t>
0.000 s: EwBinaryObjSca (max - Frame) - double
0.000 s: EwBinaryObjSca (max - Frame) - uint32_t
0.000 s: scalar=0, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - DenseMatrix<double>
0.000 s: scalar=1, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - DenseMatrix<double>
0.000 s: scalar=2, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - DenseMatrix<double>
0.000 s: scalar=-2, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - DenseMatrix<double>
0.000 s: scalar=0, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - DenseMatrix<uint32_t>
0.000 s: scalar=1, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - DenseMatrix<uint32_t>
0.000 s: scalar=2, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - DenseMatrix<uint32_t>
0.000 s: scalar=-2, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - DenseMatrix<uint32_t>
0.000 s: scalar=0, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - Matrix<double>
0.000 s: scalar=1, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - Matrix<double>
0.000 s: scalar=2, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - Matrix<double>
0.000 s: scalar=-2, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - Matrix<double>
0.000 s: scalar=0, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - Matrix<uint32_t>
0.000 s: scalar=1, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - Matrix<uint32_t>
0.000 s: scalar=2, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - Matrix<uint32_t>
0.000 s: scalar=-2, matrix
0.000 s: EwBinaryObjSca (and - Matrix) - Matrix<uint32_t>
0.000 s: scalar=0, frame
0.000 s: EwBinaryObjSca (and - Frame) - double
0.000 s: scalar=1, frame
0.000 s: EwBinaryObjSca (and - Frame) - double
0.000 s: scalar=2, frame
0.000 s: EwBinaryObjSca (and - Frame) - double
0.000 s: scalar=-2, frame
0.000 s: EwBinaryObjSca (and - Frame) - double
0.000 s: scalar=0, frame
0.000 s: EwBinaryObjSca (and - Frame) - uint32_t
0.000 s: scalar=1, frame
0.000 s: EwBinaryObjSca (and - Frame) - uint32_t
0.000 s: scalar=2, frame
0.000 s: EwBinaryObjSca (and - Frame) - uint32_t
0.000 s: scalar=-2, frame
0.000 s: EwBinaryObjSca (and - Frame) - uint32_t
0.000 s: scalar=0, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - DenseMatrix<double>
0.000 s: scalar=1, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - DenseMatrix<double>
0.000 s: scalar=2, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - DenseMatrix<double>
0.000 s: scalar=-2, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - DenseMatrix<double>
0.000 s: scalar=0, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - DenseMatrix<uint32_t>
0.000 s: scalar=1, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - DenseMatrix<uint32_t>
0.000 s: scalar=2, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - DenseMatrix<uint32_t>
0.000 s: scalar=-2, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - DenseMatrix<uint32_t>
0.000 s: scalar=0, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - Matrix<double>
0.000 s: scalar=1, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - Matrix<double>
0.000 s: scalar=2, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - Matrix<double>
0.000 s: scalar=-2, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - Matrix<double>
0.000 s: scalar=0, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - Matrix<uint32_t>
0.000 s: scalar=1, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - Matrix<uint32_t>
0.000 s: scalar=2, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - Matrix<uint32_t>
0.000 s: scalar=-2, matrix
0.000 s: EwBinaryObjSca (or - Matrix) - Matrix<uint32_t>
0.000 s: scalar=0, frame
0.000 s: EwBinaryObjSca (or - Frame) - double
0.000 s: scalar=1, frame
0.000 s: EwBinaryObjSca (or - Frame) - double
0.000 s: scalar=2, frame
0.000 s: EwBinaryObjSca (or - Frame) - double
0.000 s: scalar=-2, frame
0.000 s: EwBinaryObjSca (or - Frame) - double
0.000 s: scalar=0, frame
0.000 s: EwBinaryObjSca (or - Frame) - uint32_t
0.000 s: scalar=1, frame
0.000 s: EwBinaryObjSca (or - Frame) - uint32_t
0.000 s: scalar=2, frame
0.000 s: EwBinaryObjSca (or - Frame) - uint32_t
0.000 s: scalar=-2, frame
0.000 s: EwBinaryObjSca (or - Frame) - uint32_t
0.000 s: EwBinaryObjSca (some invalid op-code) - DenseMatrix<double>
0.000 s: EwBinaryObjSca (some invalid op-code) - DenseMatrix<uint32_t>
0.000 s: EwBinaryObjSca (some invalid op-code) - Matrix<double>
0.000 s: EwBinaryObjSca (some invalid op-code) - Matrix<uint32_t>
0.000 s: EwBinarySca (add) - double
0.000 s: EwBinarySca (add) - uint32_t
0.000 s: EwBinarySca (mul) - double
0.000 s: EwBinarySca (mul) - uint32_t
0.000 s: EwBinarySca (div) - double
0.000 s: EwBinarySca (div) - uint32_t
0.000 s: EwBinarySca (eq) - double
0.000 s: EwBinarySca (eq) - uint32_t
0.000 s: EwBinarySca (neq) - double
0.000 s: EwBinarySca (neq) - uint32_t
0.000 s: EwBinarySca (lt) - double
0.000 s: EwBinarySca (lt) - uint32_t
0.000 s: EwBinarySca (le) - double
0.000 s: EwBinarySca (le) - uint32_t
0.000 s: EwBinarySca (gt) - double
0.000 s: EwBinarySca (gt) - uint32_t
0.000 s: EwBinarySca (ge) - double
0.000 s: EwBinarySca (ge) - uint32_t
0.000 s: EwBinarySca (min) - double
0.000 s: EwBinarySca (min) - uint32_t
0.000 s: EwBinarySca (max) - double
0.000 s: EwBinarySca (max) - uint32_t
0.000 s: EwBinarySca (and) - double
0.000 s: EwBinarySca (and) - uint32_t
0.000 s: EwBinarySca (or) - double
0.000 s: EwBinarySca (or) - uint32_t
0.000 s: EwBinarySca (some invalid op-code) - double
0.000 s: EwBinarySca (some invalid op-code) - uint32_t
0.000 s: EwUnaryMat (abs) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (abs) - DenseMatrix<double>
0.000 s: EwUnaryMat (abs) - Matrix<int32_t>
0.000 s: EwUnaryMat (abs) - Matrix<double>
0.000 s: EwUnaryMat (sign) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (sign) - DenseMatrix<double>
0.000 s: EwUnaryMat (sign) - Matrix<int32_t>
0.000 s: EwUnaryMat (sign) - Matrix<double>
0.000 s: EwUnaryMat (sign, floating-point-specific) - DenseMatrix<double>
0.000 s: EwUnaryMat (sign, floating-point-specific) - Matrix<double>
0.000 s: EwUnaryMat (sqrt) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (sqrt) - DenseMatrix<double>
0.000 s: EwUnaryMat (sqrt) - Matrix<int32_t>
0.000 s: EwUnaryMat (sqrt) - Matrix<double>
0.000 s: EwUnaryMat (sqrt, check domain_error) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (sqrt, check domain_error) - DenseMatrix<double>
0.000 s: EwUnaryMat (sqrt, check domain_error) - Matrix<int32_t>
0.000 s: EwUnaryMat (sqrt, check domain_error) - Matrix<double>
0.000 s: EwUnaryMat (exp) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (exp) - DenseMatrix<double>
0.000 s: EwUnaryMat (exp) - Matrix<int32_t>
0.000 s: EwUnaryMat (exp) - Matrix<double>
0.000 s: EwUnaryMat (ln) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (ln) - DenseMatrix<double>
0.000 s: EwUnaryMat (ln) - Matrix<int32_t>
0.000 s: EwUnaryMat (ln) - Matrix<double>
0.000 s: EwUnaryMat (ln, check domain_error) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (ln, check domain_error) - DenseMatrix<double>
0.000 s: EwUnaryMat (ln, check domain_error) - Matrix<int32_t>
0.000 s: EwUnaryMat (ln, check domain_error) - Matrix<double>
0.000 s: EwUnaryMat (sin) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (sin) - DenseMatrix<double>
0.000 s: EwUnaryMat (sin) - Matrix<int32_t>
0.000 s: EwUnaryMat (sin) - Matrix<double>
0.000 s: EwUnaryMat (cos) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (cos) - DenseMatrix<double>
0.000 s: EwUnaryMat (cos) - Matrix<int32_t>
0.000 s: EwUnaryMat (cos) - Matrix<double>
0.000 s: EwUnaryMat (tan) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (tan) - DenseMatrix<double>
0.000 s: EwUnaryMat (tan) - Matrix<int32_t>
0.000 s: EwUnaryMat (tan) - Matrix<double>
0.000 s: EwUnaryMat (asin) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (asin) - DenseMatrix<double>
0.000 s: EwUnaryMat (asin) - Matrix<int32_t>
0.000 s: EwUnaryMat (asin) - Matrix<double>
0.000 s: EwUnaryMat (asin, check domain_error) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (asin, check domain_error) - DenseMatrix<double>
0.000 s: EwUnaryMat (asin, check domain_error) - Matrix<int32_t>
0.000 s: EwUnaryMat (asin, check domain_error) - Matrix<double>
0.000 s: EwUnaryMat (acos) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (acos) - DenseMatrix<double>
0.000 s: EwUnaryMat (acos) - Matrix<int32_t>
0.000 s: EwUnaryMat (acos) - Matrix<double>
0.000 s: EwUnaryMat (acos, check domain_error) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (acos, check domain_error) - DenseMatrix<double>
0.000 s: EwUnaryMat (acos, check domain_error) - Matrix<int32_t>
0.000 s: EwUnaryMat (acos, check domain_error) - Matrix<double>
0.000 s: EwUnaryMat (atan) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (atan) - DenseMatrix<double>
0.000 s: EwUnaryMat (atan) - Matrix<int32_t>
0.000 s: EwUnaryMat (atan) - Matrix<double>
0.000 s: EwUnaryMat (sinh) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (sinh) - DenseMatrix<double>
0.000 s: EwUnaryMat (sinh) - Matrix<int32_t>
0.000 s: EwUnaryMat (sinh) - Matrix<double>
0.000 s: EwUnaryMat (cosh) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (cosh) - DenseMatrix<double>
0.000 s: EwUnaryMat (cosh) - Matrix<int32_t>
0.000 s: EwUnaryMat (cosh) - Matrix<double>
0.000 s: EwUnaryMat (tanh) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (tanh) - DenseMatrix<double>
0.000 s: EwUnaryMat (tanh) - Matrix<int32_t>
0.000 s: EwUnaryMat (tanh) - Matrix<double>
0.000 s: EwUnaryMat (floor) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (floor) - DenseMatrix<double>
0.000 s: EwUnaryMat (floor) - Matrix<int32_t>
0.000 s: EwUnaryMat (floor) - Matrix<double>
0.000 s: EwUnaryMat (floor, floating-point-specific) - DenseMatrix<double>
0.000 s: EwUnaryMat (floor, floating-point-specific) - Matrix<double>
0.000 s: EwUnaryMat (ceil) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (ceil) - DenseMatrix<double>
0.000 s: EwUnaryMat (ceil) - Matrix<int32_t>
0.000 s: EwUnaryMat (ceil) - Matrix<double>
0.000 s: EwUnaryMat (ceil, floating-point-specific) - DenseMatrix<double>
0.000 s: EwUnaryMat (ceil, floating-point-specific) - Matrix<double>
0.000 s: EwUnaryMat (round) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (round) - DenseMatrix<double>
0.000 s: EwUnaryMat (round) - Matrix<int32_t>
0.000 s: EwUnaryMat (round) - Matrix<double>
0.000 s: EwUnaryMat (round, floating-point-specific) - DenseMatrix<double>
0.000 s: EwUnaryMat (round, floating-point-specific) - Matrix<double>
0.000 s: EwUnaryMat (some invalid op-code) - DenseMatrix<int32_t>
0.000 s: EwUnaryMat (some invalid op-code) - DenseMatrix<double>
0.000 s: EwUnaryMat (some invalid op-code) - Matrix<int32_t>
0.000 s: EwUnaryMat (some invalid op-code) - Matrix<double>
0.000 s: EwUnarySca (abs) - int8_t
0.000 s: EwUnarySca (abs) - int32_t
0.000 s: EwUnarySca (abs) - int64_t
0.000 s: EwUnarySca (abs) - float
0.000 s: EwUnarySca (abs) - double
0.000 s: EwUnarySca (sign) - int8_t
0.000 s: EwUnarySca (sign) - int32_t
0.000 s: EwUnarySca (sign) - int64_t
0.000 s: EwUnarySca (sign) - float
0.000 s: EwUnarySca (sign) - double
0.000 s: EwUnarySca (sign, floating-point-specific) - float
0.000 s: EwUnarySca (sign, floating-point-specific) - double
0.000 s: EwUnarySca (sqrt) - int8_t
0.000 s: EwUnarySca (sqrt) - int32_t
0.000 s: EwUnarySca (sqrt) - int64_t
0.000 s: EwUnarySca (sqrt) - float
0.000 s: EwUnarySca (sqrt) - double
0.000 s: EwUnarySca (exp) - int8_t
0.000 s: EwUnarySca (exp) - int32_t
0.000 s: EwUnarySca (exp) - int64_t
0.000 s: EwUnarySca (exp) - float
0.000 s: EwUnarySca (exp) - double
0.000 s: EwUnarySca (ln) - int8_t
0.000 s: EwUnarySca (ln) - int32_t
0.000 s: EwUnarySca (ln) - int64_t
0.000 s: EwUnarySca (ln) - float
0.000 s: EwUnarySca (ln) - double
0.000 s: EwUnarySca (ln, floating-point-specific) - float
0.000 s: EwUnarySca (ln, floating-point-specific) - double
0.000 s: EwUnarySca (sin) - int8_t
0.000 s: EwUnarySca (sin) - int32_t
0.000 s: EwUnarySca (sin) - int64_t
0.000 s: EwUnarySca (sin) - float
0.000 s: EwUnarySca (sin) - double
0.000 s: EwUnarySca (cos) - int8_t
0.000 s: EwUnarySca (cos) - int32_t
0.000 s: EwUnarySca (cos) - int64_t
0.000 s: EwUnarySca (cos) - float
0.000 s: EwUnarySca (cos) - double
0.000 s: EwUnarySca (tan) - int8_t
0.000 s: EwUnarySca (tan) - int32_t
0.000 s: EwUnarySca (tan) - int64_t
0.000 s: EwUnarySca (tan) - float
0.000 s: EwUnarySca (tan) - double
0.000 s: EwUnarySca (asin) - int8_t
0.000 s: EwUnarySca (asin) - int32_t
0.000 s: EwUnarySca (asin) - int64_t
0.000 s: EwUnarySca (asin) - float
0.000 s: EwUnarySca (asin) - double
0.000 s: EwUnarySca (acos) - int8_t
0.000 s: EwUnarySca (acos) - int32_t
0.000 s: EwUnarySca (acos) - int64_t
0.000 s: EwUnarySca (acos) - float
0.000 s: EwUnarySca (acos) - double
0.000 s: EwUnarySca (atan) - int8_t
0.000 s: EwUnarySca (atan) - int32_t
0.000 s: EwUnarySca (atan) - int64_t
0.000 s: EwUnarySca (atan) - float
0.000 s: EwUnarySca (atan) - double
0.000 s: EwUnarySca (sinh) - int8_t
0.000 s: EwUnarySca (sinh) - int32_t
0.000 s: EwUnarySca (sinh) - int64_t
0.000 s: EwUnarySca (sinh) - float
0.000 s: EwUnarySca (sinh) - double
0.000 s: EwUnarySca (cosh) - int8_t
0.000 s: EwUnarySca (cosh) - int32_t
0.000 s: EwUnarySca (cosh) - int64_t
0.000 s: EwUnarySca (cosh) - float
0.000 s: EwUnarySca (cosh) - double
0.000 s: EwUnarySca (tanh) - int8_t
0.000 s: EwUnarySca (tanh) - int32_t
0.000 s: EwUnarySca (tanh) - int64_t
0.000 s: EwUnarySca (tanh) - float
0.000 s: EwUnarySca (tanh) - double
0.000 s: EwUnarySca (floor) - int8_t
0.000 s: EwUnarySca (floor) - int32_t
0.000 s: EwUnarySca (floor) - int64_t
0.000 s: EwUnarySca (floor) - float
0.000 s: EwUnarySca (floor) - double
0.000 s: EwUnarySca (floor, floating-point-specific) - float
0.000 s: EwUnarySca (floor, floating-point-specific) - double
0.000 s: EwUnarySca (ceil) - int8_t
0.000 s: EwUnarySca (ceil) - int32_t
0.000 s: EwUnarySca (ceil) - int64_t
0.000 s: EwUnarySca (ceil) - float
0.000 s: EwUnarySca (ceil) - double
0.000 s: EwUnarySca (ceil, floating-point-specific) - float
0.000 s: EwUnarySca (ceil, floating-point-specific) - double
0.000 s: EwUnarySca (round) - int8_t
0.000 s: EwUnarySca (round) - int32_t
0.000 s: EwUnarySca (round) - int64_t
0.000 s: EwUnarySca (round) - float
0.000 s: EwUnarySca (round) - double
0.000 s: EwUnarySca (round, floating-point-specific) - float
0.000 s: EwUnarySca (round, floating-point-specific) - double
0.000 s: EwUnarySca (some invalid op-code) - int8_t
0.000 s: EwUnarySca (some invalid op-code) - int32_t
0.000 s: EwUnarySca (some invalid op-code) - int64_t
0.000 s: EwUnarySca (some invalid op-code) - float
0.000 s: EwUnarySca (some invalid op-code) - double
0.000 s: selecting nothing
0.000 s: ExtractCol - (Frame) - int64_t
0.000 s: selecting some, once, in-order
0.000 s: ExtractCol - (Frame) - int64_t
0.000 s: selecting everything, once, in-order
0.000 s: ExtractCol - (Frame) - int64_t
0.000 s: selecting everything, once, permuted
0.000 s: ExtractCol - (Frame) - int64_t
0.000 s: selecting some, repeated
0.000 s: ExtractCol - (Frame) - int64_t
0.000 s: selecting nothing
0.000 s: ExtractCol - (Frame) - size_t
0.000 s: selecting some, once, in-order
0.000 s: ExtractCol - (Frame) - size_t
0.000 s: selecting everything, once, in-order
0.000 s: ExtractCol - (Frame) - size_t
0.000 s: selecting everything, once, permuted
0.000 s: ExtractCol - (Frame) - size_t
0.000 s: selecting some, repeated
0.000 s: ExtractCol - (Frame) - size_t
0.000 s: selecting out of bounds, negative
0.000 s: ExtractCol - (Frame error handling) - int64_t
0.000 s: selecting out of bounds, too high
0.000 s: ExtractCol - (Frame error handling) - int64_t
0.000 s: selecting nothing
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<int64_t>
0.000 s: selecting some, once, in-order
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<int64_t>
0.000 s: selecting everything, once, in-order
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<int64_t>
0.000 s: selecting everything, once, permuted
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<int64_t>
0.000 s: selecting some, repeated
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<int64_t>
0.000 s: selecting out of bounds, negative
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<int64_t>
0.000 s: selecting out of bounds, too high
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<int64_t>
0.000 s: selecting nothing
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<double>
0.000 s: selecting some, once, in-order
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<double>
0.000 s: selecting everything, once, in-order
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<double>
0.000 s: selecting everything, once, permuted
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<double>
0.000 s: selecting some, repeated
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<double>
0.000 s: selecting out of bounds, negative
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<double>
0.000 s: selecting out of bounds, too high
0.000 s: ExtractCol - (Dense/Generic Matrix) - DenseMatrix<double>
0.000 s: selecting nothing
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<int64_t>
0.000 s: selecting some, once, in-order
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<int64_t>
0.000 s: selecting everything, once, in-order
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<int64_t>
0.000 s: selecting everything, once, permuted
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<int64_t>
0.000 s: selecting some, repeated
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<int64_t>
0.000 s: selecting out of bounds, negative
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<int64_t>
0.000 s: selecting out of bounds, too high
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<int64_t>
0.000 s: selecting nothing
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<double>
0.000 s: selecting some, once, in-order
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<double>
0.000 s: selecting everything, once, in-order
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<double>
0.000 s: selecting everything, once, permuted
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<double>
0.000 s: selecting some, repeated
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<double>
0.000 s: selecting out of bounds, negative
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<double>
0.000 s: selecting out of bounds, too high
0.000 s: ExtractCol - (Dense/Generic Matrix) - Matrix<double>
0.000 s: selecting nothing
0.000 s: ExtractRow - Frame - double
0.000 s: selecting some, once, in-order
0.000 s: ExtractRow - Frame - double
0.000 s: selecting everything, once, in-order
0.000 s: ExtractRow - Frame - double
0.000 s: selecting everything, once, permuted
0.000 s: ExtractRow - Frame - double
0.000 s: selecting some, repeated
0.000 s: ExtractRow - Frame - double
0.000 s: selecting nothing
0.000 s: ExtractRow - Frame - int64_t
0.000 s: selecting some, once, in-order
0.000 s: ExtractRow - Frame - int64_t
0.000 s: selecting everything, once, in-order
0.000 s: ExtractRow - Frame - int64_t
0.000 s: selecting everything, once, permuted
0.000 s: ExtractRow - Frame - int64_t
0.000 s: selecting some, repeated
0.000 s: ExtractRow - Frame - int64_t
0.000 s: selecting nothing
0.000 s: ExtractRow - Frame - uint32_t
0.000 s: selecting some, once, in-order
0.000 s: ExtractRow - Frame - uint32_t
0.000 s: selecting everything, once, in-order
0.000 s: ExtractRow - Frame - uint32_t
0.000 s: selecting everything, once, permuted
0.000 s: ExtractRow - Frame - uint32_t
0.000 s: selecting some, repeated
0.000 s: ExtractRow - Frame - uint32_t
0.000 s: ExtractRow - Matrix double naive - DenseMatrix<uint32_t>
0.000 s: ExtractRow - Matrix double naive - Matrix<uint32_t>
0.000 s: ExtractRow - Matrix double expanding - DenseMatrix<uint32_t>
0.000 s: ExtractRow - Matrix double expanding - Matrix<uint32_t>
0.000 s: ExtractRow - Matrix int unordered - DenseMatrix<uint32_t>
0.000 s: ExtractRow - Matrix int unordered - Matrix<uint32_t>
0.000 s: ExtractRow - Matrix int repeated with initialized resMatrix - DenseMatrix<uint32_t>
0.000 s: ExtractRow - Matrix int repeated with initialized resMatrix - Matrix<uint32_t>
0.000 s: sel out of bounds - negative
0.000 s: ExtractRow - Matrix boundary checking - DenseMatrix<int32_t>
0.000 s: sel out of bounds - too high
0.000 s: ExtractRow - Matrix boundary checking - DenseMatrix<int32_t>
0.000 s: sel out of bounds - negative
0.000 s: ExtractRow - Matrix boundary checking - DenseMatrix<double>
0.000 s: sel out of bounds - too high
0.000 s: ExtractRow - Matrix boundary checking - DenseMatrix<double>
0.000 s: sel out of bounds - negative
0.000 s: ExtractRow - Matrix boundary checking - Matrix<int32_t>
0.000 s: sel out of bounds - too high
0.000 s: ExtractRow - Matrix boundary checking - Matrix<int32_t>
0.000 s: sel out of bounds - negative
0.000 s: ExtractRow - Matrix boundary checking - Matrix<double>
0.000 s: sel out of bounds - too high
0.000 s: ExtractRow - Matrix boundary checking - Matrix<double>
0.000 s: sel out of bounds - negative
0.000 s: ExtractRow - Frame boundary checking - int32_t
0.000 s: sel out of bounds - too high
0.000 s: ExtractRow - Frame boundary checking - int32_t
0.000 s: sel out of bounds - negative
0.000 s: ExtractRow - Frame boundary checking - double
0.000 s: sel out of bounds - too high
0.000 s: ExtractRow - Frame boundary checking - double
0.000 s: 2x2 matrix
0.000 s: Fill (Matrix) - DenseMatrix<int64_t>
0.000 s: 1x5 matrix
0.000 s: Fill (Matrix) - DenseMatrix<int64_t>
0.000 s: 2x2 matrix
0.000 s: Fill (Matrix) - DenseMatrix<double>
0.000 s: 1x5 matrix
0.000 s: Fill (Matrix) - DenseMatrix<double>
0.000 s: 2x2 matrix
0.000 s: Fill (Matrix) - Matrix<int64_t>
0.000 s: 1x5 matrix
0.000 s: Fill (Matrix) - Matrix<int64_t>
0.000 s: 2x2 matrix
0.000 s: Fill (Matrix) - Matrix<double>
0.000 s: 1x5 matrix
0.000 s: Fill (Matrix) - Matrix<double>
0.000 s: bit vector empty
0.000 s: FilterCol - DenseMatrix<double>
0.000 s: bit vector contiguous 0
0.000 s: FilterCol - DenseMatrix<double>
0.000 s: bit vector contiguous 1
0.000 s: FilterCol - DenseMatrix<double>
0.000 s: bit vector mixed
0.000 s: FilterCol - DenseMatrix<double>
0.000 s: bit vector full
0.000 s: FilterCol - DenseMatrix<double>
0.000 s: bit vector empty
0.000 s: FilterCol - DenseMatrix<int64_t>
0.000 s: bit vector contiguous 0
0.000 s: FilterCol - DenseMatrix<int64_t>
0.000 s: bit vector contiguous 1
0.000 s: FilterCol - DenseMatrix<int64_t>
0.000 s: bit vector mixed
0.000 s: FilterCol - DenseMatrix<int64_t>
0.000 s: bit vector full
0.000 s: FilterCol - DenseMatrix<int64_t>
0.000 s: bit vector empty
0.000 s: FilterCol - DenseMatrix<uint32_t>
0.000 s: bit vector contiguous 0
0.000 s: FilterCol - DenseMatrix<uint32_t>
0.000 s: bit vector contiguous 1
0.000 s: FilterCol - DenseMatrix<uint32_t>
0.000 s: bit vector mixed
0.000 s: FilterCol - DenseMatrix<uint32_t>
0.000 s: bit vector full
0.000 s: FilterCol - DenseMatrix<uint32_t>
0.000 s: bit vector empty
0.000 s: FilterCol - Matrix<double>
0.000 s: bit vector contiguous 0
0.000 s: FilterCol - Matrix<double>
0.000 s: bit vector contiguous 1
0.000 s: FilterCol - Matrix<double>
0.000 s: bit vector mixed
0.000 s: FilterCol - Matrix<double>
0.000 s: bit vector full
0.000 s: FilterCol - Matrix<double>
0.000 s: bit vector empty
0.000 s: FilterCol - Matrix<int64_t>
0.000 s: bit vector contiguous 0
0.000 s: FilterCol - Matrix<int64_t>
0.000 s: bit vector contiguous 1
0.000 s: FilterCol - Matrix<int64_t>
0.000 s: bit vector mixed
0.000 s: FilterCol - Matrix<int64_t>
0.000 s: bit vector full
0.000 s: FilterCol - Matrix<int64_t>
0.000 s: bit vector empty
0.000 s: FilterCol - Matrix<uint32_t>
0.000 s: bit vector contiguous 0
0.000 s: FilterCol - Matrix<uint32_t>
0.000 s: bit vector contiguous 1
0.000 s: FilterCol - Matrix<uint32_t>
0.000 s: bit vector mixed
0.000 s: FilterCol - Matrix<uint32_t>
0.000 s: bit vector full
0.000 s: FilterCol - Matrix<uint32_t>
0.000 s: bit vector empty
0.000 s: FilterRow - DenseMatrix<double>
0.000 s: bit vector contiguous 0
0.000 s: FilterRow - DenseMatrix<double>
0.000 s: bit vector contiguous 1
0.000 s: FilterRow - DenseMatrix<double>
0.000 s: bit vector mixed
0.000 s: FilterRow - DenseMatrix<double>
0.000 s: bit vector full
0.000 s: FilterRow - DenseMatrix<double>
0.000 s: bit vector empty
0.000 s: FilterRow - DenseMatrix<int64_t>
0.000 s: bit vector contiguous 0
0.000 s: FilterRow - DenseMatrix<int64_t>
0.000 s: bit vector contiguous 1
0.000 s: FilterRow - DenseMatrix<int64_t>
0.000 s: bit vector mixed
0.000 s: FilterRow - DenseMatrix<int64_t>
0.000 s: bit vector full
0.000 s: FilterRow - DenseMatrix<int64_t>
0.000 s: bit vector empty
0.000 s: FilterRow - DenseMatrix<uint32_t>
0.000 s: bit vector contiguous 0
0.000 s: FilterRow - DenseMatrix<uint32_t>
0.000 s: bit vector contiguous 1
0.000 s: FilterRow - DenseMatrix<uint32_t>
0.000 s: bit vector mixed
0.000 s: FilterRow - DenseMatrix<uint32_t>
0.000 s: bit vector full
0.000 s: FilterRow - DenseMatrix<uint32_t>
0.000 s: bit vector empty
0.000 s: FilterRow - Matrix<double>
0.000 s: bit vector contiguous 0
0.000 s: FilterRow - Matrix<double>
0.000 s: bit vector contiguous 1
0.000 s: FilterRow - Matrix<double>
0.000 s: bit vector mixed
0.000 s: FilterRow - Matrix<double>
0.000 s: bit vector full
0.000 s: FilterRow - Matrix<double>
0.000 s: bit vector empty
0.000 s: FilterRow - Matrix<int64_t>
0.000 s: bit vector contiguous 0
0.000 s: FilterRow - Matrix<int64_t>
0.000 s: bit vector contiguous 1
0.000 s: FilterRow - Matrix<int64_t>
0.000 s: bit vector mixed
0.000 s: FilterRow - Matrix<int64_t>
0.000 s: bit vector full
0.000 s: FilterRow - Matrix<int64_t>
0.000 s: bit vector empty
0.000 s: FilterRow - Matrix<uint32_t>
0.000 s: bit vector contiguous 0
0.000 s: FilterRow - Matrix<uint32_t>
0.000 s: bit vector contiguous 1
0.000 s: FilterRow - Matrix<uint32_t>
0.000 s: bit vector mixed
0.000 s: FilterRow - Matrix<uint32_t>
0.000 s: bit vector full
0.000 s: FilterRow - Matrix<uint32_t>
0.000 s: selecting nothing
0.000 s: FilterRow - Frame - double
0.000 s: selecting some, but not all
0.000 s: FilterRow - Frame - double
0.000 s: selecting everything
0.000 s: FilterRow - Frame - double
0.000 s: selecting nothing
0.000 s: FilterRow - Frame - int64_t
0.000 s: selecting some, but not all
0.000 s: FilterRow - Frame - int64_t
0.000 s: selecting everything
0.000 s: FilterRow - Frame - int64_t
0.000 s: selecting nothing
0.000 s: FilterRow - Frame - uint32_t
0.000 s: selecting some, but not all
0.000 s: FilterRow - Frame - uint32_t
0.000 s: selecting everything
0.000 s: FilterRow - Frame - uint32_t
0.000 s: FilterRow (large input) - Frame - double
0.000 s: FilterRow (large input) - Frame - int64_t
0.000 s: FilterRow (large input) - Frame - uint32_t
0.000 s: GroupJoin
0.000 s: 1 grouping column, 1 aggregation column
0.000 s: Group - Frame
0.000 s: 1 grouping column with one distinct value, 1 aggregation columns
0.000 s: Group - Frame
0.000 s: 1 grouping column with all distinct values, 1 aggregation columns
0.000 s: Group - Frame
0.000 s: 1 grouping column, 3 aggregation columns
0.000 s: Group - Frame
0.000 s: 3 grouping columns, 1 aggregation column
0.000 s: Group - Frame
0.000 s: 5 grouping columns, 5 aggregation columns
0.000 s: Group - Frame
0.000 s: 0 grouping columns, 2 identical aggregation columns
0.000 s: Group - Frame
0.000 s: 3 grouping column, 0 aggregation columns
0.000 s: Group - Frame
0.000 s: hasSpecialValue check if test function is applied correctly.
0.000 s: hasSpecialValue - integer - DenseMatrix<uint32_t>
0.000 s: hasSpecialValue check if test function is applied correctly.
0.000 s: hasSpecialValue - integer - CSRMatrix<uint32_t>
0.000 s: hasSpecialValue check if test function is applied correctly.
0.000 s: hasSpecialValue - integer - Matrix<uint32_t>
0.000 s: hasSpecialValue for Sub-DenseMatrix
0.000 s: hasSpecialValue - DenseMatrix-Submatrix. - DenseMatrix<uint32_t>
0.000 s: hasSpecialValue for Sub-CSRMatrix
0.000 s: hasSpecialValue - CSRMatrix-Submatrix. - CSRMatrix<uint32_t>
0.000 s: Check for special values std::isnan/std::isinf.
0.000 s: hasSpecialValue - floating point - DenseMatrix<double>
0.000 s: Check for special values std::isnan/std::isinf.
0.000 s: hasSpecialValue - floating point - CSRMatrix<double>
0.000 s: Check for special values std::isnan/std::isinf.
0.000 s: hasSpecialValue - floating point - Matrix<double>
0.000 s: innerJoin
0.000 s: multiple insertions, lower bound
0.000 s: InsertCol - DenseMatrix<int32_t>
0.000 s: multiple insertion, middle
0.000 s: InsertCol - DenseMatrix<int32_t>
0.000 s: multiple insertions, upper bound
0.000 s: InsertCol - DenseMatrix<int32_t>
0.000 s: out of bounds - negative
0.000 s: InsertCol - DenseMatrix<int32_t>
0.000 s: out of bounds - too high
0.000 s: InsertCol - DenseMatrix<int32_t>
0.000 s: multiple insertions, lower bound
0.000 s: InsertCol - DenseMatrix<double>
0.000 s: multiple insertion, middle
0.000 s: InsertCol - DenseMatrix<double>
0.000 s: multiple insertions, upper bound
0.000 s: InsertCol - DenseMatrix<double>
0.000 s: out of bounds - negative
0.000 s: InsertCol - DenseMatrix<double>
0.000 s: out of bounds - too high
0.000 s: InsertCol - DenseMatrix<double>
0.000 s: multiple insertions, lower bound
0.000 s: InsertCol - Matrix<int32_t>
0.000 s: multiple insertion, middle
0.000 s: InsertCol - Matrix<int32_t>
0.000 s: multiple insertions, upper bound
0.000 s: InsertCol - Matrix<int32_t>
0.000 s: out of bounds - negative
0.000 s: InsertCol - Matrix<int32_t>
0.000 s: out of bounds - too high
0.000 s: InsertCol - Matrix<int32_t>
0.000 s: multiple insertions, lower bound
0.000 s: InsertCol - Matrix<double>
0.000 s: multiple insertion, middle
0.000 s: InsertCol - Matrix<double>
0.000 s: multiple insertions, upper bound
0.000 s: InsertCol - Matrix<double>
0.000 s: out of bounds - negative
0.000 s: InsertCol - Matrix<double>
0.000 s: out of bounds - too high
0.000 s: InsertCol - Matrix<double>
0.000 s: multiple insertions, FP bounds
0.000 s: InsertCol - FP specific - DenseMatrix<double>
0.000 s: multiple insertions, FP bounds
0.000 s: InsertCol - FP specific - Matrix<double>
0.000 s: multiple insertions, lower bound
0.000 s: InsertRow - DenseMatrix<int32_t>
0.000 s: multiple insertion, middle
0.000 s: InsertRow - DenseMatrix<int32_t>
0.000 s: multiple insertions, upper bound
0.000 s: InsertRow - DenseMatrix<int32_t>
0.000 s: out of bounds - negative
0.000 s: InsertRow - DenseMatrix<int32_t>
0.000 s: out of bounds - too high
0.000 s: InsertRow - DenseMatrix<int32_t>
0.000 s: multiple insertions, lower bound
0.000 s: InsertRow - DenseMatrix<double>
0.000 s: multiple insertion, middle
0.000 s: InsertRow - DenseMatrix<double>
0.000 s: multiple insertions, upper bound
0.000 s: InsertRow - DenseMatrix<double>
0.000 s: out of bounds - negative
0.000 s: InsertRow - DenseMatrix<double>
0.000 s: out of bounds - too high
0.000 s: InsertRow - DenseMatrix<double>
0.000 s: multiple insertions, lower bound
0.000 s: InsertRow - Matrix<int32_t>
0.000 s: multiple insertion, middle
0.000 s: InsertRow - Matrix<int32_t>
0.000 s: multiple insertions, upper bound
0.000 s: InsertRow - Matrix<int32_t>
0.000 s: out of bounds - negative
0.000 s: InsertRow - Matrix<int32_t>
0.000 s: out of bounds - too high
0.000 s: InsertRow - Matrix<int32_t>
0.000 s: multiple insertions, lower bound
0.000 s: InsertRow - Matrix<double>
0.000 s: multiple insertion, middle
0.000 s: InsertRow - Matrix<double>
0.000 s: multiple insertions, upper bound
0.000 s: InsertRow - Matrix<double>
0.000 s: out of bounds - negative
0.000 s: InsertRow - Matrix<double>
0.000 s: out of bounds - too high
0.000 s: InsertRow - Matrix<double>
0.000 s: multiple insertions, FP bounds
0.000 s: InsertRow - FP specific - DenseMatrix<double>
0.000 s: multiple insertions, FP bounds
0.000 s: InsertRow - FP specific - Matrix<double>
0.000 s: isSymmetric check for symmetrie.
0.000 s: isSymmetric - DenseMatrix<double>
0.000 s: isSymmetric check for symmetrie.
0.000 s: isSymmetric - DenseMatrix<uint32_t>
0.000 s: isSymmetric check for symmetrie.
0.000 s: isSymmetric - CSRMatrix<double>
0.000 s: isSymmetric check for symmetrie.
0.000 s: isSymmetric - CSRMatrix<uint32_t>
0.000 s: isSymmetric check for symmetrie.
0.000 s: isSymmetric - Matrix<double>
0.000 s: isSymmetric check for symmetrie.
0.000 s: isSymmetric - Matrix<uint32_t>
0.000 s: isSymmetric with submatrix.
0.000 s: isSymmetric - DenseMatrix-Submatrix - DenseMatrix<double>
0.000 s: isSymmetric with submatrix.
0.000 s: isSymmetric - DenseMatrix-Submatrix - DenseMatrix<uint32_t>
0.000 s: isSymmetric with submatrix.
0.000 s: isSymmetric - CSRMatrix-Submatrix - CSRMatrix<double>
0.000 s: isSymmetric with submatrix.
0.000 s: isSymmetric - CSRMatrix-Submatrix - CSRMatrix<uint32_t>
0.001 s: numDistinctApprox distinct
0.001 s: numDistinctApprox - DenseMatrix<double>
0.001 s: numDistinctApprox distinct leading 100 zeros
0.001 s: numDistinctApprox - DenseMatrix<double>
0.001 s: numDistinctApprox #distinct elements < K
0.001 s: numDistinctApprox - DenseMatrix<double>
0.000 s: numDistinctApprox distinct
0.000 s: numDistinctApprox - DenseMatrix<uint32_t>
0.000 s: numDistinctApprox distinct leading 100 zeros
0.000 s: numDistinctApprox - DenseMatrix<uint32_t>
0.000 s: numDistinctApprox #distinct elements < K
0.000 s: numDistinctApprox - DenseMatrix<uint32_t>
0.000 s: numDistinctApprox distinct
0.000 s: numDistinctApprox - CSRMatrix<double>
0.000 s: numDistinctApprox distinct leading 100 zeros
0.000 s: numDistinctApprox - CSRMatrix<double>
0.000 s: numDistinctApprox #distinct elements < K
0.000 s: numDistinctApprox - CSRMatrix<double>
0.000 s: numDistinctApprox distinct
0.000 s: numDistinctApprox - CSRMatrix<uint32_t>
0.000 s: numDistinctApprox distinct leading 100 zeros
0.000 s: numDistinctApprox - CSRMatrix<uint32_t>
0.000 s: numDistinctApprox #distinct elements < K
0.000 s: numDistinctApprox - CSRMatrix<uint32_t>
0.000 s: numDistinctApprox distinct
0.001 s: numDistinctApprox - Matrix<double>
0.000 s: numDistinctApprox distinct leading 100 zeros
0.001 s: numDistinctApprox - Matrix<double>
0.000 s: numDistinctApprox #distinct elements < K
0.000 s: numDistinctApprox - Matrix<double>
0.000 s: numDistinctApprox distinct
0.000 s: numDistinctApprox - Matrix<uint32_t>
0.000 s: numDistinctApprox distinct leading 100 zeros
0.000 s: numDistinctApprox - Matrix<uint32_t>
0.000 s: numDistinctApprox #distinct elements < K
0.001 s: numDistinctApprox - Matrix<uint32_t>
0.000 s: numDistinctApprox for Sub-DenseMatrix full matrix - sanity check
0.001 s: numDistinctApprox - Dense-Submatrix - DenseMatrix<double>
0.000 s: numDistinctApprox for Sub-DenseMatrix
0.000 s: numDistinctApprox - Dense-Submatrix - DenseMatrix<double>
0.000 s: numDistinctApprox for Sub-DenseMatrix #distinct elements < K
0.000 s: numDistinctApprox - Dense-Submatrix - DenseMatrix<double>
0.000 s: numDistinctApprox for Sub-DenseMatrix full matrix - sanity check
0.001 s: numDistinctApprox - Dense-Submatrix - DenseMatrix<uint32_t>
0.000 s: numDistinctApprox for Sub-DenseMatrix
0.000 s: numDistinctApprox - Dense-Submatrix - DenseMatrix<uint32_t>
0.000 s: numDistinctApprox for Sub-DenseMatrix #distinct elements < K
0.000 s: numDistinctApprox - Dense-Submatrix - DenseMatrix<uint32_t>
0.000 s: numDistinctApprox for Sub-CSRMatrix full matrix - sanity check
0.000 s: numDistinctApprox - CSR-Submatrix - CSRMatrix<double>
0.000 s: numDistinctApprox Sub-CSRMatrix
0.000 s: numDistinctApprox - CSR-Submatrix - CSRMatrix<double>
0.000 s: numDistinctApprox for Sub-CSRMatrix #distinct elements < K
0.000 s: numDistinctApprox - CSR-Submatrix - CSRMatrix<double>
0.000 s: numDistinctApprox for Sub-CSRMatrix full matrix - sanity check
0.000 s: numDistinctApprox - CSR-Submatrix - CSRMatrix<uint32_t>
0.000 s: numDistinctApprox Sub-CSRMatrix
0.000 s: numDistinctApprox - CSR-Submatrix - CSRMatrix<uint32_t>
0.000 s: numDistinctApprox for Sub-CSRMatrix #distinct elements < K
0.000 s: numDistinctApprox - CSR-Submatrix - CSRMatrix<uint32_t>
0.000 s: Map element-wise dense matrix - double
0.000 s: Map element-wise dense matrix - float
0.000 s: Map element-wise dense matrix - int64_t
0.000 s: Map element-wise dense matrix - int32_t
0.000 s: Map element-wise dense matrix - int8_t
0.000 s: Map element-wise dense matrix - uint64_t
0.000 s: Map element-wise dense matrix - uint8_t
0.000 s: MatMul - DenseMatrix<float>
0.000 s: MatMul - DenseMatrix<double>
0.000 s: MatMul - DenseMatrix<int32_t>
0.000 s: MatMul - DenseMatrix<int64_t>
0.000 s: MatMul - Matrix<float>
0.000 s: MatMul - Matrix<double>
0.000 s: MatMul - Matrix<int32_t>
0.000 s: MatMul - Matrix<int64_t>
0.000 s: MatMul Transposed - DenseMatrix<float>
0.000 s: MatMul Transposed - DenseMatrix<double>
0.000 s: MatMul Transposed - DenseMatrix<int32_t>
0.000 s: MatMul Transposed - DenseMatrix<int64_t>
0.000 s: MatMul Transposed - Matrix<float>
0.000 s: MatMul Transposed - Matrix<double>
0.000 s: MatMul Transposed - Matrix<int32_t>
0.000 s: MatMul Transposed - Matrix<int64_t>
0.000 s: MatMul after slicing - DenseMatrix<float>
0.000 s: MatMul after slicing - DenseMatrix<double>
0.000 s: MatMul after slicing - DenseMatrix<int32_t>
0.000 s: MatMul after slicing - DenseMatrix<int64_t>
0.000 s: normal encoding
0.000 s: OneHot - DenseMatrix<int64_t>
0.000 s: normal encoding - skip columns
0.000 s: OneHot - DenseMatrix<int64_t>
0.000 s: negative example - invalid info shape (not row matrix)
0.000 s: OneHot - DenseMatrix<int64_t>
0.000 s: negative example - invalid info shape (too small)
0.000 s: OneHot - DenseMatrix<int64_t>
0.000 s: negative example - invalid info value (int < -1)
0.000 s: OneHot - DenseMatrix<int64_t>
0.000 s: negative example - empty selection
0.000 s: OneHot - DenseMatrix<int64_t>
0.000 s: negative example - not enough space reserved (0 <= info value < arg value)
0.000 s: OneHot - DenseMatrix<int64_t>
0.000 s: negative example - out of bounds (arg value negative)
0.000 s: OneHot - DenseMatrix<int64_t>
0.000 s: normal encoding
0.000 s: OneHot - DenseMatrix<double>
0.000 s: normal encoding - skip columns
0.000 s: OneHot - DenseMatrix<double>
0.000 s: negative example - invalid info shape (not row matrix)
0.000 s: OneHot - DenseMatrix<double>
0.000 s: negative example - invalid info shape (too small)
0.000 s: OneHot - DenseMatrix<double>
0.000 s: negative example - invalid info value (int < -1)
0.000 s: OneHot - DenseMatrix<double>
0.000 s: negative example - empty selection
0.000 s: OneHot - DenseMatrix<double>
0.000 s: negative example - not enough space reserved (0 <= info value < arg value)
0.000 s: OneHot - DenseMatrix<double>
0.000 s: negative example - out of bounds (arg value negative)
0.000 s: OneHot - DenseMatrix<double>
0.000 s: normal encoding
0.000 s: OneHot - Matrix<int64_t>
0.000 s: normal encoding - skip columns
0.000 s: OneHot - Matrix<int64_t>
0.000 s: negative example - invalid info shape (not row matrix)
0.000 s: OneHot - Matrix<int64_t>
0.000 s: negative example - invalid info shape (too small)
0.000 s: OneHot - Matrix<int64_t>
0.000 s: negative example - invalid info value (int < -1)
0.000 s: OneHot - Matrix<int64_t>
0.000 s: negative example - empty selection
0.000 s: OneHot - Matrix<int64_t>
0.000 s: negative example - not enough space reserved (0 <= info value < arg value)
0.000 s: OneHot - Matrix<int64_t>
0.000 s: negative example - out of bounds (arg value negative)
0.000 s: OneHot - Matrix<int64_t>
0.000 s: normal encoding
0.000 s: OneHot - Matrix<double>
0.000 s: normal encoding - skip columns
0.000 s: OneHot - Matrix<double>
0.000 s: negative example - invalid info shape (not row matrix)
0.000 s: OneHot - Matrix<double>
0.000 s: negative example - invalid info shape (too small)
0.000 s: OneHot - Matrix<double>
0.000 s: negative example - invalid info value (int < -1)
0.000 s: OneHot - Matrix<double>
0.000 s: negative example - empty selection
0.000 s: OneHot - Matrix<double>
0.000 s: negative example - not enough space reserved (0 <= info value < arg value)
0.000 s: OneHot - Matrix<double>
0.000 s: negative example - out of bounds (arg value negative)
0.000 s: OneHot - Matrix<double>
0.000 s: single key column, ascending
0.000 s: Order - Frame
0.000 s: single key column, descending
0.000 s: Order - Frame
0.000 s: two key columns, ascending/descending
0.000 s: Order - Frame
0.000 s: four key columns, ascending/descending
0.000 s: Order - Frame
0.000 s: single key column, ascending
0.000 s: Order - DenseMatrix<double>
0.000 s: four key columns, ascending/descending
0.000 s: Order - DenseMatrix<double>
0.000 s: single key column, ascending
0.000 s: Order - DenseMatrix<float>
0.000 s: four key columns, ascending/descending
0.000 s: Order - DenseMatrix<float>
0.000 s: single key column, ascending
0.000 s: Order - Matrix<double>
0.000 s: four key columns, ascending/descending
0.000 s: Order - Matrix<double>
0.000 s: single key column, ascending
0.000 s: Order - Matrix<float>
0.000 s: four key columns, ascending/descending
0.000 s: Order - Matrix<float>
0.000 s: 0x1 op 1x0
0.000 s: OuterBinary (valid shapes) - DenseMatrix<double>
0.000 s: 0x1 op 1xn
0.000 s: OuterBinary (valid shapes) - DenseMatrix<double>
0.000 s: mx1 op 1x0
0.000 s: OuterBinary (valid shapes) - DenseMatrix<double>
0.000 s: mx1 op 1xn
0.000 s: OuterBinary (valid shapes) - DenseMatrix<double>
0.000 s: 0x1 op 1x0
0.000 s: OuterBinary (valid shapes) - DenseMatrix<int32_t>
0.000 s: 0x1 op 1xn
0.000 s: OuterBinary (valid shapes) - DenseMatrix<int32_t>
0.000 s: mx1 op 1x0
0.000 s: OuterBinary (valid shapes) - DenseMatrix<int32_t>
0.000 s: mx1 op 1xn
0.000 s: OuterBinary (valid shapes) - DenseMatrix<int32_t>
0.000 s: 0x1 op 1x0
0.000 s: OuterBinary (valid shapes) - Matrix<double>
0.000 s: 0x1 op 1xn
0.000 s: OuterBinary (valid shapes) - Matrix<double>
0.000 s: mx1 op 1x0
0.000 s: OuterBinary (valid shapes) - Matrix<double>
0.000 s: mx1 op 1xn
0.000 s: OuterBinary (valid shapes) - Matrix<double>
0.000 s: 0x1 op 1x0
0.000 s: OuterBinary (valid shapes) - Matrix<int32_t>
0.000 s: 0x1 op 1xn
0.000 s: OuterBinary (valid shapes) - Matrix<int32_t>
0.000 s: mx1 op 1x0
0.000 s: OuterBinary (valid shapes) - Matrix<int32_t>
0.000 s: mx1 op 1xn
0.000 s: OuterBinary (valid shapes) - Matrix<int32_t>
0.000 s: mx0 op 1xn
0.000 s: OuterBinary (invalid shapes) - DenseMatrix<double>
0.000 s: mx1 op 0xn
0.000 s: OuterBinary (invalid shapes) - DenseMatrix<double>
0.000 s: mx2 op 1xn
0.000 s: OuterBinary (invalid shapes) - DenseMatrix<double>
0.000 s: mx1 op 2xn
0.000 s: OuterBinary (invalid shapes) - DenseMatrix<double>
0.000 s: mx0 op 1xn
0.000 s: OuterBinary (invalid shapes) - DenseMatrix<int32_t>
0.000 s: mx1 op 0xn
0.000 s: OuterBinary (invalid shapes) - DenseMatrix<int32_t>
0.000 s: mx2 op 1xn
0.000 s: OuterBinary (invalid shapes) - DenseMatrix<int32_t>
0.000 s: mx1 op 2xn
0.000 s: OuterBinary (invalid shapes) - DenseMatrix<int32_t>
0.000 s: mx0 op 1xn
0.000 s: OuterBinary (invalid shapes) - Matrix<double>
0.000 s: mx1 op 0xn
0.000 s: OuterBinary (invalid shapes) - Matrix<double>
0.000 s: mx2 op 1xn
0.000 s: OuterBinary (invalid shapes) - Matrix<double>
0.000 s: mx1 op 2xn
0.000 s: OuterBinary (invalid shapes) - Matrix<double>
0.000 s: mx0 op 1xn
0.000 s: OuterBinary (invalid shapes) - Matrix<int32_t>
0.000 s: mx1 op 0xn
0.000 s: OuterBinary (invalid shapes) - Matrix<int32_t>
0.000 s: mx2 op 1xn
0.000 s: OuterBinary (invalid shapes) - Matrix<int32_t>
0.000 s: mx1 op 2xn
0.000 s: OuterBinary (invalid shapes) - Matrix<int32_t>
0.000 s: OuterBinary (add) - DenseMatrix<double>
0.000 s: OuterBinary (add) - DenseMatrix<int32_t>
0.000 s: OuterBinary (add) - Matrix<double>
0.000 s: OuterBinary (add) - Matrix<int32_t>
0.000 s: OuterBinary (sub) - DenseMatrix<double>
0.000 s: OuterBinary (sub) - DenseMatrix<int32_t>
0.000 s: OuterBinary (sub) - Matrix<double>
0.000 s: OuterBinary (sub) - Matrix<int32_t>
0.000 s: OuterBinary (mul) - DenseMatrix<double>
0.000 s: OuterBinary (mul) - DenseMatrix<int32_t>
0.000 s: OuterBinary (mul) - Matrix<double>
0.000 s: OuterBinary (mul) - Matrix<int32_t>
0.000 s: OuterBinary (div) - DenseMatrix<double>
0.000 s: OuterBinary (div) - DenseMatrix<int32_t>
0.000 s: OuterBinary (div) - Matrix<double>
0.000 s: OuterBinary (div) - Matrix<int32_t>
0.000 s: OuterBinary (pow) - DenseMatrix<double>
0.000 s: OuterBinary (pow) - DenseMatrix<int32_t>
0.000 s: OuterBinary (pow) - Matrix<double>
0.000 s: OuterBinary (pow) - Matrix<int32_t>
0.000 s: OuterBinary (mod) - DenseMatrix<double>
0.000 s: OuterBinary (mod) - DenseMatrix<int32_t>
0.000 s: OuterBinary (mod) - Matrix<double>
0.000 s: OuterBinary (mod) - Matrix<int32_t>
0.000 s: OuterBinary (log) - DenseMatrix<double>
0.000 s: OuterBinary (log) - DenseMatrix<int32_t>
0.000 s: OuterBinary (log) - Matrix<double>
0.000 s: OuterBinary (log) - Matrix<int32_t>
0.000 s: OuterBinary (min) - DenseMatrix<double>
0.000 s: OuterBinary (min) - DenseMatrix<int32_t>
0.000 s: OuterBinary (min) - Matrix<double>
0.000 s: OuterBinary (min) - Matrix<int32_t>
0.000 s: OuterBinary (max) - DenseMatrix<double>
0.000 s: OuterBinary (max) - DenseMatrix<int32_t>
0.000 s: OuterBinary (max) - Matrix<double>
0.000 s: OuterBinary (max) - Matrix<int32_t>
0.000 s: OuterBinary (and) - DenseMatrix<double>
0.000 s: OuterBinary (and) - DenseMatrix<int32_t>
0.000 s: OuterBinary (and) - Matrix<double>
0.000 s: OuterBinary (and) - Matrix<int32_t>
0.000 s: OuterBinary (or) - DenseMatrix<double>
0.000 s: OuterBinary (or) - DenseMatrix<int32_t>
0.000 s: OuterBinary (or) - Matrix<double>
0.000 s: OuterBinary (or) - Matrix<int32_t>
0.000 s: OuterBinary (eq) - DenseMatrix<double>
0.000 s: OuterBinary (eq) - DenseMatrix<int32_t>
0.000 s: OuterBinary (eq) - Matrix<double>
0.000 s: OuterBinary (eq) - Matrix<int32_t>
0.000 s: OuterBinary (neq) - DenseMatrix<double>
0.000 s: OuterBinary (neq) - DenseMatrix<int32_t>
0.000 s: OuterBinary (neq) - Matrix<double>
0.000 s: OuterBinary (neq) - Matrix<int32_t>
0.000 s: OuterBinary (lt) - DenseMatrix<double>
0.000 s: OuterBinary (lt) - DenseMatrix<int32_t>
0.000 s: OuterBinary (lt) - Matrix<double>
0.000 s: OuterBinary (lt) - Matrix<int32_t>
0.000 s: OuterBinary (le) - DenseMatrix<double>
0.000 s: OuterBinary (le) - DenseMatrix<int32_t>
0.000 s: OuterBinary (le) - Matrix<double>
0.000 s: OuterBinary (le) - Matrix<int32_t>
0.000 s: OuterBinary (gt) - DenseMatrix<double>
0.000 s: OuterBinary (gt) - DenseMatrix<int32_t>
0.000 s: OuterBinary (gt) - Matrix<double>
0.000 s: OuterBinary (gt) - Matrix<int32_t>
0.000 s: OuterBinary (ge) - DenseMatrix<double>
0.000 s: OuterBinary (ge) - DenseMatrix<int32_t>
0.000 s: OuterBinary (ge) - Matrix<double>
0.000 s: OuterBinary (ge) - Matrix<int32_t>
0.000 s: OuterBinary (some invalid op-code) - DenseMatrix<double>
0.000 s: OuterBinary (some invalid op-code) - DenseMatrix<int32_t>
0.000 s: OuterBinary (some invalid op-code) - Matrix<double>
0.000 s: OuterBinary (some invalid op-code) - Matrix<int32_t>
0.000 s: Quantization - DenseMatrix<float>
0.000 s: Quantization - Matrix<float>
0.000 s: sparsity = 0
0.000 s: RandMatrix - DenseMatrix<double>
0.000 s: sparsity = 0.1
0.001 s: RandMatrix - DenseMatrix<double>
0.001 s: sparsity = 0.5
0.001 s: RandMatrix - DenseMatrix<double>
0.001 s: sparsity = 0.9
0.001 s: RandMatrix - DenseMatrix<double>
0.001 s: sparsity = 1
0.001 s: RandMatrix - DenseMatrix<double>
0.000 s: sparsity = 0
0.000 s: RandMatrix - DenseMatrix<float>
0.000 s: sparsity = 0.1
0.001 s: RandMatrix - DenseMatrix<float>
0.001 s: sparsity = 0.5
0.001 s: RandMatrix - DenseMatrix<float>
0.001 s: sparsity = 0.9
0.001 s: RandMatrix - DenseMatrix<float>
0.001 s: sparsity = 1
0.001 s: RandMatrix - DenseMatrix<float>
0.000 s: sparsity = 0
0.000 s: RandMatrix - DenseMatrix<uint32_t>
0.000 s: sparsity = 0.1
0.001 s: RandMatrix - DenseMatrix<uint32_t>
0.001 s: sparsity = 0.5
0.001 s: RandMatrix - DenseMatrix<uint32_t>
0.001 s: sparsity = 0.9
0.001 s: RandMatrix - DenseMatrix<uint32_t>
0.001 s: sparsity = 1
0.001 s: RandMatrix - DenseMatrix<uint32_t>
0.000 s: sparsity = 0
0.000 s: RandMatrix - DenseMatrix<uint8_t>
0.000 s: sparsity = 0.1
0.000 s: RandMatrix - DenseMatrix<uint8_t>
0.001 s: sparsity = 0.5
0.001 s: RandMatrix - DenseMatrix<uint8_t>
0.001 s: sparsity = 0.9
0.001 s: RandMatrix - DenseMatrix<uint8_t>
0.000 s: sparsity = 1
0.001 s: RandMatrix - DenseMatrix<uint8_t>
0.000 s: sparsity = 0
0.000 s: RandMatrix - CSRMatrix<double>
0.000 s: sparsity = 0.1
0.000 s: RandMatrix - CSRMatrix<double>
0.000 s: sparsity = 0.5
0.001 s: RandMatrix - CSRMatrix<double>
0.000 s: sparsity = 0.9
0.000 s: RandMatrix - CSRMatrix<double>
0.000 s: sparsity = 1
0.000 s: RandMatrix - CSRMatrix<double>
0.000 s: sparsity = 0
0.000 s: RandMatrix - CSRMatrix<float>
0.000 s: sparsity = 0.1
0.000 s: RandMatrix - CSRMatrix<float>
0.000 s: sparsity = 0.5
0.000 s: RandMatrix - CSRMatrix<float>
0.000 s: sparsity = 0.9
0.000 s: RandMatrix - CSRMatrix<float>
0.000 s: sparsity = 1
0.000 s: RandMatrix - CSRMatrix<float>
0.000 s: sparsity = 0
0.000 s: RandMatrix - CSRMatrix<uint32_t>
0.000 s: sparsity = 0.1
0.000 s: RandMatrix - CSRMatrix<uint32_t>
0.000 s: sparsity = 0.5
0.000 s: RandMatrix - CSRMatrix<uint32_t>
0.000 s: sparsity = 0.9
0.000 s: RandMatrix - CSRMatrix<uint32_t>
0.000 s: sparsity = 1
0.000 s: RandMatrix - CSRMatrix<uint32_t>
0.000 s: sparsity = 0
0.000 s: RandMatrix - CSRMatrix<uint8_t>
0.000 s: sparsity = 0.1
0.000 s: RandMatrix - CSRMatrix<uint8_t>
0.000 s: sparsity = 0.5
0.001 s: RandMatrix - CSRMatrix<uint8_t>
0.000 s: sparsity = 0.9
0.000 s: RandMatrix - CSRMatrix<uint8_t>
0.000 s: sparsity = 1
0.000 s: RandMatrix - CSRMatrix<uint8_t>
0.000 s: sparsity = 0
0.000 s: RandMatrix - Matrix<double>
0.000 s: sparsity = 0.1
0.000 s: RandMatrix - Matrix<double>
0.001 s: sparsity = 0.5
0.001 s: RandMatrix - Matrix<double>
0.001 s: sparsity = 0.9
0.001 s: RandMatrix - Matrix<double>
0.000 s: sparsity = 1
0.001 s: RandMatrix - Matrix<double>
0.000 s: sparsity = 0
0.000 s: RandMatrix - Matrix<float>
0.000 s: sparsity = 0.1
0.000 s: RandMatrix - Matrix<float>
0.001 s: sparsity = 0.5
0.001 s: RandMatrix - Matrix<float>
0.001 s: sparsity = 0.9
0.001 s: RandMatrix - Matrix<float>
0.000 s: sparsity = 1
0.001 s: RandMatrix - Matrix<float>
0.000 s: sparsity = 0
0.000 s: RandMatrix - Matrix<uint32_t>
0.000 s: sparsity = 0.1
0.000 s: RandMatrix - Matrix<uint32_t>
0.001 s: sparsity = 0.5
0.001 s: RandMatrix - Matrix<uint32_t>
0.001 s: sparsity = 0.9
0.001 s: RandMatrix - Matrix<uint32_t>
0.000 s: sparsity = 1
0.001 s: RandMatrix - Matrix<uint32_t>
0.000 s: sparsity = 0
0.000 s: RandMatrix - Matrix<uint8_t>
0.000 s: sparsity = 0.1
0.000 s: RandMatrix - Matrix<uint8_t>
0.001 s: sparsity = 0.5
0.001 s: RandMatrix - Matrix<uint8_t>
0.001 s: sparsity = 0.9
0.001 s: RandMatrix - Matrix<uint8_t>
0.000 s: sparsity = 1
0.001 s: RandMatrix - Matrix<uint8_t>
0.000 s: Read CSV - DenseMatrix<double>
0.000 s: Read MM - DenseMatrix<uint32_t>
0.000 s: Read - Frame
0.000 s: empty arg, non-order-preserving recoding
0.000 s: Recode - DenseMatrix<double>
0.000 s: empty arg, order-preserving recoding
0.000 s: Recode - DenseMatrix<double>
0.000 s: non-empty arg, non-order-preserving recoding
0.000 s: Recode - DenseMatrix<double>
0.000 s: non-empty arg, order-preserving recoding
0.000 s: Recode - DenseMatrix<double>
0.000 s: empty arg, non-order-preserving recoding
0.000 s: Recode - DenseMatrix<uint32_t>
0.000 s: empty arg, order-preserving recoding
0.000 s: Recode - DenseMatrix<uint32_t>
0.000 s: non-empty arg, non-order-preserving recoding
0.000 s: Recode - DenseMatrix<uint32_t>
0.000 s: non-empty arg, order-preserving recoding
0.000 s: Recode - DenseMatrix<uint32_t>
0.000 s: empty arg, non-order-preserving recoding
0.000 s: Recode - Matrix<double>
0.000 s: empty arg, order-preserving recoding
0.000 s: Recode - Matrix<double>
0.000 s: non-empty arg, non-order-preserving recoding
0.000 s: Recode - Matrix<double>
0.000 s: non-empty arg, order-preserving recoding
0.000 s: Recode - Matrix<double>
0.000 s: empty arg, non-order-preserving recoding
0.000 s: Recode - Matrix<uint32_t>
0.000 s: empty arg, order-preserving recoding
0.000 s: Recode - Matrix<uint32_t>
0.000 s: non-empty arg, non-order-preserving recoding
0.000 s: Recode - Matrix<uint32_t>
0.000 s: non-empty arg, order-preserving recoding
0.000 s: Recode - Matrix<uint32_t>
0.000 s: Replace - DenseMatrix<double>
0.000 s: Replace - DenseMatrix<float>
0.000 s: Replace - DenseMatrix<uint32_t>
0.000 s: Replace - DenseMatrix<uint64_t>
0.000 s: Replace - DenseMatrix<int32_t>
0.000 s: Replace - DenseMatrix<int64_t>
0.000 s: Replace - CSRMatrix<double>
0.000 s: Replace - CSRMatrix<float>
0.000 s: Replace - CSRMatrix<uint32_t>
0.000 s: Replace - CSRMatrix<uint64_t>
0.000 s: Replace - CSRMatrix<int32_t>
0.000 s: Replace - CSRMatrix<int64_t>
0.000 s: Replace - Matrix<double>
0.000 s: Replace - Matrix<float>
0.000 s: Replace - Matrix<uint32_t>
0.000 s: Replace - Matrix<uint64_t>
0.000 s: Replace - Matrix<int32_t>
0.000 s: Replace - Matrix<int64_t>
0.000 s: Replace-nan - DenseMatrix<double>
0.000 s: Replace-nan - CSRMatrix<double>
0.000 s: Replace-nan - Matrix<double>
0.000 s: valid reshape 1
0.000 s: Reshape - DenseMatrix<double>
0.000 s: valid reshape 2
0.000 s: Reshape - DenseMatrix<double>
0.000 s: view 1
0.000 s: Reshape - DenseMatrix<double>
0.000 s: view 2
0.000 s: Reshape - DenseMatrix<double>
0.000 s: view 3
0.000 s: Reshape - DenseMatrix<double>
0.000 s: invalid reshape
0.000 s: Reshape - DenseMatrix<double>
0.000 s: valid reshape 1
0.000 s: Reshape - DenseMatrix<uint32_t>
0.000 s: valid reshape 2
0.000 s: Reshape - DenseMatrix<uint32_t>
0.000 s: view 1
0.000 s: Reshape - DenseMatrix<uint32_t>
0.000 s: view 2
0.000 s: Reshape - DenseMatrix<uint32_t>
0.000 s: view 3
0.000 s: Reshape - DenseMatrix<uint32_t>
0.000 s: invalid reshape
0.000 s: Reshape - DenseMatrix<uint32_t>
0.000 s: valid reshape 1
0.000 s: Reshape - Matrix<double>
0.000 s: valid reshape 2
0.000 s: Reshape - Matrix<double>
0.000 s: view 1
0.000 s: Reshape - Matrix<double>
0.000 s: view 2
0.000 s: Reshape - Matrix<double>
0.000 s: view 3
0.000 s: Reshape - Matrix<double>
0.000 s: invalid reshape
0.000 s: Reshape - Matrix<double>
0.000 s: valid reshape 1
0.000 s: Reshape - Matrix<uint32_t>
0.000 s: valid reshape 2
0.000 s: Reshape - Matrix<uint32_t>
0.000 s: view 1
0.000 s: Reshape - Matrix<uint32_t>
0.000 s: view 2
0.000 s: Reshape - Matrix<uint32_t>
0.000 s: view 3
0.000 s: Reshape - Matrix<uint32_t>
0.000 s: invalid reshape
0.000 s: Reshape - Matrix<uint32_t>
0.000 s: general matrix 1
0.000 s: Reverse - DenseMatrix<double>
0.000 s: general matrix 2
0.000 s: Reverse - DenseMatrix<double>
0.000 s: column matrix
0.000 s: Reverse - DenseMatrix<double>
0.000 s: row matrix
0.000 s: Reverse - DenseMatrix<double>
0.000 s: general matrix 1
0.000 s: Reverse - DenseMatrix<uint32_t>
0.000 s: general matrix 2
0.000 s: Reverse - DenseMatrix<uint32_t>
0.000 s: column matrix
0.000 s: Reverse - DenseMatrix<uint32_t>
0.000 s: row matrix
0.000 s: Reverse - DenseMatrix<uint32_t>
0.000 s: general matrix 1
0.000 s: Reverse - Matrix<double>
0.000 s: general matrix 2
0.000 s: Reverse - Matrix<double>
0.000 s: column matrix
0.000 s: Reverse - Matrix<double>
0.000 s: row matrix
0.000 s: Reverse - Matrix<double>
0.000 s: general matrix 1
0.000 s: Reverse - Matrix<uint32_t>
0.000 s: general matrix 2
0.000 s: Reverse - Matrix<uint32_t>
0.000 s: column matrix
0.000 s: Reverse - Matrix<uint32_t>
0.000 s: row matrix
0.000 s: Reverse - Matrix<uint32_t>
0.000 s: matching matrices
0.000 s: RowBind - DenseMatrix<double>
0.000 s: size mismatch
0.000 s: RowBind - DenseMatrix<double>
0.000 s: matching matrices
0.000 s: RowBind - DenseMatrix<uint32_t>
0.000 s: size mismatch
0.000 s: RowBind - DenseMatrix<uint32_t>
0.000 s: matching matrices
0.000 s: RowBind - Matrix<double>
0.000 s: size mismatch
0.000 s: RowBind - Matrix<double>
0.000 s: matching matrices
0.000 s: RowBind - Matrix<uint32_t>
0.000 s: size mismatch
0.000 s: RowBind - Matrix<uint32_t>
0.000 s: matching frames
0.000 s: RowBind - Frame
0.000 s: size mismatch
0.000 s: RowBind - Frame
0.000 s: schema mismatch
0.000 s: RowBind - Frame
0.000 s: label mismatch
0.000 s: RowBind - Frame
0.000 s: Normal on normal
0.000 s: RowBind - CSRMatrix<double>
0.000 s: Normal on view
0.000 s: RowBind - CSRMatrix<double>
0.000 s: View on view
0.000 s: RowBind - CSRMatrix<double>
0.000 s: Normal on normal
0.000 s: RowBind - CSRMatrix<uint32_t>
0.000 s: Normal on view
0.000 s: RowBind - CSRMatrix<uint32_t>
0.000 s: View on view
0.000 s: RowBind - CSRMatrix<uint32_t>
0.001 s: with replacement
0.001 s: Sample - DenseMatrix<double>
0.002 s: without replacement
0.002 s: Sample - DenseMatrix<double>
0.001 s: with replacement
0.001 s: Sample - DenseMatrix<uint32_t>
0.001 s: without replacement
0.001 s: Sample - DenseMatrix<uint32_t>
0.000 s: SemiJoin
0.000 s: Seq-basic-positive - DenseMatrix<int32_t>
0.000 s: Seq-basic-positive - DenseMatrix<int64_t>
0.000 s: Seq-reverse-positive - DenseMatrix<int32_t>
0.000 s: Seq-reverse-positive - DenseMatrix<int64_t>
0.000 s: Seq-basic-negative - DenseMatrix<int32_t>
0.000 s: Seq-basic-negative - DenseMatrix<int64_t>
0.000 s: Seq-reverse-negative - DenseMatrix<int32_t>
0.000 s: Seq-reverse-negative - DenseMatrix<int64_t>
0.000 s: Seq-basic-mix - DenseMatrix<int32_t>
0.000 s: Seq-basic-mix - DenseMatrix<int64_t>
0.000 s: Seq-reverse-mix - DenseMatrix<int32_t>
0.000 s: Seq-reverse-mix - DenseMatrix<int64_t>
0.000 s: Seq-floating-step-forward - DenseMatrix<float>
0.000 s: Seq-floating-step-forward - DenseMatrix<double>
0.000 s: Seq-floating-step-backward - DenseMatrix<float>
0.000 s: Seq-floating-step-backward - DenseMatrix<double>
0.000 s: Seq-step>end - DenseMatrix<float>
0.000 s: Seq-step>end - DenseMatrix<double>
0.000 s: Seq-end is not in the sequence - DenseMatrix<float>
0.000 s: Seq-end is not in the sequence - DenseMatrix<double>
0.000 s: positive inc
0.000 s: Seq-inc-does-not-lead-to-end - DenseMatrix<int32_t>
0.000 s: negative inc
0.000 s: Seq-inc-does-not-lead-to-end - DenseMatrix<int32_t>
0.000 s: positive inc
0.000 s: Seq-inc-does-not-lead-to-end - DenseMatrix<int64_t>
0.000 s: negative inc
0.000 s: Seq-inc-does-not-lead-to-end - DenseMatrix<int64_t>
0.000 s: SetColLabels
0.000 s: SetColLabelsPrefix
0.000 s: SliceCol - DenseMatrix<double>
0.000 s: SliceCol - DenseMatrix<int64_t>
0.000 s: SliceCol - DenseMatrix<uint32_t>
0.000 s: SliceCol - Matrix<double>
0.000 s: SliceCol - Matrix<int64_t>
0.000 s: SliceCol - Matrix<uint32_t>
0.000 s: lowerIncl out of bounds - negative
0.000 s: SliceCol - check throws - DenseMatrix<double>
0.000 s: lowerIncl greater than upperExcl
0.000 s: SliceCol - check throws - DenseMatrix<double>
0.000 s: upperExcl out of bounds - too high
0.000 s: SliceCol - check throws - DenseMatrix<double>
0.000 s: lowerIncl out of bounds - negative
0.000 s: SliceCol - check throws - DenseMatrix<int64_t>
0.000 s: lowerIncl greater than upperExcl
0.000 s: SliceCol - check throws - DenseMatrix<int64_t>
0.000 s: upperExcl out of bounds - too high
0.000 s: SliceCol - check throws - DenseMatrix<int64_t>
0.000 s: lowerIncl out of bounds - negative
0.000 s: SliceCol - check throws - Matrix<double>
0.000 s: lowerIncl greater than upperExcl
0.000 s: SliceCol - check throws - Matrix<double>
0.000 s: upperExcl out of bounds - too high
0.000 s: SliceCol - check throws - Matrix<double>
0.000 s: lowerIncl out of bounds - negative
0.000 s: SliceCol - check throws - Matrix<int64_t>
0.000 s: lowerIncl greater than upperExcl
0.000 s: SliceCol - check throws - Matrix<int64_t>
0.000 s: upperExcl out of bounds - too high
0.000 s: SliceCol - check throws - Matrix<int64_t>
0.000 s: SliceCol - Frame
0.000 s: lowerIncl out of bounds - negative
0.000 s: SliceCol - check throws - Frame
0.000 s: lowerIncl greater than upperExcl
0.000 s: SliceCol - check throws - Frame
0.000 s: upperExcl out of bounds - too high
0.000 s: SliceCol - check throws - Frame
0.000 s: upperExcl out of bounds - too high FP
0.000 s: SliceCol - check throws - Frame
0.000 s: SliceRow - DenseMatrix<double>
0.000 s: SliceRow - DenseMatrix<int64_t>
0.000 s: SliceRow - DenseMatrix<uint32_t>
0.000 s: SliceRow - Matrix<double>
0.000 s: SliceRow - Matrix<int64_t>
0.000 s: SliceRow - Matrix<uint32_t>
0.000 s: lowerIncl out of bounds - negative
0.000 s: SliceRow - check throws - DenseMatrix<double>
0.000 s: lowerIncl greater than upperExcl
0.000 s: SliceRow - check throws - DenseMatrix<double>
0.000 s: upperExcl out of bounds - too high
0.000 s: SliceRow - check throws - DenseMatrix<double>
0.000 s: lowerIncl out of bounds - negative
0.000 s: SliceRow - check throws - DenseMatrix<int64_t>
0.000 s: lowerIncl greater than upperExcl
0.000 s: SliceRow - check throws - DenseMatrix<int64_t>
0.000 s: upperExcl out of bounds - too high
0.000 s: SliceRow - check throws - DenseMatrix<int64_t>
0.000 s: lowerIncl out of bounds - negative
0.000 s: SliceRow - check throws - Matrix<double>
0.000 s: lowerIncl greater than upperExcl
0.000 s: SliceRow - check throws - Matrix<double>
0.000 s: upperExcl out of bounds - too high
0.000 s: SliceRow - check throws - Matrix<double>
0.000 s: lowerIncl out of bounds - negative
0.000 s: SliceRow - check throws - Matrix<int64_t>
0.000 s: lowerIncl greater than upperExcl
0.000 s: SliceRow - check throws - Matrix<int64_t>
0.000 s: upperExcl out of bounds - too high
0.000 s: SliceRow - check throws - Matrix<int64_t>
0.000 s: SliceRow - Frame
0.000 s: lowerIncl out of bounds - negative
0.000 s: SliceRow - check throws - Frame
0.000 s: lowerIncl greater than upperExcl
0.000 s: SliceRow - check throws - Frame
0.000 s: upperExcl out of bounds - too high
0.000 s: SliceRow - check throws - Frame
0.000 s: upperExcl out of bounds - too high FP
0.000 s: SliceRow - check throws - Frame
0.001 s: Solve - DenseMatrix<float>
0.000 s: Solve - DenseMatrix<double>
0.000 s: Stop - check throws
0.000 s: Syrk - DenseMatrix<float>
0.000 s: Syrk - DenseMatrix<double>
0.000 s: ThetaJoin: Test the equal (==) operation
0.000 s: ThetaJoin: Test the LessThan (<) operation
0.000 s: ThetaJoin: Test the LessEqual (<=) operation
0.000 s: ThetaJoin: Test the GreaterThan (>) operation
0.000 s: ThetaJoin: Test the GreaterEqual (>=) operation
0.000 s: ThetaJoin: Test the NonEqual (!=) operation
0.000 s: ThetaJoin: Test multiple conditions
0.002 s: ThetaJoin: Test unequal value types
0.000 s: fully populated matrix
0.000 s: Transpose - DenseMatrix<double>
0.000 s: sparse matrix
0.000 s: Transpose - DenseMatrix<double>
0.000 s: empty matrix
0.000 s: Transpose - DenseMatrix<double>
0.000 s: fully populated matrix
0.000 s: Transpose - DenseMatrix<uint32_t>
0.000 s: sparse matrix
0.000 s: Transpose - DenseMatrix<uint32_t>
0.000 s: empty matrix
0.000 s: Transpose - DenseMatrix<uint32_t>
0.000 s: fully populated matrix
0.000 s: Transpose - CSRMatrix<double>
0.000 s: sparse matrix
0.000 s: Transpose - CSRMatrix<double>
0.000 s: empty matrix
0.000 s: Transpose - CSRMatrix<double>
0.000 s: fully populated matrix
0.000 s: Transpose - CSRMatrix<uint32_t>
0.000 s: sparse matrix
0.000 s: Transpose - CSRMatrix<uint32_t>
0.000 s: empty matrix
0.000 s: Transpose - CSRMatrix<uint32_t>
0.000 s: fully populated matrix
0.000 s: Transpose - Matrix<double>
0.000 s: sparse matrix
0.000 s: Transpose - Matrix<double>
0.000 s: empty matrix
0.000 s: Transpose - Matrix<double>
0.000 s: fully populated matrix
0.000 s: Transpose - Matrix<uint32_t>
0.000 s: sparse matrix
0.000 s: Transpose - Matrix<uint32_t>
0.000 s: empty matrix
0.000 s: Transpose - Matrix<uint32_t>
0.000 s: Tri (example) - DenseMatrix<double>
0.000 s: Tri (example) - DenseMatrix<uint32_t>
0.000 s: Tri (example) - CSRMatrix<double>
0.000 s: Tri (example) - CSRMatrix<uint32_t>
0.000 s: Tri (example) - Matrix<double>
0.000 s: Tri (example) - Matrix<uint32_t>
0.007 s: Multi-threaded-scheduling - DenseMatrix<double>
0.008 s: Multi-threaded-scheduling - DenseMatrix<float>
0.007 s: Multi-threaded X+Y - DenseMatrix<double>
0.007 s: Multi-threaded X+Y - DenseMatrix<float>
0.007 s: Multi-threaded X*Y - DenseMatrix<double>
0.008 s: Multi-threaded X*Y - DenseMatrix<float>
===============================================================================
test cases:   1910 |   1899 passed | 11 failed
assertions: 417025 | 416998 passed | 27 failed

